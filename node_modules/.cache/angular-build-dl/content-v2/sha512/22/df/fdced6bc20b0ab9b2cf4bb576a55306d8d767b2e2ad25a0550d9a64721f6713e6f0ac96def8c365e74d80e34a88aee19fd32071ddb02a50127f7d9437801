{"version":3,"sources":["webpack:///src/app/login/login.module.ts","webpack:///src/app/login/login.page.html","webpack:///src/app/login/login.page.ts","webpack:///src/app/services/auth.service.ts","webpack:///src/app/services/http.service.ts","webpack:///src/app/services/toast.service.ts"],"names":["routes","path","component","LoginPageModule","LoginPage","router","menu","authService","storageService","toastService","validation_messages","type","message","loginForm","compose","required","pattern","minLength","enable","console","log","form","FormData","append","value","email","password","login","subscribe","result","store","data","presentToast","navigate","error","status","AuthService","httpService","postData","post","clear","HttpService","http","serviceName","headers","options","url","apiUrl","ToastService","toastController","infoMessage","create","duration","toast","present"],"mappings":"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","file":"login-login-module-ngfactory-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ComponentsModule } from '../components/components.module';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    ComponentsModule\n  ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n","<ion-header>\n  <ion-toolbar color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-back-button></ion-back-button>\n    </ion-buttons>\n    <ion-title>Log In</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"login-content\">\n  <div  class=\"dispplay-content-center\">\n      \n      <div class=\"padding20\"></div>\n      <ion-img class=\"auth-logo\" [src]=\"'./assets/logo/logo.png'\" [alt]=\"'walkthrough'\"></ion-img>\n      <h2>Welcome Back! </h2>\n      <div class=\"padding20\"></div>\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"doLogin()\" class=\"auth-form\">\n        <ion-list class=\"inputs-list\" lines=\"full\">\n          <ion-item class=\"input-item\">\n            <ion-input type=\"email\" placeholder=\"Email\" formControlName=\"email\" clearInput autocapitalize=\"off\" inputmode=\"email\"></ion-input>\n          </ion-item>\n          <div class=\"error-container\">\n            <ng-container *ngFor=\"let validation of validation_messages.email\">\n              <div class=\"error-message\" *ngIf=\"loginForm.get('email').hasError(validation.type) && (loginForm.get('email').dirty || loginForm.get('email').touched)\">\n                <ion-icon name=\"information-circle-outline\"></ion-icon>\n                <span>{{ validation.message }}</span>\n              </div>\n            </ng-container>\n          </div>\n\n          <ion-item class=\"input-item\">\n            <app-show-hide-password>\n              <ion-input type=\"password\" placeholder=\"Password\" formControlName=\"password\"></ion-input>\n            </app-show-hide-password>\n          </ion-item>\n          <div class=\"error-container\">\n            <ng-container *ngFor=\"let validation of validation_messages.password\">\n              <div class=\"error-message\" *ngIf=\"loginForm.get('password').hasError(validation.type) && (loginForm.get('password').dirty || loginForm.get('password').touched)\">\n                <ion-icon name=\"information-circle-outline\"></ion-icon>\n                <span>{{ validation.message }}</span>\n              </div>\n            </ng-container>\n          </div>\n        </ion-list>\n\n        <ion-button class=\"login-btn\" type=\"submit\" expand=\"block\" [disabled]=\"!loginForm.valid\">Log In</ion-button>\n        <ion-row class=\"other-auth-options-row\">\n          <ion-button class=\"forgot-btn\" fill=\"clear\" [routerLink]=\"['/auth/forgot-password']\">\n            Forgot Password?\n          </ion-button>\n          <ion-button class=\"signup-btn\" fill=\"clear\" [routerLink]=\"['/auth/signup']\">\n            Sign Up!\n          </ion-button>\n        </ion-row>\n      </form>\n  </div> \n</ion-content>\n","import { Component } from '@angular/core';\nimport { Validators, FormGroup, FormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { MenuController } from '@ionic/angular';\nimport { AuthService } from '../services/auth.service'\nimport { StorageService } from '../services/storage.service';\nimport { ToastService } from '../services/toast.service';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: [\n    './styles/login.page.scss'\n  ]\n})\nexport class LoginPage {\n  loginForm: FormGroup;\n\n  validation_messages = {\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Enter a valid email.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 5 characters long.' }\n    ]\n  };\n\n  constructor(\n    public router: Router,\n    public menu: MenuController,\n    private authService: AuthService,\n    private storageService: StorageService,\n    private toastService: ToastService\n  ) {\n    this.loginForm = new FormGroup({\n      'email': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n      'password': new FormControl('', Validators.compose([\n        Validators.minLength(5),\n        Validators.required\n      ]))\n    });\n  }\n\n  // Disable side menu for this page\n  ionViewDidEnter(): void {\n    this.menu.enable(false);\n  }\n\n  // Restore to default when leaving this page\n  ionViewDidLeave(): void {\n    this.menu.enable(true);\n  }\n\n  doLogin(): void {\n    console.log('do Log In');\n     let form = new FormData();\n     form.append('email', this.loginForm.value.email);\n     form.append('password', this.loginForm.value.password);\n    this.authService.login(form).subscribe((result: any) => {\n              this.storageService.store('userData',result.data);\n              this.toastService.presentToast('Successfully authenticated');\n              this.router.navigate(['app/dashboard']);\n            },\n            (error: any)=>{\n              if(error.status==0){\n                this.toastService.presentToast('Connection failed');\n              }\n              if(error.status==401){\n                this.toastService.presentToast('Authentcation failed');\n              }\n            }  \n     )\n   }\n\n  goToForgotPassword(): void {\n    console.log('redirect to forgot-password page');\n  }\n\n \n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { HttpService } from './http.service';\nimport { StorageService } from './storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n\nexport class AuthService {\n\n  constructor(\n    private httpService: HttpService,\n    private storageService: StorageService,\n    private router: Router\n  ) { }\n\n  login(postData: any): Observable<any> {\n    return this.httpService.post('login',postData);\n  }\n\n  signup(postData: any): Observable<any> {\n    return this.httpService.post('registers',postData);\n  }\n  logout() {\n    this.storageService.clear();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { from } from 'core-js/fn/array';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n\n  constructor(private http: HttpClient) { }\n\n  post(serviceName: string, data: any ){\n      const headers = new HttpHeaders();\n       const options = { headers: headers};\n      const url = environment.apiUrl +serviceName;\n     \n      return this.http.post(url,data, options);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ToastController } from '@ionic/angular'\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToastService {\n\n  constructor(public toastController: ToastController) { }\n  \n  async presentToast(infoMessage: string) {\n     const toast = await this.toastController.create({\n       message:infoMessage,\n       duration:3000\n     });\n     toast.present();\n\n  }\n}\n"]}