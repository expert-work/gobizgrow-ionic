/**
 * @fileoverview added by tsickle
 * Generated from: lib/pull/pull.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, Output, EventEmitter } from '@angular/core';
import { IonContent, Platform } from '@ionic/angular';
import { fromEvent, merge } from 'rxjs';
import { filter, map, skipWhile, takeUntil, takeLast } from 'rxjs/operators';
export class FivPull {
    /**
     * @param {?} element
     * @param {?} platform
     * @param {?} content
     */
    constructor(element, platform, content) {
        this.element = element;
        this.platform = platform;
        this.content = content;
        this.minPullHeight = 112;
        this.maxPullHeight = 168;
        this.enabled = true;
        this.enableScroll = false;
        this.direction = 'down';
        this.fivRefresh = new EventEmitter();
        this.fivCancel = new EventEmitter();
        this.fivPull = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * @param {?=} minPullHeight
     * @param {?=} maxPullHeight
     * @param {?=} direction
     * @return {?}
     */
    init(minPullHeight = 112, maxPullHeight = 168, direction = 'down') {
        this.minPullHeight = minPullHeight;
        this.maxPullHeight = maxPullHeight;
        this.direction = direction;
        this.content.scrollEvents = true;
        this.content.getScrollElement().then((/**
         * @param {?} s
         * @return {?}
         */
        s => {
            this.scrollY = s; // needed for scrollTop
            this.setupPanListener();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    setupPanListener() {
        /** @type {?} */
        const touchstart$ = fromEvent(this.element.nativeElement, 'touchstart', {
            passive: true
        });
        /** @type {?} */
        const touchmove$ = fromEvent(this.element.nativeElement, 'touchmove', {
            passive: true
        });
        /** @type {?} */
        const touchend$ = fromEvent(this.element.nativeElement, 'touchend', {
            passive: true
        });
        /** @type {?} */
        const touchcancel$ = fromEvent(this.element.nativeElement, 'touchcancel', {
            passive: true
        });
        /** @type {?} */
        const end$ = merge(touchend$, touchcancel$);
        /** @type {?} */
        const dragAtTop = touchstart$.pipe(filter((/**
         * @param {?} e
         * @return {?}
         */
        e => (this.scrollY.scrollTop === 0 || this.enableScroll) &&
            this.direction === 'down' &&
            this.enabled)));
        /** @type {?} */
        const dragAtBottom = touchstart$.pipe(filter((/**
         * @param {?} e
         * @return {?}
         */
        e => (this.scrollY.scrollTop ===
            this.scrollY.clientHeight - this.platform.height() ||
            this.enableScroll) &&
            this.direction === 'up' &&
            this.enabled)));
        /** @type {?} */
        const dragTopDown = dragAtTop.pipe(map((/**
         * @param {?} start
         * @return {?}
         */
        (start) => {
            /** @type {?} */
            const startY = start.touches[0].pageY;
            return touchmove$.pipe(map((/**
             * @param {?} move
             * @return {?}
             */
            (move) => {
                /** @type {?} */
                const currentY = move.touches[0].pageY;
                return {
                    startEvent: start,
                    moveEvent: move,
                    startY: startY,
                    currentY: currentY,
                    offset: currentY - startY
                };
            })), skipWhile((/**
             * @param {?} drag
             * @return {?}
             */
            drag => drag.offset < 0)), takeUntil(end$));
        })));
        dragTopDown.forEach((/**
         * @param {?} drags
         * @return {?}
         */
        drags => {
            drags.forEach((/**
             * @param {?} drag
             * @return {?}
             */
            drag => {
                /** @type {?} */
                const offset = drag.offset / 2;
                if (offset < 0 || offset > this.maxPullHeight) {
                    return;
                }
                if (offset <= this.maxPullHeight) {
                }
                this.fivPull.emit(offset / this.maxPullHeight);
            }));
            drags.pipe(takeLast(1)).subscribe((/**
             * @param {?} drag
             * @return {?}
             */
            drag => {
                /** @type {?} */
                const offset = drag.offset / 2;
                /** @type {?} */
                const refresh = offset >= this.minPullHeight;
                if (refresh) {
                    this.fivRefresh.emit(offset / this.maxPullHeight);
                }
                else {
                    this.fivCancel.emit(offset / this.maxPullHeight);
                }
            }));
        }));
        /** @type {?} */
        const dragBottomUp = dragAtBottom.pipe(map((/**
         * @param {?} start
         * @return {?}
         */
        (start) => {
            /** @type {?} */
            const startY = start.touches[0].pageY;
            return touchmove$.pipe(map((/**
             * @param {?} move
             * @return {?}
             */
            (move) => {
                /** @type {?} */
                const currentY = move.touches[0].pageY;
                return {
                    startEvent: start,
                    moveEvent: move,
                    startY: startY,
                    currentY: currentY,
                    offset: startY - currentY
                };
            })), skipWhile((/**
             * @param {?} drag
             * @return {?}
             */
            drag => drag.offset < 0)), takeUntil(end$));
        })));
        dragBottomUp.forEach((/**
         * @param {?} drags
         * @return {?}
         */
        drags => {
            drags.forEach((/**
             * @param {?} drag
             * @return {?}
             */
            drag => {
                /** @type {?} */
                const offset = drag.offset / 2;
                if (offset < 0 || offset > this.maxPullHeight) {
                    return;
                }
                this.fivPull.emit(offset / this.maxPullHeight);
            }));
            drags.pipe(takeLast(1)).subscribe((/**
             * @param {?} drag
             * @return {?}
             */
            drag => {
                /** @type {?} */
                const offset = drag.offset / 2;
                /** @type {?} */
                const refresh = offset >= this.minPullHeight;
                if (refresh) {
                    this.fivRefresh.emit(offset / this.maxPullHeight);
                }
                else {
                    this.fivCancel.emit(offset / this.maxPullHeight);
                }
            }));
        }));
    }
}
FivPull.decorators = [
    { type: Directive, args: [{
                selector: '[fivPull]'
            },] }
];
/** @nocollapse */
FivPull.ctorParameters = () => [
    { type: ElementRef },
    { type: Platform },
    { type: IonContent }
];
FivPull.propDecorators = {
    minPullHeight: [{ type: Input }],
    maxPullHeight: [{ type: Input }],
    enabled: [{ type: Input }],
    enableScroll: [{ type: Input }],
    direction: [{ type: Input }],
    fivRefresh: [{ type: Output }],
    fivCancel: [{ type: Output }],
    fivPull: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FivPull.prototype.minPullHeight;
    /** @type {?} */
    FivPull.prototype.maxPullHeight;
    /** @type {?} */
    FivPull.prototype.enabled;
    /** @type {?} */
    FivPull.prototype.enableScroll;
    /** @type {?} */
    FivPull.prototype.direction;
    /** @type {?} */
    FivPull.prototype.fivRefresh;
    /** @type {?} */
    FivPull.prototype.fivCancel;
    /** @type {?} */
    FivPull.prototype.fivPull;
    /** @type {?} */
    FivPull.prototype.scrollY;
    /**
     * @type {?}
     * @private
     */
    FivPull.prototype.element;
    /**
     * @type {?}
     * @private
     */
    FivPull.prototype.platform;
    /**
     * @type {?}
     * @private
     */
    FivPull.prototype.content;
}
//# sourceMappingURL=data:application/json;base64,