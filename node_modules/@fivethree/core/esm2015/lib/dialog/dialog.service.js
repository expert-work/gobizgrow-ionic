/**
 * @fileoverview added by tsickle
 * Generated from: lib/dialog/dialog.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { FivOverlayService } from '../overlay/overlay.service';
import { FivDialog } from '../dialog/dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "../overlay/overlay.service";
/**
 * @record
 */
export function DialogOptions() { }
if (false) {
    /** @type {?} */
    DialogOptions.prototype.verticalAlign;
    /** @type {?} */
    DialogOptions.prototype.horizontalAlign;
    /** @type {?} */
    DialogOptions.prototype.shape;
    /** @type {?} */
    DialogOptions.prototype.backdrop;
    /** @type {?} */
    DialogOptions.prototype.duration;
}
export class FivDialogService {
    /**
     * @param {?} overlay
     */
    constructor(overlay) {
        this.overlay = overlay;
    }
    /**
     * @param {?} viewContainerRef
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    openDialog(viewContainerRef, content, options) {
        /** @type {?} */
        const c = this.overlay.createOverlay(viewContainerRef, FivDialog, content);
        c.instance.verticalAlign = options ? options.verticalAlign : 'top';
        c.instance.verticalAlign = options ? options.verticalAlign : 'center';
        c.instance.backdrop = options ? options.backdrop : true;
        c.instance.duration = options ? options.duration : 0;
        c.instance.shape = options ? options.shape : 'card';
        c.instance.open();
        return c;
    }
}
FivDialogService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FivDialogService.ctorParameters = () => [
    { type: FivOverlayService }
];
/** @nocollapse */ FivDialogService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function FivDialogService_Factory() { return new FivDialogService(i0.ɵɵinject(i1.FivOverlayService)); }, token: FivDialogService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    FivDialogService.prototype.overlay;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZml2ZXRocmVlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlhbG9nL2RpYWxvZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBb0IsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLGlCQUFpQixFQUFhLE1BQU0sNEJBQTRCLENBQUM7QUFDMUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7Ozs7QUFFdkQsbUNBTUM7OztJQUxDLHNDQUEyQzs7SUFDM0Msd0NBQTZDOztJQUM3Qyw4QkFBdUI7O0lBQ3ZCLGlDQUFrQjs7SUFDbEIsaUNBQWlCOztBQU1uQixNQUFNLE9BQU8sZ0JBQWdCOzs7O0lBQzNCLFlBQW9CLE9BQTBCO1FBQTFCLFlBQU8sR0FBUCxPQUFPLENBQW1CO0lBQUcsQ0FBQzs7Ozs7OztJQUVsRCxVQUFVLENBQ1IsZ0JBQWtDLEVBQ2xDLE9BQXVCLEVBQ3ZCLE9BQXVCOztjQUVqQixDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQ2xDLGdCQUFnQixFQUNoQixTQUFTLEVBQ1QsT0FBTyxDQUNSO1FBQ0QsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDbkUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFDdEUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDeEQsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDcEQsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVsQixPQUFPLENBQUMsQ0FBQztJQUNYLENBQUM7OztZQXhCRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFiUSxpQkFBaUI7Ozs7Ozs7O0lBZVosbUNBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRml2T3ZlcmxheVNlcnZpY2UsIE5nQ29udGVudCB9IGZyb20gJy4uL292ZXJsYXkvb3ZlcmxheS5zZXJ2aWNlJztcbmltcG9ydCB7IEZpdkRpYWxvZyB9IGZyb20gJy4uL2RpYWxvZy9kaWFsb2cuY29tcG9uZW50JztcblxuZXhwb3J0IGludGVyZmFjZSBEaWFsb2dPcHRpb25zIHtcbiAgdmVydGljYWxBbGlnbjogJ2JvdHRvbScgfCAnY2VudGVyJyB8ICd0b3AnO1xuICBob3Jpem9udGFsQWxpZ246ICdsZWZ0JyB8ICdjZW50ZXInIHwgJ3JpZ2h0JztcbiAgc2hhcGU6ICdjYXJkJyB8ICdmaWxsJztcbiAgYmFja2Ryb3A6IGJvb2xlYW47XG4gIGR1cmF0aW9uOiBudW1iZXI7XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEZpdkRpYWxvZ1NlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG92ZXJsYXk6IEZpdk92ZXJsYXlTZXJ2aWNlKSB7fVxuXG4gIG9wZW5EaWFsb2coXG4gICAgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBjb250ZW50OiBOZ0NvbnRlbnQ8YW55PixcbiAgICBvcHRpb25zPzogRGlhbG9nT3B0aW9uc1xuICApIHtcbiAgICBjb25zdCBjID0gdGhpcy5vdmVybGF5LmNyZWF0ZU92ZXJsYXk8Rml2RGlhbG9nPihcbiAgICAgIHZpZXdDb250YWluZXJSZWYsXG4gICAgICBGaXZEaWFsb2csXG4gICAgICBjb250ZW50XG4gICAgKTtcbiAgICBjLmluc3RhbmNlLnZlcnRpY2FsQWxpZ24gPSBvcHRpb25zID8gb3B0aW9ucy52ZXJ0aWNhbEFsaWduIDogJ3RvcCc7XG4gICAgYy5pbnN0YW5jZS52ZXJ0aWNhbEFsaWduID0gb3B0aW9ucyA/IG9wdGlvbnMudmVydGljYWxBbGlnbiA6ICdjZW50ZXInO1xuICAgIGMuaW5zdGFuY2UuYmFja2Ryb3AgPSBvcHRpb25zID8gb3B0aW9ucy5iYWNrZHJvcCA6IHRydWU7XG4gICAgYy5pbnN0YW5jZS5kdXJhdGlvbiA9IG9wdGlvbnMgPyBvcHRpb25zLmR1cmF0aW9uIDogMDtcbiAgICBjLmluc3RhbmNlLnNoYXBlID0gb3B0aW9ucyA/IG9wdGlvbnMuc2hhcGUgOiAnY2FyZCc7XG4gICAgYy5pbnN0YW5jZS5vcGVuKCk7XG5cbiAgICByZXR1cm4gYztcbiAgfVxufVxuIl19