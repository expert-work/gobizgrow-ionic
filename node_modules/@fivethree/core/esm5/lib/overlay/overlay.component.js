/**
 * @fileoverview added by tsickle
 * Generated from: lib/overlay/overlay.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, TemplateRef, Input, Output, EventEmitter, ViewContainerRef } from '@angular/core';
import { FivOverlayContent } from './overlay-content/overlay-content.component';
import { FivOverlayService } from './overlay.service';
var FivOverlay = /** @class */ (function () {
    function FivOverlay(viewContainer, overlay) {
        this.viewContainer = viewContainer;
        this.overlay = overlay;
        this.afterInit = new EventEmitter();
        this._open = false;
    }
    /**
     * @param {?=} priority
     * @param {?=} data
     * @return {?}
     */
    FivOverlay.prototype.show = /**
     * @param {?=} priority
     * @param {?=} data
     * @return {?}
     */
    function (priority, data) {
        var _this = this;
        if (!this.componentRef) {
            this.componentRef = this.overlay.createOverlay(this.viewContainer, FivOverlayContent, this.ngContent);
            this._open = true;
            this.componentRef.instance.priority = priority;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.afterInit.emit(data);
            }), 0);
            return this.componentRef.instance;
        }
    };
    /**
     * @return {?}
     */
    FivOverlay.prototype.hide = /**
     * @return {?}
     */
    function () {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.componentRef = null;
            this._open = false;
        }
    };
    Object.defineProperty(FivOverlay.prototype, "open", {
        get: /**
         * @return {?}
         */
        function () {
            return this._open;
        },
        enumerable: true,
        configurable: true
    });
    FivOverlay.decorators = [
        { type: Component, args: [{
                    selector: 'fiv-overlay',
                    template: "<ng-template #content>\n  <ng-content></ng-content>\n</ng-template>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    FivOverlay.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: FivOverlayService }
    ]; };
    FivOverlay.propDecorators = {
        ngContent: [{ type: ViewChild, args: ['content', { static: true },] }],
        priority: [{ type: Input }],
        afterInit: [{ type: Output }]
    };
    return FivOverlay;
}());
export { FivOverlay };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FivOverlay.prototype.componentRef;
    /** @type {?} */
    FivOverlay.prototype.ngContent;
    /** @type {?} */
    FivOverlay.prototype.priority;
    /** @type {?} */
    FivOverlay.prototype.afterInit;
    /**
     * @type {?}
     * @private
     */
    FivOverlay.prototype._open;
    /**
     * @type {?}
     * @private
     */
    FivOverlay.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    FivOverlay.prototype.overlay;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZml2ZXRocmVlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvb3ZlcmxheS9vdmVybGF5LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsU0FBUyxFQUVULFdBQVcsRUFDWCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixnQkFBZ0IsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDaEYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFdEQ7SUFhRSxvQkFDVSxhQUErQixFQUMvQixPQUEwQjtRQUQxQixrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFDL0IsWUFBTyxHQUFQLE9BQU8sQ0FBbUI7UUFMMUIsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDakMsVUFBSyxHQUFHLEtBQUssQ0FBQztJQUtuQixDQUFDOzs7Ozs7SUFFSix5QkFBSTs7Ozs7SUFBSixVQUFLLFFBQWlCLEVBQUUsSUFBVTtRQUFsQyxpQkFlQztRQWRDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQzVDLElBQUksQ0FBQyxhQUFhLEVBQ2xCLGlCQUFpQixFQUNqQixJQUFJLENBQUMsU0FBUyxDQUNmLENBQUM7WUFDRixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztZQUNsQixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1lBQy9DLFVBQVU7OztZQUFDO2dCQUNULEtBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzVCLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQztZQUVOLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7U0FDbkM7SUFDSCxDQUFDOzs7O0lBRUQseUJBQUk7OztJQUFKO1FBQ0UsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDNUIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7WUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRUQsc0JBQUksNEJBQUk7Ozs7UUFBUjtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNwQixDQUFDOzs7T0FBQTs7Z0JBN0NGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtvQkFDdkIsK0VBQXVDOztpQkFFeEM7Ozs7Z0JBVEMsZ0JBQWdCO2dCQUdULGlCQUFpQjs7OzRCQVV2QixTQUFTLFNBQUMsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTsyQkFDckMsS0FBSzs0QkFDTCxNQUFNOztJQW9DVCxpQkFBQztDQUFBLEFBOUNELElBOENDO1NBekNZLFVBQVU7Ozs7OztJQUNyQixrQ0FBc0Q7O0lBRXRELCtCQUFvRTs7SUFDcEUsOEJBQWtCOztJQUNsQiwrQkFBeUM7Ozs7O0lBQ3pDLDJCQUFzQjs7Ozs7SUFHcEIsbUNBQXVDOzs7OztJQUN2Qyw2QkFBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIFZpZXdDaGlsZCxcbiAgQ29tcG9uZW50UmVmLFxuICBUZW1wbGF0ZVJlZixcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBWaWV3Q29udGFpbmVyUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRml2T3ZlcmxheUNvbnRlbnQgfSBmcm9tICcuL292ZXJsYXktY29udGVudC9vdmVybGF5LWNvbnRlbnQuY29tcG9uZW50JztcbmltcG9ydCB7IEZpdk92ZXJsYXlTZXJ2aWNlIH0gZnJvbSAnLi9vdmVybGF5LnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmaXYtb3ZlcmxheScsXG4gIHRlbXBsYXRlVXJsOiAnLi9vdmVybGF5LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vb3ZlcmxheS5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIEZpdk92ZXJsYXkge1xuICBwcml2YXRlIGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPEZpdk92ZXJsYXlDb250ZW50PjtcblxuICBAVmlld0NoaWxkKCdjb250ZW50JywgeyBzdGF0aWM6IHRydWUgfSkgbmdDb250ZW50OiBUZW1wbGF0ZVJlZjxhbnk+O1xuICBASW5wdXQoKSBwcmlvcml0eTtcbiAgQE91dHB1dCgpIGFmdGVySW5pdCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgcHJpdmF0ZSBfb3BlbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIG92ZXJsYXk6IEZpdk92ZXJsYXlTZXJ2aWNlXG4gICkge31cblxuICBzaG93KHByaW9yaXR5PzogbnVtYmVyLCBkYXRhPzogYW55KSB7XG4gICAgaWYgKCF0aGlzLmNvbXBvbmVudFJlZikge1xuICAgICAgdGhpcy5jb21wb25lbnRSZWYgPSB0aGlzLm92ZXJsYXkuY3JlYXRlT3ZlcmxheShcbiAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLFxuICAgICAgICBGaXZPdmVybGF5Q29udGVudCxcbiAgICAgICAgdGhpcy5uZ0NvbnRlbnRcbiAgICAgICk7XG4gICAgICB0aGlzLl9vcGVuID0gdHJ1ZTtcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLnByaW9yaXR5ID0gcHJpb3JpdHk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5hZnRlckluaXQuZW1pdChkYXRhKTtcbiAgICAgIH0sIDApO1xuXG4gICAgICByZXR1cm4gdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2U7XG4gICAgfVxuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBpZiAodGhpcy5jb21wb25lbnRSZWYpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmID0gbnVsbDtcbiAgICAgIHRoaXMuX29wZW4gPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBnZXQgb3BlbigpIHtcbiAgICByZXR1cm4gdGhpcy5fb3BlbjtcbiAgfVxufVxuIl19