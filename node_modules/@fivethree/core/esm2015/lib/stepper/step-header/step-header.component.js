/**
 * @fileoverview added by tsickle
 * Generated from: lib/stepper/step-header/step-header.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { trigger, transition, animate, state, style } from '@angular/animations';
export class FivStepHeader {
    constructor() {
        this.iconCompleted = 'checkmark';
        this.iconState = 'normal';
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} event
     * @param {?} icon
     * @return {?}
     */
    changeIconAndReveal(event, icon) {
        if (event.fromState === 'normal') {
            this.tempIcon = this.icon;
            this.icon = icon;
            this.iconState = 'normal';
        }
    }
    /**
     * @return {?}
     */
    complete() {
        this.iconState = 'rotate';
    }
    /**
     * @return {?}
     */
    reset() {
        this.icon = this.tempIcon;
    }
}
FivStepHeader.decorators = [
    { type: Component, args: [{
                selector: 'fiv-step-header',
                template: "<div class=\"number-container\">\n  <span *ngIf=\"index && !icon\" [@rotateAnim]=\"iconState\"\n    (@rotateAnim.done)=\"changeIconAndReveal($event,iconCompleted)\">{{index}}</span>\n  <ion-icon *ngIf=\"icon\" [@rotateAnim]=\"iconState\" (@rotateAnim.done)=\"changeIconAndReveal($event,iconCompleted)\"\n    [name]=\"icon\"></ion-icon>\n</div>\n<div class=\"step-content\">\n  <ng-content>\n  </ng-content>\n</div>",
                animations: [
                    trigger('rotateAnim', [
                        transition('normal => rotate', [animate('125ms ease-out')]),
                        transition('rotate => normal', [animate('125ms ease-in')]),
                        state('rotate', style({
                            opacity: '0',
                            transform: 'translate(-50%, -50%) rotateZ(45deg)'
                        })),
                        state('normal', style({
                            opacity: '1',
                            transform: 'translate(-50%, -50%) rotateZ(0deg)'
                        }))
                    ])
                ],
                styles: [":host{display:block;width:100%;height:72px;align-items:center;position:relative;padding-top:8px}.number-container{width:24px;height:24px;border-radius:100%;position:absolute;left:16px;background:var(--fiv-color-circle,var(--ion-color-primary));color:var(--fiv-color-circle-color,var(--ion-color-light))}.number-container *{position:absolute;left:50%;top:50%;transform:translate(-50%,-50%) rotateZ(0)}.step-content{padding-left:56px}"]
            }] }
];
/** @nocollapse */
FivStepHeader.ctorParameters = () => [];
FivStepHeader.propDecorators = {
    index: [{ type: Input }],
    icon: [{ type: Input }],
    iconCompleted: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FivStepHeader.prototype.index;
    /** @type {?} */
    FivStepHeader.prototype.icon;
    /** @type {?} */
    FivStepHeader.prototype.iconCompleted;
    /** @type {?} */
    FivStepHeader.prototype.iconState;
    /** @type {?} */
    FivStepHeader.prototype.tempIcon;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcC1oZWFkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpdmV0aHJlZS9jb3JlLyIsInNvdXJjZXMiOlsibGliL3N0ZXBwZXIvc3RlcC1oZWFkZXIvc3RlcC1oZWFkZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUNMLE9BQU8sRUFDUCxVQUFVLEVBQ1YsT0FBTyxFQUNQLEtBQUssRUFDTCxLQUFLLEVBQ04sTUFBTSxxQkFBcUIsQ0FBQztBQTJCN0IsTUFBTSxPQUFPLGFBQWE7SUFReEI7UUFMUyxrQkFBYSxHQUFHLFdBQVcsQ0FBQztRQUVyQyxjQUFTLEdBQUcsUUFBUSxDQUFDO0lBR04sQ0FBQzs7OztJQUVoQixRQUFRLEtBQUksQ0FBQzs7Ozs7O0lBRWIsbUJBQW1CLENBQUMsS0FBSyxFQUFFLElBQVk7UUFDckMsSUFBSSxLQUFLLENBQUMsU0FBUyxLQUFLLFFBQVEsRUFBRTtZQUNoQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDMUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFDakIsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7U0FDM0I7SUFDSCxDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQzVCLENBQUM7OztZQW5ERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0IsMGFBQTJDO2dCQUUzQyxVQUFVLEVBQUU7b0JBQ1YsT0FBTyxDQUFDLFlBQVksRUFBRTt3QkFDcEIsVUFBVSxDQUFDLGtCQUFrQixFQUFFLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQzt3QkFDM0QsVUFBVSxDQUFDLGtCQUFrQixFQUFFLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7d0JBQzFELEtBQUssQ0FDSCxRQUFRLEVBQ1IsS0FBSyxDQUFDOzRCQUNKLE9BQU8sRUFBRSxHQUFHOzRCQUNaLFNBQVMsRUFBRSxzQ0FBc0M7eUJBQ2xELENBQUMsQ0FDSDt3QkFDRCxLQUFLLENBQ0gsUUFBUSxFQUNSLEtBQUssQ0FBQzs0QkFDSixPQUFPLEVBQUUsR0FBRzs0QkFDWixTQUFTLEVBQUUscUNBQXFDO3lCQUNqRCxDQUFDLENBQ0g7cUJBQ0YsQ0FBQztpQkFDSDs7YUFDRjs7Ozs7b0JBRUUsS0FBSzttQkFDTCxLQUFLOzRCQUNMLEtBQUs7Ozs7SUFGTiw4QkFBdUI7O0lBQ3ZCLDZCQUFzQjs7SUFDdEIsc0NBQXFDOztJQUVyQyxrQ0FBcUI7O0lBQ3JCLGlDQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgdHJpZ2dlcixcbiAgdHJhbnNpdGlvbixcbiAgYW5pbWF0ZSxcbiAgc3RhdGUsXG4gIHN0eWxlXG59IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmaXYtc3RlcC1oZWFkZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vc3RlcC1oZWFkZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9zdGVwLWhlYWRlci5jb21wb25lbnQuc2NzcyddLFxuICBhbmltYXRpb25zOiBbXG4gICAgdHJpZ2dlcigncm90YXRlQW5pbScsIFtcbiAgICAgIHRyYW5zaXRpb24oJ25vcm1hbCA9PiByb3RhdGUnLCBbYW5pbWF0ZSgnMTI1bXMgZWFzZS1vdXQnKV0pLFxuICAgICAgdHJhbnNpdGlvbigncm90YXRlID0+IG5vcm1hbCcsIFthbmltYXRlKCcxMjVtcyBlYXNlLWluJyldKSxcbiAgICAgIHN0YXRlKFxuICAgICAgICAncm90YXRlJyxcbiAgICAgICAgc3R5bGUoe1xuICAgICAgICAgIG9wYWNpdHk6ICcwJyxcbiAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTUwJSwgLTUwJSkgcm90YXRlWig0NWRlZyknXG4gICAgICAgIH0pXG4gICAgICApLFxuICAgICAgc3RhdGUoXG4gICAgICAgICdub3JtYWwnLFxuICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgb3BhY2l0eTogJzEnLFxuICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNTAlLCAtNTAlKSByb3RhdGVaKDBkZWcpJ1xuICAgICAgICB9KVxuICAgICAgKVxuICAgIF0pXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgRml2U3RlcEhlYWRlciBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGluZGV4OiBudW1iZXI7XG4gIEBJbnB1dCgpIGljb246IHN0cmluZztcbiAgQElucHV0KCkgaWNvbkNvbXBsZXRlZCA9ICdjaGVja21hcmsnO1xuXG4gIGljb25TdGF0ZSA9ICdub3JtYWwnO1xuICB0ZW1wSWNvbjogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBuZ09uSW5pdCgpIHt9XG5cbiAgY2hhbmdlSWNvbkFuZFJldmVhbChldmVudCwgaWNvbjogc3RyaW5nKSB7XG4gICAgaWYgKGV2ZW50LmZyb21TdGF0ZSA9PT0gJ25vcm1hbCcpIHtcbiAgICAgIHRoaXMudGVtcEljb24gPSB0aGlzLmljb247XG4gICAgICB0aGlzLmljb24gPSBpY29uO1xuICAgICAgdGhpcy5pY29uU3RhdGUgPSAnbm9ybWFsJztcbiAgICB9XG4gIH1cblxuICBjb21wbGV0ZSgpIHtcbiAgICB0aGlzLmljb25TdGF0ZSA9ICdyb3RhdGUnO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5pY29uID0gdGhpcy50ZW1wSWNvbjtcbiAgfVxufVxuIl19