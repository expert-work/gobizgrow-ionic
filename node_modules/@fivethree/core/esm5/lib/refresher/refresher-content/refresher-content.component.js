/**
 * @fileoverview added by tsickle
 * Generated from: lib/refresher/refresher-content/refresher-content.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, Output, EventEmitter, Renderer2 } from '@angular/core';
import { animate, style, AnimationBuilder } from '@angular/animations';
import { FivSpinner } from '../../spinner/spinner.component';
var FivRefresherContent = /** @class */ (function () {
    function FivRefresherContent(element, renderer, builder) {
        this.element = element;
        this.renderer = renderer;
        this.builder = builder;
        this._progress = 0;
        this.fivComplete = new EventEmitter();
        this.fivRefresh = new EventEmitter();
        this.fivHidden = new EventEmitter();
        this.fivShowed = new EventEmitter();
        this.fivProgress = new EventEmitter();
        this.visible = false;
    }
    Object.defineProperty(FivRefresherContent.prototype, "progress", {
        get: /**
         * @return {?}
         */
        function () {
            return this._progress;
        },
        set: /**
         * @param {?} progress
         * @return {?}
         */
        function (progress) {
            this._progress = progress;
            if (progress < 1) {
                this.renderer.setStyle(this.spinnerRef.nativeElement, 'transform', "rotateZ(" + 360 * progress + "deg)");
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FivRefresherContent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    FivRefresherContent.prototype.load = /**
     * @return {?}
     */
    function () {
        this.visible = true;
        this.spinner.spin();
        this.fivRefresh.emit(this);
    };
    /**
     * @return {?}
     */
    FivRefresherContent.prototype.unload = /**
     * @return {?}
     */
    function () {
        this.spinner.stop();
    };
    /**
     * @return {?}
     */
    FivRefresherContent.prototype.show = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.visible) {
            this.visible = true;
            /** @type {?} */
            var animation = this.builder.build([
                style({ transform: 'scale(0)' }),
                animate('0ms ease-out', style({ transform: 'scale(1)' }))
            ]);
            /** @type {?} */
            var player_1 = animation.create(this.background.nativeElement);
            player_1.play();
            player_1.onDone((/**
             * @return {?}
             */
            function () {
                _this.fivShowed.emit(_this);
                player_1.destroy();
            }));
        }
    };
    /**
     * @return {?}
     */
    FivRefresherContent.prototype.hide = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.visible) {
            /** @type {?} */
            var transform = "scale(1)";
            /** @type {?} */
            var animation = this.builder.build([
                style({ transform: transform }),
                animate('175ms ease-in', style({ transform: "scale(0)" }))
            ]);
            /** @type {?} */
            var player_2 = animation.create(this.background.nativeElement);
            player_2.play();
            player_2.onDone((/**
             * @return {?}
             */
            function () {
                _this.fivHidden.emit(_this);
                _this.visible = false;
                player_2.destroy();
            }));
        }
    };
    /**
     * @return {?}
     */
    FivRefresherContent.prototype.complete = /**
     * @return {?}
     */
    function () {
        this.unload();
        this.fivComplete.emit(this);
    };
    /**
     * @param {?} progress
     * @return {?}
     */
    FivRefresherContent.prototype.setValue = /**
     * @param {?} progress
     * @return {?}
     */
    function (progress) {
        this.spinner.setValue(progress);
    };
    /**
     * @return {?}
     */
    FivRefresherContent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.spinner.setMode('indeterminate');
    };
    FivRefresherContent.decorators = [
        { type: Component, args: [{
                    selector: 'fiv-refresher-content',
                    template: "<div #background class=\"spinner-background\" [ngClass]=\"{'hidden': progress === 0}\">\n    <fiv-spinner #spinner (fivProgress)=\"fivProgress.emit($event)\" (fivComplete)=\"complete()\" [circleRadius]=\"8\"\n        [diameter]=\"20\" [strokeWidth]=\"2\"></fiv-spinner>\n</div>",
                    styles: [":host{--fiv-spinner-size:40px;position:absolute;width:var(--fiv-spinner-size);height:var(--fiv-spinner-size);top:calc(-1 * var(--fiv-spinner-size));left:calc(50% - var(--fiv-spinner-size)/ 2);z-index:9}.spinner-background:not(.hidden){box-shadow:0 4px 6px 0 rgba(0,0,0,.14),0 4px 5px rgba(0,0,0,.1)}.spinner-background{position:absolute;width:40px;height:40px;background:var(--fiv-spin-background);border-radius:50%}.spinner-background fiv-spinner{position:absolute;top:10px;left:10px}"]
                }] }
    ];
    /** @nocollapse */
    FivRefresherContent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: AnimationBuilder }
    ]; };
    FivRefresherContent.propDecorators = {
        progress: [{ type: Input }],
        fivComplete: [{ type: Output }],
        fivRefresh: [{ type: Output }],
        fivHidden: [{ type: Output }],
        fivShowed: [{ type: Output }],
        fivProgress: [{ type: Output }],
        spinner: [{ type: ViewChild, args: ['spinner', { static: false },] }],
        spinnerRef: [{ type: ViewChild, args: ['spinner', { static: true, read: ElementRef },] }],
        background: [{ type: ViewChild, args: ['background', { static: false },] }]
    };
    return FivRefresherContent;
}());
export { FivRefresherContent };
if (false) {
    /** @type {?} */
    FivRefresherContent.prototype._progress;
    /** @type {?} */
    FivRefresherContent.prototype.fivComplete;
    /** @type {?} */
    FivRefresherContent.prototype.fivRefresh;
    /** @type {?} */
    FivRefresherContent.prototype.fivHidden;
    /** @type {?} */
    FivRefresherContent.prototype.fivShowed;
    /** @type {?} */
    FivRefresherContent.prototype.fivProgress;
    /** @type {?} */
    FivRefresherContent.prototype.spinner;
    /** @type {?} */
    FivRefresherContent.prototype.spinnerRef;
    /** @type {?} */
    FivRefresherContent.prototype.background;
    /** @type {?} */
    FivRefresherContent.prototype.visible;
    /** @type {?} */
    FivRefresherContent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    FivRefresherContent.prototype.renderer;
    /** @type {?} */
    FivRefresherContent.prototype.builder;
}
//# sourceMappingURL=data:application/json;base64,