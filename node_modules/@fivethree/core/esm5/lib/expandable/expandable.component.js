/**
 * @fileoverview added by tsickle
 * Generated from: lib/expandable/expandable.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter, Input, ChangeDetectorRef } from '@angular/core';
import { trigger, state, style, transition, animate, keyframes } from '@angular/animations';
var FivExpandable = /** @class */ (function () {
    function FivExpandable(change) {
        this.change = change;
        this.isOpen = false;
        this.fivWillOpen = new EventEmitter();
        this.fivDidOpen = new EventEmitter();
        this.fivWillClose = new EventEmitter();
        this.fivDidClose = new EventEmitter();
    }
    /**
     * @return {?}
     */
    FivExpandable.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    FivExpandable.prototype.open = /**
     * @return {?}
     */
    function () {
        this.fivWillOpen.emit(this);
        this.isOpen = true;
        this.change.detectChanges();
    };
    /**
     * @return {?}
     */
    FivExpandable.prototype.toggle = /**
     * @return {?}
     */
    function () {
        if (this.isOpen === false) {
            this.open();
        }
        else {
            this.close();
        }
    };
    /**
     * @param {?=} param
     * @return {?}
     */
    FivExpandable.prototype.close = /**
     * @param {?=} param
     * @return {?}
     */
    function (param) {
        this.param = param;
        this.fivWillClose.emit(this);
        this.isOpen = false;
        this.change.detectChanges();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FivExpandable.prototype.onAnimationEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.fromState === 'closed') {
            this.fivDidOpen.emit(this);
        }
        else if (event.fromState === 'open') {
            this.fivDidClose.emit({ expandable: this, param: this.param });
            this.param = null;
        }
    };
    FivExpandable.decorators = [
        { type: Component, args: [{
                    selector: 'fiv-expandable',
                    template: "<div>\n  <ng-content select=\"[header]\"></ng-content>\n  <div [@listAnim]=\"{value: isOpen ? 'open' : 'closed', params: timingFunction ? {time: timingFunction} : {}}\" (@listAnim.done)=\"onAnimationEnd($event)\"\n    style=\"overflow: hidden\">\n    <ng-content select=\"[content]\"></ng-content>\n  </div>\n</div>",
                    animations: [
                        trigger('listAnim', [
                            state('open', style({ height: '*', opacity: 1 })),
                            state('closed', style({ height: '0', opacity: 0 })),
                            transition('closed => open', [
                                animate('{{time}}', keyframes([
                                    style({ height: '0', opacity: 0, offset: 0 }),
                                    style({ height: '*', opacity: 0.1, offset: 0.8 }),
                                    style({ height: '*', opacity: 1, offset: 1 })
                                ]))
                            ], { params: { time: '270ms ease-out' } }),
                            transition('open => closed', [
                                animate('{{time}}', keyframes([
                                    style({ height: '*', opacity: 1, offset: 0 }),
                                    style({ height: '*', opacity: 0.1, offset: 0.2 }),
                                    style({ height: '0', opacity: 0, offset: 1 })
                                ]))
                            ], { params: { time: '220ms ease-out' } })
                        ])
                    ],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    FivExpandable.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    FivExpandable.propDecorators = {
        isOpen: [{ type: Input }],
        timingFunction: [{ type: Input }],
        fivWillOpen: [{ type: Output }],
        fivDidOpen: [{ type: Output }],
        fivWillClose: [{ type: Output }],
        fivDidClose: [{ type: Output }]
    };
    return FivExpandable;
}());
export { FivExpandable };
if (false) {
    /** @type {?} */
    FivExpandable.prototype.isOpen;
    /** @type {?} */
    FivExpandable.prototype.timingFunction;
    /** @type {?} */
    FivExpandable.prototype.fivWillOpen;
    /** @type {?} */
    FivExpandable.prototype.fivDidOpen;
    /** @type {?} */
    FivExpandable.prototype.fivWillClose;
    /** @type {?} */
    FivExpandable.prototype.fivDidClose;
    /** @type {?} */
    FivExpandable.prototype.param;
    /**
     * @type {?}
     * @private
     */
    FivExpandable.prototype.change;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kYWJsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZml2ZXRocmVlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZXhwYW5kYWJsZS9leHBhbmRhYmxlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsTUFBTSxFQUNOLFlBQVksRUFDWixLQUFLLEVBQ0wsaUJBQWlCLEVBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFDTCxPQUFPLEVBQ1AsS0FBSyxFQUNMLEtBQUssRUFDTCxVQUFVLEVBQ1YsT0FBTyxFQUNQLFNBQVMsRUFDVixNQUFNLHFCQUFxQixDQUFDO0FBRTdCO0lBb0RFLHVCQUFvQixNQUF5QjtRQUF6QixXQUFNLEdBQU4sTUFBTSxDQUFtQjtRQVpwQyxXQUFNLEdBQUcsS0FBSyxDQUFDO1FBRWQsZ0JBQVcsR0FBZ0MsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM5RCxlQUFVLEdBQWdDLElBQUksWUFBWSxFQUFFLENBQUM7UUFDN0QsaUJBQVksR0FBZ0MsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUMvRCxnQkFBVyxHQUdoQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBSXdCLENBQUM7Ozs7SUFFakQsZ0NBQVE7OztJQUFSLGNBQVksQ0FBQzs7OztJQUViLDRCQUFJOzs7SUFBSjtRQUNFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDOUIsQ0FBQzs7OztJQUVELDhCQUFNOzs7SUFBTjtRQUNFLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUU7WUFDekIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ2I7YUFBTTtZQUNMLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FB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eEIsK0JBQXdCOztJQUN4Qix1Q0FBZ0M7O0lBQ2hDLG9DQUF3RTs7SUFDeEUsbUNBQXVFOztJQUN2RSxxQ0FBeUU7O0lBQ3pFLG9DQUd3Qjs7SUFFeEIsOEJBQVc7Ozs7O0lBRUMsK0JBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICB0cmlnZ2VyLFxuICBzdGF0ZSxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb24sXG4gIGFuaW1hdGUsXG4gIGtleWZyYW1lc1xufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZml2LWV4cGFuZGFibGUnLFxuICB0ZW1wbGF0ZVVybDogJy4vZXhwYW5kYWJsZS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2V4cGFuZGFibGUuY29tcG9uZW50LnNjc3MnXSxcbiAgYW5pbWF0aW9uczogW1xuICAgIHRyaWdnZXIoJ2xpc3RBbmltJywgW1xuICAgICAgc3RhdGUoJ29wZW4nLCBzdHlsZSh7IGhlaWdodDogJyonLCBvcGFjaXR5OiAxIH0pKSxcbiAgICAgIHN0YXRlKCdjbG9zZWQnLCBzdHlsZSh7IGhlaWdodDogJzAnLCBvcGFjaXR5OiAwIH0pKSxcbiAgICAgIHRyYW5zaXRpb24oXG4gICAgICAgICdjbG9zZWQgPT4gb3BlbicsXG4gICAgICAgIFtcbiAgICAgICAgICBhbmltYXRlKFxuICAgICAgICAgICAgJ3t7dGltZX19JyxcbiAgICAgICAgICAgIGtleWZyYW1lcyhbXG4gICAgICAgICAgICAgIHN0eWxlKHsgaGVpZ2h0OiAnMCcsIG9wYWNpdHk6IDAsIG9mZnNldDogMCB9KSxcbiAgICAgICAgICAgICAgc3R5bGUoeyBoZWlnaHQ6ICcqJywgb3BhY2l0eTogMC4xLCBvZmZzZXQ6IDAuOCB9KSxcbiAgICAgICAgICAgICAgc3R5bGUoeyBoZWlnaHQ6ICcqJywgb3BhY2l0eTogMSwgb2Zmc2V0OiAxIH0pXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIClcbiAgICAgICAgXSxcbiAgICAgICAgeyBwYXJhbXM6IHsgdGltZTogJzI3MG1zIGVhc2Utb3V0JyB9IH1cbiAgICAgICksXG4gICAgICB0cmFuc2l0aW9uKFxuICAgICAgICAnb3BlbiA9PiBjbG9zZWQnLFxuICAgICAgICBbXG4gICAgICAgICAgYW5pbWF0ZShcbiAgICAgICAgICAgICd7e3RpbWV9fScsXG4gICAgICAgICAgICBrZXlmcmFtZXMoW1xuICAgICAgICAgICAgICBzdHlsZSh7IGhlaWdodDogJyonLCBvcGFjaXR5OiAxLCBvZmZzZXQ6IDAgfSksXG4gICAgICAgICAgICAgIHN0eWxlKHsgaGVpZ2h0OiAnKicsIG9wYWNpdHk6IDAuMSwgb2Zmc2V0OiAwLjIgfSksXG4gICAgICAgICAgICAgIHN0eWxlKHsgaGVpZ2h0OiAnMCcsIG9wYWNpdHk6IDAsIG9mZnNldDogMSB9KVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICApXG4gICAgICAgIF0sXG4gICAgICAgIHsgcGFyYW1zOiB7IHRpbWU6ICcyMjBtcyBlYXNlLW91dCcgfSB9XG4gICAgICApXG4gICAgXSlcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBGaXZFeHBhbmRhYmxlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgaXNPcGVuID0gZmFsc2U7XG4gIEBJbnB1dCgpIHRpbWluZ0Z1bmN0aW9uOiBzdHJpbmc7XG4gIEBPdXRwdXQoKSBmaXZXaWxsT3BlbjogRXZlbnRFbWl0dGVyPEZpdkV4cGFuZGFibGU+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgZml2RGlkT3BlbjogRXZlbnRFbWl0dGVyPEZpdkV4cGFuZGFibGU+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgZml2V2lsbENsb3NlOiBFdmVudEVtaXR0ZXI8Rml2RXhwYW5kYWJsZT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBmaXZEaWRDbG9zZTogRXZlbnRFbWl0dGVyPHtcbiAgICBleHBhbmRhYmxlOiBGaXZFeHBhbmRhYmxlO1xuICAgIHBhcmFtOiBhbnk7XG4gIH0+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIHBhcmFtOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjaGFuZ2U6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIG5nT25Jbml0KCkge31cblxuICBvcGVuKCkge1xuICAgIHRoaXMuZml2V2lsbE9wZW4uZW1pdCh0aGlzKTtcbiAgICB0aGlzLmlzT3BlbiA9IHRydWU7XG4gICAgdGhpcy5jaGFuZ2UuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgdG9nZ2xlKCkge1xuICAgIGlmICh0aGlzLmlzT3BlbiA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMub3BlbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgY2xvc2UocGFyYW0/OiBhbnkpIHtcbiAgICB0aGlzLnBhcmFtID0gcGFyYW07XG4gICAgdGhpcy5maXZXaWxsQ2xvc2UuZW1pdCh0aGlzKTtcblxuICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XG4gICAgdGhpcy5jaGFuZ2UuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgb25BbmltYXRpb25FbmQoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuZnJvbVN0YXRlID09PSAnY2xvc2VkJykge1xuICAgICAgdGhpcy5maXZEaWRPcGVuLmVtaXQodGhpcyk7XG4gICAgfSBlbHNlIGlmIChldmVudC5mcm9tU3RhdGUgPT09ICdvcGVuJykge1xuICAgICAgdGhpcy5maXZEaWRDbG9zZS5lbWl0KHsgZXhwYW5kYWJsZTogdGhpcywgcGFyYW06IHRoaXMucGFyYW0gfSk7XG4gICAgICB0aGlzLnBhcmFtID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==