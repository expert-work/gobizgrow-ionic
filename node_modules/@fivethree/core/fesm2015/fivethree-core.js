import { EventEmitter, Component, ChangeDetectionStrategy, Input, HostBinding, Output, NgModule, Directive, ContentChild, Host, ElementRef, Injectable, ɵɵdefineInjectable, ViewChild, ViewEncapsulation, Optional, Inject, ChangeDetectorRef, Renderer2, ɵɵinject, HostListener, TemplateRef, ComponentFactoryResolver, RendererFactory2, ApplicationRef, Injector, INJECTOR, ViewContainerRef, forwardRef, ViewChildren, ContentChildren, Self } from '@angular/core';
import { trigger, transition, animate, state, style, AnimationBuilder, keyframes, animation, useAnimation } from '@angular/animations';
import { CommonModule, DOCUMENT } from '@angular/common';
import { IonicModule, IonTabs, Platform, IonContent, IonLabel, NavController, DomController, IonMenu, IonSplitPane, IonIcon } from '@ionic/angular';
import { Router, NavigationEnd, NavigationStart } from '@angular/router';
import { BehaviorSubject, timer, interval, Subject, fromEvent, merge, from, zip, of } from 'rxjs';
import { DomSanitizer } from '@angular/platform-browser';
import { takeUntil, map, pairwise, distinctUntilChanged, repeat, filter, tap, take, flatMap, first, repeatWhen, withLatestFrom, skipWhile, takeLast, mergeMap, throttleTime } from 'rxjs/operators';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { getPosition, tween, easeOutSine, fromToPixels, setPosition, fromTo, reverse, transform, scale, fadeIn, beforeStyle, fadeOut, easeInSine, after, AnimationsModule } from '@fivethree/ngx-rxjs-animations';
import { __awaiter } from 'tslib';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/icon/icon.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivIcon {
    constructor() {
        this._badge = 0;
        this.state = 'normal';
        this.off = false;
        this.animationDisabled = false;
        this.transitionDone = new EventEmitter();
        this.indicatorState = 'scale';
        this.badgeState = 'scale';
    }
    /**
     * @return {?}
     */
    get name() {
        return this._name;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    set name(name) {
        if (this._name) {
            this.transform(name);
        }
        else {
            this._name = name;
        }
    }
    /**
     * @return {?}
     */
    get badge() {
        return this._badge;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set badge(value) {
        this.transformIndicator(value);
    }
    /**
     * @param {?} dot
     * @return {?}
     */
    set dot(dot) {
        this._dot = dot;
        if (dot) {
            this.indicatorState = 'normal';
        }
    }
    /**
     * @return {?}
     */
    get dot() {
        return this._dot;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} name
     * @return {?}
     */
    transform(name) {
        this.temp = name;
        this.state = 'rotate';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    transformIndicator(value) {
        if (this.dot) {
            this._badge = value;
            return;
        }
        if (value === 0) {
            this._badge = value;
            this.badgeState = 'scale';
        }
        else {
            if (this.badgeState === 'scale') {
                this.badgeState = 'normal';
                this._badge = value;
            }
            else {
                this.tempValue = value;
                this.badgeState = 'scale';
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    rotateAnimDone(event) {
        if (event.fromState === 'normal' && event.toState === 'rotate') {
            this._name = this.temp;
            this.state = 'normal';
        }
        if (event.fromState === 'rotate' && event.toState === 'normal') {
            this.transitionDone.emit(this._name);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    incrementDone(event) {
        if (event.fromState === 'normal' && event.toState === 'scale') {
            if (this.tempValue > 0) {
                this.badgeState = 'normal';
                this._badge = this.tempValue;
            }
            else {
                this._badge = this.tempValue;
            }
        }
    }
}
FivIcon.decorators = [
    { type: Component, args: [{
                selector: 'fiv-icon',
                template: "<ion-icon [slot]=\"slot\" class=\"icon\" [@rotateAnim]=\"state\" (@rotateAnim.done)=\"rotateAnimDone($event)\" [name]=\"_name\"\n    [color]=\"color\"></ion-icon>\n<span [@scaleAnim]=\"indicatorState\" *ngIf=\"dot\" class=\"indicator-dot\"></span>\n<span class=\"off-background\" *ngIf=\"off\"></span>\n<span class=\"off\" *ngIf=\"off\"></span>\n<span *ngIf=\"smallIcon && badge == 0 && !dot\" class=\"indicator-small-icon\">\n    <ion-icon [color]=\"color\" slot=\"icon-only\" [name]=\"smallIcon\"></ion-icon>\n</span>\n<span *ngIf=\"badge > 0 && !dot\" [@scaleAnim]=\"badgeState\" (@scaleAnim.done)=\"incrementDone($event)\"\n    class=\"indicator-badge\">\n    <span *ngIf=\"badge <= 9\">{{badge}}</span>\n    <span *ngIf=\"badge > 9\">9+</span>\n</span>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [
                    trigger('rotateAnim', [
                        transition('normal => rotate', [animate('125ms ease-out')]),
                        transition('rotate => normal', [animate('125ms ease-in')]),
                        state('rotate', style({ opacity: '0', transform: 'scale(0) rotateZ(45deg)' })),
                        state('normal', style({ opacity: '1', transform: 'scale(1) rotateZ(0deg)' }))
                    ]),
                    trigger('scaleAnim', [
                        transition('void => normal', [
                            style({ opacity: '0', transform: 'scale(0)' }),
                            animate('125ms ease-out', style({ opacity: '1', transform: 'scale(1)' }))
                        ]),
                        transition('normal => scale', [animate('125ms ease-out')]),
                        transition('scale => normal', [animate('125ms ease-in')]),
                        state('scale', style({ opacity: '0', transform: 'scale(0)' })),
                        state('normal', style({ opacity: '1', transform: 'scale(1)' }))
                    ])
                ],
                styles: [":host{--fiv-padding-end:0;--fiv-padding-start:0;--fiv-position-top:-2px;--fiv-position-right:-6px;--fiv-icon-height:28px;--fiv-icon-width:28px;--fiv-small-icon-height:18px;--fiv-small-icon-width:18px;--fiv-small-icon-font-size:0.8em;--fiv-badge-height:18px;--fiv-badge-width:18px;--fiv-badge-font-size:0.6em;--fiv-dot-height:18px;--fiv-dot-width:18px;position:relative;display:inline-block}.icon{margin:0;font-size:1.8em;color:var(--fiv-icon-color,var(--ion-color-dark));padding-right:var(--fiv-padding-end);padding-left:var(--fiv-padding-start);height:var(--fiv-icon-height);width:var(--fiv-icon-width)}.indicator-badge{position:absolute;top:var(--fiv-position-top);right:var(--fiv-position-right);height:var(--fiv-badge-height);width:var(--fiv-badge-width);background-color:var(--fiv-badge-background-color,var(--ion-color-primary));color:var(--fiv-badge-color,var(--ion-color-light));border-radius:14px;z-index:13}.indicator-badge *{position:absolute;transform:translateX(-50%) translateY(-50%);left:50%;top:50%;font-size:var(--fiv-badge-font-size)}.indicator-dot{position:absolute;top:var(--fiv-position-top);right:var(--fiv-position-right);height:var(--fiv-dot-height);width:var(--fiv-dot-width);background-color:var(--fiv-dot-background-color,var(--ion-color-primary));border-radius:100%;z-index:11}.indicator-small-icon{position:absolute;top:var(--fiv-position-top);right:var(--fiv-position-right);height:var(--fiv-small-icon-height);width:var(--fiv-small-icon-width);background-color:var(--fiv-small-icon-background-color,var(--ion-color-primary));color:var(--fiv-small-icon-color,var(--ion-color-light));border-radius:14px;z-index:13}.indicator-small-icon *{position:absolute;transform:translateX(-50%) translateY(-50%);left:50%;top:50%;font-size:var(--fiv-small-icon-font-size)}.off{width:120%;height:2px;background:var(--fiv-off-color,var(--fiv-icon-color,var(--ion-color-dark)));position:absolute;left:0;transform:rotateZ(45deg) translateY(10px) translateX(6px)}.off-background{width:120%;height:2px;background:#000;position:absolute;background-color:var(--fiv-off-background-color,var(--ion-color-light));left:2px;transform:rotateZ(45deg) translateY(10px) translateX(6px)}"]
            }] }
];
/** @nocollapse */
FivIcon.ctorParameters = () => [];
FivIcon.propDecorators = {
    color: [{ type: Input }],
    slot: [{ type: Input }],
    smallIcon: [{ type: Input }],
    off: [{ type: Input }],
    animationDisabled: [{ type: Input }, { type: HostBinding, args: ['@.disabled',] }],
    transitionDone: [{ type: Output }],
    name: [{ type: Input }],
    badge: [{ type: Input }],
    dot: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FivIcon.prototype._name;
    /** @type {?} */
    FivIcon.prototype._badge;
    /** @type {?} */
    FivIcon.prototype._dot;
    /** @type {?} */
    FivIcon.prototype.tempValue;
    /** @type {?} */
    FivIcon.prototype.state;
    /** @type {?} */
    FivIcon.prototype.temp;
    /** @type {?} */
    FivIcon.prototype.color;
    /** @type {?} */
    FivIcon.prototype.slot;
    /** @type {?} */
    FivIcon.prototype.smallIcon;
    /** @type {?} */
    FivIcon.prototype.off;
    /** @type {?} */
    FivIcon.prototype.animationDisabled;
    /** @type {?} */
    FivIcon.prototype.transitionDone;
    /** @type {?} */
    FivIcon.prototype.indicatorState;
    /** @type {?} */
    FivIcon.prototype.badgeState;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/icon/icon.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivIconModule {
}
FivIconModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivIcon],
                imports: [CommonModule, IonicModule],
                exports: [FivIcon]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/app-bar/app-bar-fab.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivAppBarFabDirective {
}
FivAppBarFabDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fivAppBarFab]',
                exportAs: 'fivAppBarFab'
            },] }
];
FivAppBarFabDirective.propDecorators = {
    fivAppBarFab: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FivAppBarFabDirective.prototype.fivAppBarFab;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/app-bar/app-bar.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivAppBar {
    constructor() {
        this.cutoutVisible = true;
    }
}
FivAppBar.decorators = [
    { type: Component, args: [{
                selector: 'fiv-app-bar',
                template: "<div class=\"appbar\"\n  [ngClass]=\"{'cutout': cutoutVisible, 'left': fivFab.fivAppBarFab === 'left', 'right': fivFab.fivAppBarFab === 'right'}\">\n  <div class=\"appbar-rect left\">\n    <div class=\"tabs\">\n      <ng-content select=\"[left]\"></ng-content>\n    </div>\n  </div>\n  <ng-content select=\"fiv-fab\"></ng-content>\n  <svg  viewBox=\"0 0 100 50\" width=\"100\" height=\"50\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M100 0v50H0V0c.543 27.153 22.72 49 50 49S99.457 27.153 99.99 0h.01z\" fill=\"red\" fill-rule=\"evenodd\"/></svg>\n  <div class=\"rect-filler\"></div>\n  <div class=\"appbar-rect right\">\n    <div class=\"tabs\">\n      <ng-content select=\"[right]\"></ng-content>\n    </div>\n  </div>\n</div>",
                styles: [":host{display:block;position:relative;--fiv-radius:72px;--fiv-appbar-fab-size:56px;--fiv-appbar-height:56px;width:100%;--fiv-border-radius:6px;--fiv-appbar-background-color:var(--ion-color-light);--fiv-side-width:12px;--fiv-fab-icon-color:var(--ion-color-light)}svg{height:calc(var(--fiv-radius)/ 2);width:var(--fiv-radius);left:calc(50% - (var(--fiv-radius)/ 2));position:absolute;bottom:calc(env(safe-area-inset-bottom) + var(--fiv-appbar-height) - var(--fiv-radius)/ 2 - var(--fiv-border-radius))}svg path{fill:var(--fiv-appbar-background-color)}.appbar{width:100%;position:absolute;bottom:0;left:0;height:calc(var(--fiv-appbar-height) + env(safe-area-inset-bottom));background:rgba(0,0,0,0);z-index:5000}.appbar .appbar-rect{overflow:hidden;position:absolute;width:calc(50% - (var(--fiv-radius)/ 2));height:calc(var(--fiv-appbar-height) + env(safe-area-inset-bottom));bottom:0;box-shadow:3px -4px 5px 0 rgba(0,0,0,.1)}.appbar .appbar-rect.left{left:0;background:var(--fiv-appbar-background-color);border-top-right-radius:var(--fiv-border-radius)}.appbar .appbar-rect.right{right:0;background:var(--fiv-appbar-background-color);border-top-left-radius:var(--fiv-border-radius)}.appbar ::ng-deep fiv-fab{position:absolute;left:calc(50% - .5 * var(--fiv-fab-size));top:calc(-.5 * var(--fiv-appbar-fab-size) + var(--fiv-border-radius));display:block;--fiv-fab-size:var(--fiv-appbar-fab-size);z-index:14}.appbar ::ng-deep fiv-fab fiv-icon{--fiv-icon-color:var(--fiv-fab-icon-color)}.appbar .rect-filler{width:var(--fiv-radius);height:calc(env(safe-area-inset-bottom) + var(--fiv-appbar-height) - var(--fiv-radius)/ 2 - var(--fiv-border-radius));position:absolute;overflow:hidden;bottom:0;left:calc(50% - (var(--fiv-radius)/ 2));background:var(--fiv-appbar-background-color)}.appbar:not(.cutout) .appbar-rect.left{border-top-right-radius:0}.appbar:not(.cutout) .appbar-rect.right{border-top-left-radius:0}.appbar.left .appbar-rect.left{width:var(--fiv-side-width)}.appbar.left .appbar-rect.right{width:calc(100% - var(--fiv-radius) - var(--fiv-side-width))}.appbar.left .rect-filler,.appbar.left svg{left:var(--fiv-side-width)}.appbar.left ::ng-deep fiv-fab{transform:translateX(0);left:calc(var(--fiv-side-width) + var(--fiv-radius)/ 2 - var(--fiv-appbar-fab-size)/ 2);position:absolute}.appbar.right .appbar-rect.left{width:calc(100% - var(--fiv-radius) - var(--fiv-side-width))}.appbar.right .appbar-rect.right{width:var(--fiv-side-width)}.appbar.right .rect-filler,.appbar.right svg{left:calc(100% - var(--fiv-radius) - var(--fiv-side-width))}.appbar.right ::ng-deep fiv-fab{transform:translateX(0);left:calc(100% - var(--fiv-side-width) - var(--fiv-radius)/ 2 - var(--fiv-appbar-fab-size)/ 2)}.tabs{display:flex;width:100%;height:100%;position:relative}"]
            }] }
];
/** @nocollapse */
FivAppBar.ctorParameters = () => [];
FivAppBar.propDecorators = {
    titleMode: [{ type: Input }],
    fivFab: [{ type: ContentChild, args: [FivAppBarFabDirective, { static: false },] }]
};
if (false) {
    /** @type {?} */
    FivAppBar.prototype.cutoutVisible;
    /** @type {?} */
    FivAppBar.prototype.titleMode;
    /** @type {?} */
    FivAppBar.prototype.fivFab;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/app-bar/app-bar-tab/app-bar-tab.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivAppBarTab {
    /**
     * @param {?} appBar
     * @param {?} ionTabs
     * @param {?} router
     * @param {?} el
     */
    constructor(appBar, ionTabs, router, el) {
        this.appBar = appBar;
        this.ionTabs = ionTabs;
        this.router = router;
        this.el = el;
        this.type = 'unbounded';
    }
    /**
     * @return {?}
     */
    get active() {
        return this.router.url.endsWith(this.href);
    }
    /**
     * @return {?}
     */
    get classes() {
        return `label-${this.appBar.titleMode}`;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    onClick() {
        this.ionTabs.select(this.tab);
    }
}
FivAppBarTab.decorators = [
    { type: Component, args: [{
                selector: 'fiv-app-bar-tab',
                template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n\n<div (click)=\"onClick()\" class=\"tab ion-activatable\" [ngClass]=\"{'active': active}\">\n  <ng-content select=\"fiv-icon\"></ng-content>\n  <ng-content *ngIf=\"appBar.titleMode === 'show' || (active && appBar.titleMode === 'active-only')\" select=\"ion-label\">\n  </ng-content>\n  <ion-ripple-effect [type]=\"type\"></ion-ripple-effect>\n</div>",
                styles: [":host{width:50%;height:100%;display:inline-block;position:relative}:host .tab{width:100%;height:100%;display:flex;position:relative;flex-direction:column;align-items:center;justify-content:center;overflow:visible}:host .tab.active{--fiv-icon-color:var(--fiv-icon-activ-color, var(--ion-color-primary))}:host .tab.active ::ng-deep ion-label{color:var(--ion-color-primary)}:host(.label-hide) ::ng-deep ion-label{display:none}:host(.label-active-only) .tab:not(.active) ::ng-deep ion-label{display:none}"]
            }] }
];
/** @nocollapse */
FivAppBarTab.ctorParameters = () => [
    { type: FivAppBar, decorators: [{ type: Host }] },
    { type: IonTabs, decorators: [{ type: Host }] },
    { type: Router },
    { type: ElementRef }
];
FivAppBarTab.propDecorators = {
    tab: [{ type: Input }],
    href: [{ type: Input }],
    type: [{ type: Input }],
    classes: [{ type: HostBinding, args: ['class',] }]
};
if (false) {
    /** @type {?} */
    FivAppBarTab.prototype.tab;
    /** @type {?} */
    FivAppBarTab.prototype.href;
    /** @type {?} */
    FivAppBarTab.prototype.type;
    /** @type {?} */
    FivAppBarTab.prototype.appBar;
    /** @type {?} */
    FivAppBarTab.prototype.ionTabs;
    /** @type {?} */
    FivAppBarTab.prototype.router;
    /** @type {?} */
    FivAppBarTab.prototype.el;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/loading-progress-bar/loading.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivLoadingService {
    constructor() {
        this.loading = false;
        this.isComplete = false;
        this.loadChange = new BehaviorSubject(this.loading);
        this.completeChange = new BehaviorSubject(this.isComplete);
    }
    /**
     * @return {?}
     */
    load() {
        this.loading = true;
        this.loadChange.next(this.loading);
    }
    /**
     * @return {?}
     */
    unload() {
        this.loading = false;
        this.loadChange.next(this.loading);
        this.isComplete = false;
    }
    /**
     * @return {?}
     */
    toggleSpinner() {
        this.loading = !this.loading;
    }
    /**
     * @return {?}
     */
    complete() {
        this.isComplete = true;
        this.completeChange.next(this.isComplete);
    }
}
FivLoadingService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FivLoadingService.ctorParameters = () => [];
/** @nocollapse */ FivLoadingService.ngInjectableDef = ɵɵdefineInjectable({ factory: function FivLoadingService_Factory() { return new FivLoadingService(); }, token: FivLoadingService, providedIn: "root" });
if (false) {
    /** @type {?} */
    FivLoadingService.prototype.loading;
    /** @type {?} */
    FivLoadingService.prototype.isComplete;
    /** @type {?} */
    FivLoadingService.prototype.loadChange;
    /** @type {?} */
    FivLoadingService.prototype.completeChange;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/loading-progress-bar/loading-progress-bar.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivLoadingProgressBar {
    /**
     * @param {?} loadingService
     * @param {?} builder
     */
    constructor(loadingService, builder) {
        this.loadingService = loadingService;
        this.builder = builder;
        this.loading = false;
        this.global = false;
        this.isComplete = false;
        this.progress = 0;
        this.verticalAlign = 'top';
        this.fivComplete = new EventEmitter();
        this.fivDoneShrinking = new EventEmitter();
        this.fivRefresh = new EventEmitter();
        this.animating = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.global) {
            this.loadingService.completeChange.subscribe((/**
             * @param {?} isComplete
             * @return {?}
             */
            isComplete => {
                if (isComplete) {
                    this.complete(null);
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.global) {
            this.loadingService.completeChange.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    toggleSpinner() {
        this.loading = !this.loading;
    }
    /**
     * @return {?}
     */
    load() {
        this.loading = true;
        this.fivRefresh.emit(this);
    }
    /**
     * @return {?}
     */
    unload() {
        this.loading = false;
        if (this.isComplete) {
            this.isComplete = false;
        }
    }
    /**
     * @param {?=} param
     * @return {?}
     */
    complete(param) {
        this.param = param;
        this.isComplete = true;
        this.fillIn(850);
    }
    /**
     * @param {?} isComplete
     * @return {?}
     */
    fillAnimationComplete(isComplete) {
        if (isComplete) {
            this.fivComplete.emit(this.param);
            this.isComplete = false;
            this.param = null;
            if (this.global) {
                this.loadingService.unload();
            }
            else {
                this.unload();
            }
        }
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    setProgress(progress) {
        if (progress < 0) {
            this.progress = 0;
            return;
        }
        if (progress > 100) {
            this.progress = 100;
            return;
        }
        this.progress = progress;
    }
    /**
     * @param {?} ms
     * @return {?}
     */
    fillIn(ms) {
        // first define a reusable animation
        this.progress = 0;
        /** @type {?} */
        const myAnimation = this.builder.build([
            style({ width: `${this.progress}%` }),
            animate(ms, style({ width: '100%' }))
        ]);
        // use the returned factory object to create a player
        /** @type {?} */
        const player = myAnimation.create(this.linear.nativeElement);
        /** @type {?} */
        const t = timer(0, ms / 100).subscribe((/**
         * @return {?}
         */
        () => {
            if (this.progress <= 0) {
                return t.unsubscribe();
            }
            this.progress++;
        }));
        player.play();
        player.onDone((/**
         * @return {?}
         */
        () => {
            if (this.animating) {
                this.fillAnimationComplete(true);
                this.stopProgressAnimation();
            }
        }));
        this.stopProgressAnimation();
        this.animating = true;
        this._progressPlayer = player;
    }
    /**
     * @param {?} ms
     * @return {?}
     */
    shrinkIn(ms) {
        // first define a reusable animation
        this.progress = 100;
        /** @type {?} */
        const myAnimation = this.builder.build([
            style({ width: `${this.progress}%` }),
            animate(ms, style({ width: 0 }))
        ]);
        // use the returned factory object to create a player
        /** @type {?} */
        const player = myAnimation.create(this.linear.nativeElement);
        /** @type {?} */
        const t = timer(0, ms / 100).subscribe((/**
         * @return {?}
         */
        () => {
            if (this.progress <= 0) {
                return t.unsubscribe();
            }
            this.progress--;
        }));
        player.play();
        player.onDone((/**
         * @return {?}
         */
        () => {
            if (this.animating) {
                this.fivDoneShrinking.emit(true);
                this.stopProgressAnimation();
            }
        }));
        this.stopProgressAnimation();
        this.animating = true;
        this._progressPlayer = player;
    }
    /**
     * @return {?}
     */
    stopProgressAnimation() {
        if (this._progressPlayer) {
            this._progressPlayer.destroy();
            this._progressPlayer = null;
            this.animating = false;
        }
    }
}
FivLoadingProgressBar.decorators = [
    { type: Component, args: [{
                selector: 'fiv-loading-progress-bar',
                template: "<div [@progressAnim] *ngIf=\"(!global && loading) || (global && loadingService.loading)\" class=\"slider\" [ngClass]=\"{'top':verticalAlign == 'top','bottom': verticalAlign == 'bottom'}\" >\n  <div class=\"line\"></div>\n  <div *ngIf=\"!isComplete\" class=\"subline inc\"></div>\n  <!-- <div *ngIf=\"isComplete\" [@fillAnim] (@fillAnim.done)=\"fillAnimationComplete(isComplete)\" class=\"subline fill\"></div> -->\n  <div *ngIf=\"!isComplete\" class=\"subline dec\"></div>\n</div>\n<div #linear [@progressAnimLinear] class=\"progress\"  [ngClass]=\"{'top':verticalAlign == 'top','bottom': verticalAlign == 'bottom'}\" ></div>\n",
                animations: [
                    trigger('progressAnim', [
                        transition('void => *', [
                            style({ height: '0px' }),
                            animate('250ms ease-out')
                        ]),
                        transition('* => void', [
                            animate('299ms ease-in', style({ height: '0px' }))
                        ])
                    ]),
                    trigger('progressAnimLinear', [
                        transition('void => *', [
                            style({ height: '0px' }),
                            animate('65ms ease-out')
                        ]),
                        transition('* => void', [
                            animate('299ms ease-in', style({ height: '0px' }))
                        ])
                    ]),
                    trigger('fillAnim', [
                        transition('void => *', [
                            style({
                                width: '0px'
                            }),
                            animate('850ms ease-out', style({ width: '100%' }))
                        ])
                    ])
                ],
                styles: [":host{--background-progress-bar:var(--ion-color-primary);--background-progress:var(--ion-color-primary-shade);--color-spin-0:var(--background-progress);--color-spin-25:var(--background-progress);--color-spin-50:var(--background-progress);--color-spin-75:var(--background-progress);--color-spin-100:var(--background-progress)}.slider{position:absolute;width:100%;height:5px;overflow-x:hidden;z-index:5000}.progress{position:absolute;height:5px;width:0;overflow-x:hidden;z-index:5000;background:var(--background-progress-bar);transition:240ms}.line{position:absolute;opacity:.4;width:240%;height:5px;-webkit-animation:5.6s ease-in-out infinite colorspin;animation:5.6s ease-in-out infinite colorspin}.subline{position:absolute;height:5px;background:inherit}.inc{-webkit-animation:1.6s infinite increase,5.6s ease-in-out infinite colorspin;animation:1.6s infinite increase,5.6s ease-in-out infinite colorspin}.dec{-webkit-animation:1.6s .4s infinite decrease,5.6s ease-in-out infinite colorspin;animation:1.6s .4s infinite decrease,5.6s ease-in-out infinite colorspin}.fill{left:0;width:100%;-webkit-animation:5.6s ease-in-out infinite colorspin;animation:5.6s ease-in-out infinite colorspin}@-webkit-keyframes increase{from{left:-5%;width:5%}to{left:130%;width:100%}}@keyframes increase{from{left:-5%;width:5%}to{left:130%;width:100%}}@-webkit-keyframes decrease{from{left:-80%;width:80%}to{left:110%;width:10%}}@keyframes decrease{from{left:-80%;width:80%}to{left:110%;width:10%}}@-webkit-keyframes colorspin{0%{background-color:var(--color-spin-0)}25%{background-color:var(--color-spin-25)}50%{background-color:var(--color-spin-50)}75%{background-color:var(--color-spin-75)}100%{background-color:var(--color-spin-100)}}@keyframes colorspin{0%{background-color:var(--color-spin-0)}25%{background-color:var(--color-spin-25)}50%{background-color:var(--color-spin-50)}75%{background-color:var(--color-spin-75)}100%{background-color:var(--color-spin-100)}}.top{top:0;left:0}.bottom{bottom:0;left:0}"]
            }] }
];
/** @nocollapse */
FivLoadingProgressBar.ctorParameters = () => [
    { type: FivLoadingService },
    { type: AnimationBuilder }
];
FivLoadingProgressBar.propDecorators = {
    loading: [{ type: Input }],
    global: [{ type: Input }],
    isComplete: [{ type: Input }],
    verticalAlign: [{ type: Input }],
    fivComplete: [{ type: Output }],
    fivDoneShrinking: [{ type: Output }],
    fivRefresh: [{ type: Output }],
    bar: [{ type: ViewChild, args: ['bar', { static: false },] }],
    linear: [{ type: ViewChild, args: ['linear', { static: false },] }]
};
if (false) {
    /** @type {?} */
    FivLoadingProgressBar.prototype.loading;
    /** @type {?} */
    FivLoadingProgressBar.prototype.global;
    /** @type {?} */
    FivLoadingProgressBar.prototype.isComplete;
    /** @type {?} */
    FivLoadingProgressBar.prototype.progress;
    /** @type {?} */
    FivLoadingProgressBar.prototype.verticalAlign;
    /** @type {?} */
    FivLoadingProgressBar.prototype.fivComplete;
    /** @type {?} */
    FivLoadingProgressBar.prototype.fivDoneShrinking;
    /** @type {?} */
    FivLoadingProgressBar.prototype.fivRefresh;
    /** @type {?} */
    FivLoadingProgressBar.prototype.bar;
    /** @type {?} */
    FivLoadingProgressBar.prototype.linear;
    /** @type {?} */
    FivLoadingProgressBar.prototype.param;
    /** @type {?} */
    FivLoadingProgressBar.prototype._progressPlayer;
    /**
     * @type {?}
     * @private
     */
    FivLoadingProgressBar.prototype.animating;
    /** @type {?} */
    FivLoadingProgressBar.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    FivLoadingProgressBar.prototype.builder;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/loading-progress-bar/loading-progress-bar.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivLoadingProgressBarModule {
}
FivLoadingProgressBarModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivLoadingProgressBar],
                imports: [CommonModule],
                exports: [FivLoadingProgressBar],
                providers: [FivLoadingService]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/center/center.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivCenter {
    /**
     * @param {?} sanitizer
     */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.vertical = true;
        this.horizontal = true;
    }
    /**
     * @return {?}
     */
    get myStyle() {
        // tslint:disable-next-line:max-line-length
        /** @type {?} */
        const style = `position: absolute; ${this.vertical && this.horizontal
            ? 'top: 50%; left: 50%; transform: translateY(-50%) translateX(-50%);'
            : this.vertical
                ? 'top: 50%; transform: translateY(-50%);'
                : 'left: 50%; transform: translateX(-50%);'}`;
        return this.sanitizer.bypassSecurityTrustStyle(style);
    }
    /**
     * @param {?} center
     * @return {?}
     */
    set fivCenter(center) {
        if (center) {
            this.vertical = center.vertical;
            this.horizontal = center.horizontal;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
}
FivCenter.decorators = [
    { type: Directive, args: [{
                selector: '[fivCenter]'
            },] }
];
/** @nocollapse */
FivCenter.ctorParameters = () => [
    { type: DomSanitizer }
];
FivCenter.propDecorators = {
    myStyle: [{ type: HostBinding, args: ['style',] }],
    fivCenter: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FivCenter.prototype.vertical;
    /** @type {?} */
    FivCenter.prototype.horizontal;
    /**
     * @type {?}
     * @private
     */
    FivCenter.prototype.sanitizer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/center/center.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivCenterModule {
}
FivCenterModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivCenter],
                imports: [CommonModule],
                exports: [FivCenter]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/spinner/spinner.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const BASE_SIZE = 100;
class FivSpinner {
    /**
     * @param {?} _document
     * @param {?} _elementRef
     * @param {?} change
     * @param {?} builder
     * @param {?} sanitizer
     */
    constructor(_document, _elementRef, change, builder, sanitizer) {
        this._document = _document;
        this._elementRef = _elementRef;
        this.change = change;
        this.builder = builder;
        this.sanitizer = sanitizer;
        this._diameter = BASE_SIZE;
        this._strokeWidth = 10;
        this._value = 0;
        this.fivProgress = new EventEmitter();
        this.fivComplete = new EventEmitter();
        this.mode = 'indeterminate';
        this.circleRadius = 45;
        this._color = 'var(--fiv-spin-color)';
    }
    /**
     * @return {?}
     */
    get class() {
        return (this.mode +
            ' fiv-spinner fiv-progress-spinner fiv-progress-spinner-indeterminate-animation');
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    get viewBox() {
        /** @type {?} */
        const viewBox = this.circleRadius * 2 + this.strokeWidth;
        return `0 0 ${viewBox} ${viewBox}`;
    }
    /**
     * The stroke circumference of the svg circle.
     * @return {?}
     */
    get strokeCircumference() {
        return 2 * Math.PI * this.circleRadius;
    }
    /**
     * The dash offset of the svg circle.
     * @return {?}
     */
    get strokeDashOffset() {
        if (this.mode === 'determinate') {
            return (this.strokeCircumference * (100 - this._value)) / 100;
        }
        return null;
    }
    /**
     * Stroke width of the circle in percent.
     * @return {?}
     */
    get circleStrokeWidth() {
        return (this.strokeWidth / this.diameter) * 100;
    }
    /**
     * Value of the progress circle.
     * @return {?}
     */
    get value() {
        return this.mode === 'determinate' ? this._value : 0;
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    set value(newValue) {
        this._value = Math.max(0, Math.min(100, newValue));
    }
    /**
     * @return {?}
     */
    get diameter() {
        return this._diameter;
    }
    /**
     * @param {?} size
     * @return {?}
     */
    set diameter(size) {
        this._diameter = size;
        if (!FivSpinner.diameters.has(this._diameter)) {
            this._attachStyleNode();
        }
    }
    /**
     * Stroke width of the progress spinner.
     * @return {?}
     */
    get strokeWidth() {
        return this._strokeWidth || this.diameter / 10;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set strokeWidth(value) {
        this._strokeWidth = value;
    }
    /**
     * Dynamically generates a style tag containing the correct animation for this diameter.
     * @private
     * @return {?}
     */
    _attachStyleNode() {
        /** @type {?} */
        let styleTag = FivSpinner.styleTag;
        if (!styleTag) {
            styleTag = this._document.createElement('style');
            this._document.head.appendChild(styleTag);
            FivSpinner.styleTag = styleTag;
        }
        if (styleTag && styleTag.sheet) {
            ((/** @type {?} */ (styleTag.sheet))).insertRule(this._getAnimationText(), 0);
        }
        FivSpinner.diameters.add(this.diameter);
    }
    /**
     * Generates animation styles adjusted for the spinner's diameter.
     * @private
     * @return {?}
     */
    _getAnimationText() {
        /** @type {?} */
        const INDETERMINATE_ANIMATION_TEMPLATE = `
    @keyframes fiv-progress-spinner-stroke-rotate-DIAMETER {
       0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }
       12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }
       12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }
       25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }
       25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }
       37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }
       37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }
       50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }
       50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }
       62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }
       62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }
       75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }
       75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }
       87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }
       87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }
       100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }
     }
   `;
        return (INDETERMINATE_ANIMATION_TEMPLATE
            // Animation should begin at 5% and end at 80%
            .replace(/START_VALUE/g, `${0.95 * this.strokeCircumference}`)
            .replace(/END_VALUE/g, `${0.2 * this.strokeCircumference}`)
            .replace(/DIAMETER/g, `${this.diameter}`));
    }
    /**
     * @param {?} duration
     * @return {?}
     */
    completeIn(duration) {
        this.mode = 'determinate';
        this.change.detectChanges();
        /** @type {?} */
        const animation = this.builder.build([
            style({
                'stroke-dasharray': 180,
                'stroke-dashoffset': 90,
                transformOrigin: 'center',
                stroke: 'var(--fiv-spin-color)'
            }),
            animate(`${duration}ms ease-out`, style({
                'stroke-dasharray': 315,
                'stroke-dashoffset': 0,
                transformOrigin: 'center',
                stroke: 'var(--fiv-spin-color)',
                opacity: 0
            }))
        ]);
        /** @type {?} */
        const player = animation.create(this.determinateCircle.nativeElement);
        player.play();
        player.onDone((/**
         * @return {?}
         */
        () => {
            this.fivComplete.emit(this);
            this._value = 0;
        }));
        /** @type {?} */
        const i = interval(duration / 100);
        /** @type {?} */
        const t = timer(duration + duration / 50);
        /** @type {?} */
        const progress = i.pipe(takeUntil(t));
        progress.subscribe((/**
         * @param {?} p
         * @return {?}
         */
        p => {
            this.fivProgress.emit(p);
        }));
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    setValue(progress) {
        this.mode = 'determinate';
        this._value = progress;
        this.change.detectChanges();
    }
    /**
     * @return {?}
     */
    spin() {
        this.mode = 'indeterminate';
        this.change.detectChanges();
    }
    /**
     * @return {?}
     */
    stop() {
        this._value = 0;
        this.change.detectChanges();
    }
    /**
     * @param {?} mode
     * @return {?}
     */
    setMode(mode) {
        this.mode = mode;
        this.change.detectChanges();
    }
}
FivSpinner.diameters = new Set([BASE_SIZE]);
FivSpinner.styleTag = null;
FivSpinner.decorators = [
    { type: Component, args: [{
                selector: 'fiv-spinner',
                template: "<svg [style.width.px]=\"diameter\" [style.height.px]=\"diameter\" [attr.viewBox]=\"viewBox\"\n  preserveAspectRatio=\"xMidYMid meet\" focusable=\"false\" [ngSwitch]=\"mode == 'indeterminate'\">\n  <circle [attr.stroke]=\"_color\" *ngSwitchCase=\"true\" cx=\"50%\" cy=\"50%\" [attr.r]=\"circleRadius\"\n    [style.animation-name]=\"'fiv-progress-spinner-stroke-rotate-' + diameter\"\n    [style.stroke-dashoffset.px]=\"strokeDashOffset\" [style.stroke-dasharray.px]=\"strokeCircumference\"\n    [style.stroke-width.%]=\"circleStrokeWidth\"></circle>\n\n  <circle [attr.stroke]=\"_color\" class=\"determinate-circle\" #determinateCircle *ngSwitchCase=\"false\" cx=\"50%\" cy=\"50%\"\n    [attr.r]=\"circleRadius\" [style.stroke-dashoffset.px]=\"strokeDashOffset\"\n    [style.stroke-dasharray.px]=\"strokeCircumference\" [style.stroke-width.%]=\"circleStrokeWidth\"></circle>\n</svg>",
                // tslint:disable-next-line:use-host-property-decorator
                host: {
                    '[style.width.px]': 'diameter',
                    '[style.height.px]': 'diameter'
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: ["fiv-spinner{display:block;position:relative}fiv-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}fiv-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}fiv-spinner.fiv-progress-spinner-indeterminate-animation.determinate circle{transition-property:stroke;-webkit-animation-duration:4s;animation-duration:4s;-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite}fiv-spinner.fiv-progress-spinner-indeterminate-animation.indeterminate{-webkit-animation:2s linear infinite fiv-progress-spinner-linear-rotate;animation:2s linear infinite fiv-progress-spinner-linear-rotate}fiv-spinner.fiv-progress-spinner-indeterminate-animation.indeterminate circle{transition-property:stroke;-webkit-animation-duration:4s;animation-duration:4s;-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite}@-webkit-keyframes fiv-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes fiv-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@-webkit-keyframes fiv-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.6061718819px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677646px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677646px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.6061718819px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.6061718819px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677646px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677646px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.6061718819px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.6061718819px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677646px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677646px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.6061718819px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.6061718819px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677646px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677646px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.6061718819px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes fiv-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.6061718819px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677646px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677646px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.6061718819px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.6061718819px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677646px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677646px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.6061718819px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.6061718819px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677646px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677646px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.6061718819px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.6061718819px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677646px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677646px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.6061718819px;transform:rotateX(180deg) rotate(341.5deg)}}"]
            }] }
];
/** @nocollapse */
FivSpinner.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: AnimationBuilder },
    { type: DomSanitizer }
];
FivSpinner.propDecorators = {
    fivProgress: [{ type: Output }],
    fivComplete: [{ type: Output }],
    determinateCircle: [{ type: ViewChild, args: ['determinateCircle', { static: false },] }],
    mode: [{ type: Input }],
    circleRadius: [{ type: Input }],
    class: [{ type: HostBinding, args: ['class',] }],
    value: [{ type: Input }],
    diameter: [{ type: Input }],
    strokeWidth: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    FivSpinner.diameters;
    /**
     * @type {?}
     * @private
     */
    FivSpinner.styleTag;
    /**
     * @type {?}
     * @private
     */
    FivSpinner.prototype._diameter;
    /** @type {?} */
    FivSpinner.prototype._strokeWidth;
    /** @type {?} */
    FivSpinner.prototype._value;
    /** @type {?} */
    FivSpinner.prototype.fivProgress;
    /** @type {?} */
    FivSpinner.prototype.fivComplete;
    /** @type {?} */
    FivSpinner.prototype.determinateCircle;
    /** @type {?} */
    FivSpinner.prototype.mode;
    /** @type {?} */
    FivSpinner.prototype.circleRadius;
    /** @type {?} */
    FivSpinner.prototype._color;
    /**
     * @type {?}
     * @private
     */
    FivSpinner.prototype._document;
    /** @type {?} */
    FivSpinner.prototype._elementRef;
    /** @type {?} */
    FivSpinner.prototype.change;
    /**
     * @type {?}
     * @private
     */
    FivSpinner.prototype.builder;
    /** @type {?} */
    FivSpinner.prototype.sanitizer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/fab/fab.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivFab {
    /**
     * @param {?} renderer
     * @param {?} platform
     * @param {?} content
     */
    constructor(renderer, platform, content) {
        this.renderer = renderer;
        this.platform = platform;
        this.content = content;
        this.vertical = 'none';
        this.horizontal = 'none';
        this.mode = 'normal';
        this.spinColor = 'primary';
        this.disabled = false;
        this.visible = true;
        this.pulse = false;
        this.animationDisabled = false;
        this._scroll = false;
        this.fivComplete = new EventEmitter();
        this.fivRefresh = new EventEmitter();
        this.fivHidden = new EventEmitter();
        this.fivShow = new EventEmitter();
        this.fivTransition = new EventEmitter();
        this.loading = false;
        this.extended = false;
        this.iconState = 'normal';
        this.currentDeltaY = 0;
        this.$onDestroy = new Subject();
    }
    /**
     * @param {?} scroll
     * @return {?}
     */
    set scroll(scroll) {
        this._scroll = scroll;
        this.$onDestroy.next();
        this.ngOnInit();
    }
    /**
     * @return {?}
     */
    get scroll() {
        return this._scroll;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.content) {
            return;
        }
        if (!this.scroll) {
            return;
        }
        this.content.scrollEvents = true;
        /** @type {?} */
        const directionChange = this.content.ionScroll.pipe(map((/**
         * @param {?} ev
         * @return {?}
         */
        ev => ev.detail.deltaY)), pairwise(), map((/**
         * @param {?} __0
         * @return {?}
         */
        ([y1, y2]) => (y2 < y1 ? 'Up' : 'Down'))), distinctUntilChanged(), takeUntil(this.content.ionScrollEnd), repeat());
        /** @type {?} */
        const up = directionChange.pipe(filter((/**
         * @param {?} direction
         * @return {?}
         */
        direction => direction === 'Up')));
        /** @type {?} */
        const down = directionChange.pipe(filter((/**
         * @param {?} direction
         * @return {?}
         */
        direction => direction === 'Down')));
        up.pipe(tap((/**
         * @return {?}
         */
        () => this.labelComp ? (this.extended = true) : (this.visible = true))), takeUntil(this.$onDestroy)).subscribe();
        down
            .pipe(tap((/**
         * @return {?}
         */
        () => this.labelComp ? (this.extended = false) : (this.visible = false))), takeUntil(this.$onDestroy))
            .subscribe();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.$onDestroy.next();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.extended = !!this.labelComp;
    }
    /**
     * @return {?}
     */
    load() {
        this.loading = true;
        this.fivRefresh.emit(this);
    }
    /**
     * @return {?}
     */
    unload() {
        if (this.bar) {
            this.bar.unload();
        }
        this.loading = false;
    }
    /**
     * @return {?}
     */
    complete() {
        if (this.loading) {
            if (this.spinner) {
                this.spinner.completeIn(1000);
            }
            else if (this.bar) {
                this.bar.complete();
            }
        }
    }
    /**
     * @return {?}
     */
    fillAnimationDone() {
        this.fivComplete.emit(this);
        this.unload();
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    rotate(progress) {
        this.renderer.setStyle(this.spinner._elementRef.nativeElement, 'transform', `rotateZ(${(progress / 200) * 360}deg)`);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    fabAnimDone(event) {
        if (event.fromState === 'void') {
            this.fivShow.emit(this);
        }
        if (event.toState === 'void') {
            this.fivHidden.emit(this);
        }
    }
}
FivFab.decorators = [
    { type: Component, args: [{
                selector: 'fiv-fab',
                template: "<ion-fab *ngIf=\"visible\" [@.disabled]=\"animationDisabled\" (@fabAnim.done)=\"fabAnimDone($event)\" [@fabAnim]=\"horizontal\"\n  [ngClass]=\"[mode,horizontal,vertical]\" [slot]=\"slot\">\n  <fiv-spinner *ngIf=\"!extended && loading\" (fivProgress)=\"rotate($event)\" #spinner (fivComplete)=\"fillAnimationDone()\"\n    class=\"spinner\" [circleRadius]=\"30\" [diameter]=\"68\" [strokeWidth]=\"4\" [mode]=\"'indeterminate'\">\n  </fiv-spinner>\n\n  <ion-button [ngClass]=\"{'pulse': pulse, 'small':!labelComp || !extended}\" [color]=\"color\" [disabled]=\"disabled\">\n    <fiv-loading-progress-bar *ngIf=\"extended\" [loading]=\"loading\" (fivComplete)=\"fillAnimationDone()\" #bar>\n    </fiv-loading-progress-bar>\n    <ng-content select=\"fiv-icon\"></ng-content>\n    <ng-content select=\"ion-icon\"></ng-content>\n    <div [@labelAnim] *ngIf=\"labelComp && extended\">\n      <ng-content select=\"ion-label\"></ng-content>\n    </div>\n  </ion-button>\n</ion-fab>",
                animations: [
                    trigger('fabAnim', [
                        transition('void => center', [
                            style({
                                transform: 'translateX(-50%) scale(0) '
                            }),
                            animate('250ms ease', style({ transform: 'translateX(-50%) scale(1)' }))
                        ]),
                        transition('center => void', [
                            style({
                                transform: 'translateX(-50%) scale(1) '
                            }),
                            animate('250ms ease', style({ transform: ' translateX(-50%) scale(0)' }))
                        ]),
                        transition('void => *', [
                            style({
                                transform: 'scale(0)'
                            }),
                            animate('250ms ease', style({
                                transform: 'scale(1)'
                            }))
                        ]),
                        transition('* => void', [
                            style({
                                transform: 'scale(1)'
                            }),
                            animate('250ms ease', style({
                                transform: 'scale(0)'
                            }))
                        ])
                    ]),
                    trigger('labelAnim', [
                        transition('void => *', [
                            style({ width: '0', opacity: 0 }),
                            animate('140ms', style({ width: '*', opacity: 1 }))
                        ]),
                        transition('* => void', [
                            style({ width: '*', opacity: 1 }),
                            animate('120ms', style({ width: 0, opacity: 0 }))
                        ])
                    ])
                ],
                styles: [":host{--fiv-fab-size:56px;--fiv-spinner-size:calc(var(--fiv-fab-size) + 12px);--fiv-fab-bottom:calc(10px + env(safe-area-inset-bottom));--fiv-fab-top:calc(10px + env(safe-area-inset-top));--background-fab-progress-bar:var(--ion-color-primary);--background-fab-progress:var(--ion-color-primary-shade);position:inherit}fiv-loading-progress-bar{--background-progress-bar:var(--background-fab-progress-bar);--background-progress:var(--background-fab-progress)}:host(.button-disabled){pointer-events:none}::ng-deep ng-deep fiv-icon.ios{--fiv-icon-height:24px;--fiv-icon-width:24px}::ng-deep fiv-icon:not(.ios){--fiv-icon-height:25px;--fiv-icon-width:25px}ion-button{--border-radius:calc(var(--fiv-fab-size) / 2);height:var(--fiv-fab-size);min-width:var(--fiv-fab-size);-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:0;margin-inline-end:0;margin:0}ion-fab.top{top:var(--fiv-fab-top)}ion-fab.top.edge{top:calc(var(--fiv-fab-top) - 38px)}ion-fab.middle{top:calc(50% - var(--fiv-spinner-size))}ion-fab.bottom.edge{bottom:calc(var(--fiv-fab-bottom) - 38px)}ion-fab.bottom{bottom:var(--fiv-fab-bottom)}ion-fab.center{left:50%;transform:translateX(-50%)}ion-fab.start{left:10px}ion-fab.end{right:calc(10px + var(--ion-safe-area-right,0px))}.pulse{-webkit-animation:1.2s infinite shadow-pulse;animation:1.2s infinite shadow-pulse}fiv-spinner{position:absolute;left:calc((var(--fiv-spinner-size) - var(--fiv-fab-size))/ -2);top:calc((var(--fiv-spinner-size) - var(--fiv-fab-size))/ -2)}@-webkit-keyframes shadow-pulse{0%{border-radius:calc(var(--fiv-spinner-size)/ 2);box-shadow:0 0 0 0 rgba(0,0,0,.2)}100%{border-radius:calc(var(--fiv-spinner-size)/ 2);box-shadow:0 0 0 28px transparent}}@keyframes shadow-pulse{0%{border-radius:calc(var(--fiv-spinner-size)/ 2);box-shadow:0 0 0 0 rgba(0,0,0,.2)}100%{border-radius:calc(var(--fiv-spinner-size)/ 2);box-shadow:0 0 0 28px transparent}}"]
            }] }
];
/** @nocollapse */
FivFab.ctorParameters = () => [
    { type: Renderer2 },
    { type: Platform },
    { type: IonContent, decorators: [{ type: Optional }] }
];
FivFab.propDecorators = {
    vertical: [{ type: Input }],
    horizontal: [{ type: Input }],
    mode: [{ type: Input }],
    slot: [{ type: Input }],
    spinColor: [{ type: Input }],
    color: [{ type: Input }],
    disabled: [{ type: Input }],
    visible: [{ type: Input }],
    pulse: [{ type: Input }],
    animationDisabled: [{ type: Input }],
    scroll: [{ type: Input }],
    feature: [{ type: Input }],
    fivComplete: [{ type: Output }],
    fivRefresh: [{ type: Output }],
    fivHidden: [{ type: Output }],
    fivShow: [{ type: Output }],
    fivTransition: [{ type: Output }],
    spinner: [{ type: ViewChild, args: ['spinner', { static: false },] }],
    bar: [{ type: ViewChild, args: ['bar', { static: false },] }],
    labelComp: [{ type: ContentChild, args: [IonLabel, { static: false },] }]
};
if (false) {
    /** @type {?} */
    FivFab.prototype.vertical;
    /** @type {?} */
    FivFab.prototype.horizontal;
    /** @type {?} */
    FivFab.prototype.mode;
    /** @type {?} */
    FivFab.prototype.slot;
    /** @type {?} */
    FivFab.prototype.spinColor;
    /** @type {?} */
    FivFab.prototype.color;
    /** @type {?} */
    FivFab.prototype.disabled;
    /** @type {?} */
    FivFab.prototype.visible;
    /** @type {?} */
    FivFab.prototype.pulse;
    /** @type {?} */
    FivFab.prototype.animationDisabled;
    /** @type {?} */
    FivFab.prototype._scroll;
    /** @type {?} */
    FivFab.prototype.feature;
    /** @type {?} */
    FivFab.prototype.fivComplete;
    /** @type {?} */
    FivFab.prototype.fivRefresh;
    /** @type {?} */
    FivFab.prototype.fivHidden;
    /** @type {?} */
    FivFab.prototype.fivShow;
    /** @type {?} */
    FivFab.prototype.fivTransition;
    /** @type {?} */
    FivFab.prototype.spinner;
    /** @type {?} */
    FivFab.prototype.bar;
    /** @type {?} */
    FivFab.prototype.labelComp;
    /** @type {?} */
    FivFab.prototype.loading;
    /** @type {?} */
    FivFab.prototype.extended;
    /** @type {?} */
    FivFab.prototype.iconState;
    /** @type {?} */
    FivFab.prototype.currentDeltaY;
    /** @type {?} */
    FivFab.prototype.$onDestroy;
    /**
     * @type {?}
     * @private
     */
    FivFab.prototype.renderer;
    /** @type {?} */
    FivFab.prototype.platform;
    /**
     * @type {?}
     * @private
     */
    FivFab.prototype.content;
}
/**
 * @record
 */
function FabTransitionEvent() { }
if (false) {
    /** @type {?} */
    FabTransitionEvent.prototype.from;
    /** @type {?} */
    FabTransitionEvent.prototype.to;
}
/** @enum {number} */
const FabState = {
    HIDDEN: 0,
    NORMAL: 1,
    EXTENDED: 2,
};
FabState[FabState.HIDDEN] = 'HIDDEN';
FabState[FabState.NORMAL] = 'NORMAL';
FabState[FabState.EXTENDED] = 'EXTENDED';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/spinner/spinner.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivSpinnerModule {
}
FivSpinnerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivSpinner],
                imports: [CommonModule],
                exports: [FivSpinner]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/fab/fab.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivFabModule {
}
FivFabModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivFab],
                imports: [
                    CommonModule,
                    FivCenterModule,
                    FivIconModule,
                    FivSpinnerModule,
                    IonicModule,
                    FivLoadingProgressBarModule
                ],
                exports: [FivFab],
                providers: []
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/app-bar/app-bar.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivAppBarModule {
}
FivAppBarModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivAppBar, FivAppBarTab, FivAppBarFabDirective],
                imports: [CommonModule, FivIconModule, FivFabModule, IonicModule],
                exports: [FivAppBar, FivAppBarTab, FivAppBarFabDirective],
                providers: []
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/back-button/routing-state.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function RoutingStateConfig() { }
if (false) {
    /** @type {?} */
    RoutingStateConfig.prototype.clearOn;
    /** @type {?} */
    RoutingStateConfig.prototype.root;
}
class FivRoutingStateService {
    /**
     * @param {?} router
     * @param {?} navCtrl
     * @param {?} platform
     */
    constructor(router, navCtrl, platform) {
        this.router = router;
        this.navCtrl = navCtrl;
        this.platform = platform;
        this.history = [];
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    loadRouting(config) {
        this.config = config;
        this.handleAndroidBackButton();
        this.router.events
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        event => event instanceof NavigationEnd)))
            .subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ({ urlAfterRedirects }) => {
            if (urlAfterRedirects === this.getPreviousUrl(this.config.root)) {
                this.pop();
                this.pop();
            }
            // add url to history
            this.history.push(urlAfterRedirects);
            if (this.config && this.config.clearOn) {
                /** @type {?} */
                const clear = this.config.clearOn.some((/**
                 * @param {?} s
                 * @return {?}
                 */
                s => s === urlAfterRedirects));
                if (clear) {
                    this.clearHistory(urlAfterRedirects);
                }
            }
        }));
    }
    /**
     * @param {?} target
     * @return {?}
     */
    registerNavigateable(target) {
        if (isNavigateable(target)) {
            this.history.push(target);
        }
    }
    /**
     * @return {?}
     */
    handleAndroidBackButton() {
        this.platform.backButton
            .pipe(filter((/**
         * @return {?}
         */
        () => !isNavigateable(this.getCurrentUrl()))))
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            this.goBack();
        }));
        this.platform.backButton
            .pipe(filter((/**
         * @return {?}
         */
        () => isNavigateable(this.getCurrentUrl()))))
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            event.register(99999, (/**
             * @return {?}
             */
            () => {
                this.goBack('/');
            }));
        }));
    }
    /**
     * @return {?}
     */
    getHistory() {
        return this.history;
    }
    /**
     * @param {?=} defaultHref
     * @return {?}
     */
    getPreviousUrl(defaultHref = '/') {
        if (this.history.length >= 2) {
            return this.history[this.history.length - 2];
        }
        return defaultHref;
    }
    /**
     * @return {?}
     */
    pop() {
        return this.history.pop();
    }
    /**
     * @param {?} fromUrl
     * @return {?}
     */
    clearHistory(fromUrl) {
        this.history = this.history.filter((/**
         * @param {?} h
         * @return {?}
         */
        h => this.config.clearOn.some((/**
         * @param {?} s
         * @return {?}
         */
        s => s === h))));
        if (fromUrl !== this.config.root) {
            this.history.push(fromUrl);
        }
        this.history = this.history
            .reverse()
            .filter((/**
         * @param {?} item
         * @param {?} pos
         * @param {?} self
         * @return {?}
         */
        function (item, pos, self) {
            return self.indexOf(item) === pos;
        }))
            .reverse();
        if (this.history[0] !== this.config.root) {
            this.history = [this.config.root, ...this.history];
        }
    }
    /**
     * @return {?}
     */
    getCurrentUrl() {
        return this.history[this.history.length - 1];
    }
    /**
     * @param {?=} defaultHref
     * @return {?}
     */
    goBack(defaultHref = '/') {
        if (this.getHistory().length <= 1) {
            // close the app because we are at root level
            return navigator['app']
                ? navigator['app'].exitApp()
                : this.navCtrl.navigateBack(defaultHref);
        }
        /** @type {?} */
        const current = this.getCurrentUrl();
        if (typeof current !== 'string' && isNavigateable(current)) {
            current.dismiss();
            return this.pop();
        }
        /** @type {?} */
        const previous = this.getPreviousUrl(defaultHref);
        if (typeof previous === 'string') {
            return this.navCtrl.navigateBack(previous);
        }
        if (isNavigateable(previous)) {
            return this.navCtrl.navigateBack(this.getLatestUrl(defaultHref));
        }
    }
    /**
     * @param {?} defaultHref
     * @return {?}
     */
    getLatestUrl(defaultHref) {
        /** @type {?} */
        const urls = this.history.filter((/**
         * @param {?} e
         * @return {?}
         */
        e => !!(typeof e === 'string')));
        /** @type {?} */
        const latest = urls[urls.length - 1];
        if (urls.length > 0 && latest && typeof latest === 'string') {
            return latest;
        }
        return defaultHref;
    }
}
FivRoutingStateService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FivRoutingStateService.ctorParameters = () => [
    { type: Router },
    { type: NavController },
    { type: Platform }
];
/** @nocollapse */ FivRoutingStateService.ngInjectableDef = ɵɵdefineInjectable({ factory: function FivRoutingStateService_Factory() { return new FivRoutingStateService(ɵɵinject(Router), ɵɵinject(NavController), ɵɵinject(Platform)); }, token: FivRoutingStateService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    FivRoutingStateService.prototype.history;
    /**
     * @type {?}
     * @private
     */
    FivRoutingStateService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    FivRoutingStateService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    FivRoutingStateService.prototype.navCtrl;
    /**
     * @type {?}
     * @private
     */
    FivRoutingStateService.prototype.platform;
}
/**
 * @param {?} object
 * @return {?}
 */
function isNavigateable(object) {
    return !!object && object.dismiss !== undefined;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/back-button/back-button.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivBackButton {
    /**
     * @param {?} routingState
     */
    constructor(routingState) {
        this.routingState = routingState;
        this.icon = 'arrow-back';
        this.defaultHref = '/';
    }
    /**
     * @return {?}
     */
    buttonClick() {
        this.routingState.goBack(this.defaultHref);
    }
}
FivBackButton.decorators = [
    { type: Component, args: [{
                selector: 'fiv-back-button',
                template: "<ion-button (click)=\"buttonClick()\">\n  <fiv-icon slot=\"icon-only\" [color]=\"color\" [name]=\"icon\"></fiv-icon>\n</ion-button>",
                styles: [":host{display:block;padding-top:.2em}"]
            }] }
];
/** @nocollapse */
FivBackButton.ctorParameters = () => [
    { type: FivRoutingStateService }
];
FivBackButton.propDecorators = {
    icon: [{ type: Input }],
    color: [{ type: Input }],
    defaultHref: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FivBackButton.prototype.icon;
    /** @type {?} */
    FivBackButton.prototype.color;
    /** @type {?} */
    FivBackButton.prototype.defaultHref;
    /** @type {?} */
    FivBackButton.prototype.routingState;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/back-button/back-button.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivBackButtonModule {
}
FivBackButtonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivBackButton],
                imports: [CommonModule, FivIconModule, IonicModule],
                exports: [FivBackButton],
                providers: []
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bottom-sheet/drawer-state.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const DrawerState = {
    Bottom: 0,
    Docked: 1,
    Top: 2,
};
DrawerState[DrawerState.Bottom] = 'Bottom';
DrawerState[DrawerState.Docked] = 'Docked';
DrawerState[DrawerState.Top] = 'Top';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bottom-sheet/bottom-sheet-content/bottom-sheet-content.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivBottomSheetContent {
    /**
     * @param {?} sanitizer
     */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.rounded = true;
        this.handle = true;
        this.float = true;
        this.fivClick = new EventEmitter();
        this.states = DrawerState;
        this.shouldBounce = true;
        this.panning = false;
    }
    /**
     * @return {?}
     */
    get isRounded() {
        switch (this.currentState) {
            case DrawerState.Top:
                return false;
            case DrawerState.Docked:
                return this.rounded;
            case DrawerState.Bottom:
                return this.rounded && !this.float;
        }
        return true;
    }
    /**
     * @return {?}
     */
    get styles() {
        if (!(this.float && this.currentState === DrawerState.Bottom)) {
            return this.sanitizer
                .bypassSecurityTrustStyle(`box-shadow: 0 4px 16px rgba(0, 0, 0, .12);
                                                      border-top: 1px solid var(--ion-color-light);`);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.content.scrollEvents = true;
    }
    /**
     * @param {?} state
     * @return {?}
     */
    updateState(state) {
        this.currentState = state;
    }
    /**
     * @return {?}
     */
    click() {
        this.fivClick.emit();
    }
}
FivBottomSheetContent.decorators = [
    { type: Component, args: [{
                selector: 'fiv-bottom-sheet-content',
                template: "<div class=\"bsc-wrapper\">\n  <span (click)=\"click()\" *ngIf=\"currentState !== states.Top && handle\"\n    [fivCenter]=\"{vertical: false, horizontal: true}\" class=\"handle\"></span>\n  <div [ngClass]=\"{'margin': handle}\" class=\"content\">\n    <ion-content [scrollY]=\"currentState === 2 && shouldBounce && !panning\">\n      <ng-content>\n\n      </ng-content>\n    </ion-content>\n\n  </div>\n</div>",
                styles: [":host{display:block;width:100%;height:100%;--fiv-border-radius:12px;--fiv-padding:20px;padding-top:var(--fiv-padding);--fiv-background:var(--ion-background-color);--fiv-handle-background:var(--ion-color-light-shade);background:var(--fiv-background)}.bsc-wrapper{width:100%;height:100%}:host.rounded{border-top-left-radius:var(--fiv-border-radius);border-top-right-radius:var(--fiv-border-radius)}.handle{display:block;background:var(--fiv-handle-background);border-radius:12px;top:8px;width:32px;height:8px;position:absolute}.content{height:100%}"]
            }] }
];
/** @nocollapse */
FivBottomSheetContent.ctorParameters = () => [
    { type: DomSanitizer }
];
FivBottomSheetContent.propDecorators = {
    rounded: [{ type: Input }],
    handle: [{ type: Input }],
    float: [{ type: Input }],
    fivClick: [{ type: Output }],
    content: [{ type: ViewChild, args: [IonContent, { static: true },] }],
    isRounded: [{ type: HostBinding, args: ['class.rounded',] }],
    styles: [{ type: HostBinding, args: ['style',] }]
};
if (false) {
    /** @type {?} */
    FivBottomSheetContent.prototype.rounded;
    /** @type {?} */
    FivBottomSheetContent.prototype.handle;
    /** @type {?} */
    FivBottomSheetContent.prototype.float;
    /** @type {?} */
    FivBottomSheetContent.prototype.fivClick;
    /** @type {?} */
    FivBottomSheetContent.prototype.content;
    /** @type {?} */
    FivBottomSheetContent.prototype.currentState;
    /** @type {?} */
    FivBottomSheetContent.prototype.states;
    /** @type {?} */
    FivBottomSheetContent.prototype.shouldBounce;
    /** @type {?} */
    FivBottomSheetContent.prototype.panning;
    /**
     * @type {?}
     * @private
     */
    FivBottomSheetContent.prototype.sanitizer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bottom-sheet/bottom-sheet.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function PanEvent() { }
if (false) {
    /** @type {?} */
    PanEvent.prototype.currentOffset;
    /** @type {?} */
    PanEvent.prototype.startOffset;
    /** @type {?} */
    PanEvent.prototype.currentTop;
    /** @type {?} */
    PanEvent.prototype.startTop;
    /** @type {?} */
    PanEvent.prototype.distance;
    /** @type {?} */
    PanEvent.prototype.touch;
}
class FivBottomSheet {
    /**
     * @param {?} _element
     * @param {?} _renderer
     * @param {?} _domCtrl
     * @param {?} _platform
     */
    constructor(_element, _renderer, _domCtrl, _platform) {
        this._element = _element;
        this._renderer = _renderer;
        this._domCtrl = _domCtrl;
        this._platform = _platform;
        this.dockedHeight = 80;
        this.shouldBounce = true;
        this.distanceTop = 56;
        this.transition = '0.25s';
        this.state = DrawerState.Bottom;
        this.bounceThreshold = 40;
        this.panThreshold = 20;
        this.panEnabled = true;
        this.stateChange = new EventEmitter();
        this.fivOpen = new EventEmitter();
        this.fivDocked = new EventEmitter();
        this.fivClose = new EventEmitter();
        this.fivProgress = new EventEmitter();
        this.scrollTop = 0;
        this.$onDestroy = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.$onDestroy.next();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._setDrawerState(this.state);
        this.content.shouldBounce = this.shouldBounce;
        /** @type {?} */
        const touchmove = fromEvent(this._element.nativeElement, 'touchmove', {
            passive: true
        });
        /** @type {?} */
        const touchend = merge(fromEvent(this._element.nativeElement, 'touchend', {
            passive: true
        }), fromEvent(this._element.nativeElement, 'touchcancel', {
            passive: true
        }));
        /** @type {?} */
        const getScrollContent = from(this.content.content.getScrollElement());
        /** @type {?} */
        const scroll = this.content.content.ionScroll.pipe(tap((/**
         * @param {?} el
         * @return {?}
         */
        el => (this.scrollTop = el.detail.scrollTop))), takeUntil(this.$onDestroy));
        scroll.subscribe();
        this.content.content.ionScrollEnd
            .pipe(filter((/**
         * @param {?} el
         * @return {?}
         */
        el => this.scrollTop === 0 && this.state === DrawerState.Top)), tap((/**
         * @return {?}
         */
        () => this.content.content.scrollByPoint(0, 1, 0))), takeUntil(this.$onDestroy))
            .subscribe();
        /** @type {?} */
        const canStart = touchmove.pipe(filter((/**
         * @return {?}
         */
        () => this.scrollTop === 0)));
        /** @type {?} */
        const start = canStart.pipe(take(1), tap((/**
         * @param {?} s
         * @return {?}
         */
        (s) => this._handlePanStart(s))));
        /** @type {?} */
        const pan = start.pipe(filter((/**
         * @return {?}
         */
        () => this.panEnabled)), flatMap((/**
         * @return {?}
         */
        () => touchmove)), map((/**
         * @param {?} tm
         * @return {?}
         */
        (tm) => this.calculatePanEvent(tm))));
        /** @type {?} */
        const handlePan = pan.pipe(filter((/**
         * @param {?} p
         * @return {?}
         */
        p => Math.abs(p.distance) > this.panThreshold)), map((/**
         * @param {?} tm
         * @return {?}
         */
        tm => this._handlePan(tm))), takeUntil(touchend), repeat(), takeUntil(this.$onDestroy));
        /** @type {?} */
        const handleBackPan = pan
            .pipe(filter((/**
         * @param {?} p
         * @return {?}
         */
        p => Math.abs(p.distance) <= this.panThreshold && this.content.panning)), map((/**
         * @param {?} tm
         * @return {?}
         */
        tm => this._handlePan(tm))), takeUntil(touchend), repeat(), takeUntil(this.$onDestroy))
            .subscribe();
        handlePan
            .pipe(first(), tap((/**
         * @return {?}
         */
        () => (this.content.panning = true))), repeatWhen((/**
         * @return {?}
         */
        () => touchend)), takeUntil(this.$onDestroy))
            .subscribe();
        handlePan
            .pipe(flatMap((/**
         * @return {?}
         */
        () => touchend)), first(), withLatestFrom(pan), tap((/**
         * @return {?}
         */
        () => this.content.content.scrollByPoint(0, 1, 0))), tap((/**
         * @return {?}
         */
        () => (this.content.panning = false))), map((/**
         * @param {?} ev
         * @return {?}
         */
        ev => ev[1])), repeat(), takeUntil(this.$onDestroy))
            .subscribe((/**
         * @param {?} ev
         * @return {?}
         */
        ev => this._handlePanEnd(ev)));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!changes.state) {
            return;
        }
        this._setDrawerState(changes.state.currentValue);
        this.updateContent(changes.state.currentValue);
    }
    /**
     * @param {?} state
     * @return {?}
     */
    updateContent(state) {
        if (this.content) {
            this.content.updateState(state);
        }
    }
    /**
     * @private
     * @param {?} state
     * @return {?}
     */
    _setDrawerState(state) {
        this._renderer.setStyle(this._element.nativeElement, 'transition', this.transition);
        switch (state) {
            case DrawerState.Bottom:
                this.content.content.scrollToTop(0);
                this._setTranslateY(this._platform.height());
                break;
            case DrawerState.Docked:
                this.content.content.scrollToTop(0);
                this._setTranslateY(this._platform.height() - this.dockedHeight);
                break;
            default:
                this._setTranslateY(this.distanceTop);
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    _handlePanStart(event) {
        this._startPositionTop = this.getCurrentTop();
        this._startPositionOffset = event.touches[0].pageY;
    }
    /**
     * @return {?}
     */
    getCurrentTop() {
        return this._element.nativeElement.getBoundingClientRect().top;
    }
    /**
     * @private
     * @param {?} ev
     * @return {?}
     */
    _handlePanEnd(ev) {
        if (this.shouldBounce) {
            this._renderer.setStyle(this._element.nativeElement, 'transition', this.transition);
            switch (this.state) {
                case DrawerState.Docked:
                    this._handleDockedPanEnd(ev);
                    break;
                case DrawerState.Top:
                    this._handleTopPanEnd(ev);
                    break;
                default:
                    this._handleBottomPanEnd(ev);
            }
        }
        this.stateChange.emit(this.state);
    }
    /**
     * @private
     * @param {?} ev
     * @return {?}
     */
    _handleTopPanEnd(ev) {
        if (ev.distance > this.bounceThreshold) {
            if (this.state !== DrawerState.Docked) {
                this.state = DrawerState.Docked;
                this.fivDocked.emit(this);
            }
        }
        else {
            this._setTranslateY(this.distanceTop);
        }
    }
    /**
     * @private
     * @param {?} ev
     * @return {?}
     */
    _handleDockedPanEnd(ev) {
        /** @type {?} */
        const absDeltaY = Math.abs(ev.distance);
        if (absDeltaY > this.bounceThreshold && ev.distance < 0) {
            if (this.state !== DrawerState.Top) {
                this.state = DrawerState.Top;
                this.fivOpen.emit();
            }
        }
        else if (absDeltaY > this.bounceThreshold && ev.distance > 0) {
            if (this.state !== DrawerState.Bottom) {
                this.close();
            }
        }
        else {
            this._setTranslateY(this._platform.height() - this.dockedHeight);
        }
    }
    /**
     * @private
     * @param {?} ev
     * @return {?}
     */
    _handleBottomPanEnd(ev) {
        if (-ev.distance > this.bounceThreshold) {
            if (this.state !== DrawerState.Docked) {
                this.state = DrawerState.Docked;
                this.fivDocked.emit();
            }
        }
        else {
            this._setTranslateY('100vh');
        }
    }
    /**
     * @param {?} ev
     * @return {?}
     */
    calculatePanEvent(ev) {
        return {
            currentOffset: ev.touches[0].pageY,
            startOffset: this._startPositionOffset,
            startTop: this._startPositionTop,
            currentTop: this.getCurrentTop(),
            distance: ev.touches[0].pageY - this._startPositionOffset,
            touch: ev
        };
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    _handlePan(event) {
        this._renderer.setStyle(this._element.nativeElement, 'transition', 'none');
        if (event.currentTop >= 0 && event.currentTop <= this._platform.height()) {
            /** @type {?} */
            const newTop = this._startPositionTop + event.distance;
            if (newTop >= this.distanceTop) {
                this._setTranslateY(newTop);
            }
            else if (newTop <= this.distanceTop && this.content.panning) {
                this._setTranslateY(this.distanceTop);
                this.content.content.scrollToPoint(0, 0 - newTop, 0);
            }
            return event;
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _setTranslateY(value) {
        this.fivProgress.emit(1 - value / (this._platform.height() - this.dockedHeight));
        this._domCtrl.write((/**
         * @return {?}
         */
        () => {
            this._renderer.setStyle(this._element.nativeElement, 'transform', 'translateY(' + value + 'px)');
        }));
    }
    /**
     * @return {?}
     */
    open() {
        this.state = DrawerState.Top;
        this._setDrawerState(this.state);
        this.updateContent(this.state);
    }
    /**
     * @return {?}
     */
    close() {
        this.state = DrawerState.Bottom;
        this._setDrawerState(this.state);
        this.updateContent(this.state);
        this.fivClose.emit();
    }
    /**
     * @return {?}
     */
    dock() {
        this.state = DrawerState.Docked;
        this._setDrawerState(this.state);
        this.updateContent(this.state);
    }
}
FivBottomSheet.decorators = [
    { type: Component, args: [{
                selector: 'fiv-bottom-sheet',
                template: "<div class=\"fiv-bottom-drawer-scrollable-content\" no-bounce>\n  <ng-content></ng-content>\n</div>",
                styles: [":host{width:100%;height:100%;position:absolute;left:0;z-index:11!important;background-color:rgba(0,0,0,0);transform:translateY(100vh)}.fiv-bottom-drawer-scrollable-content{width:100%;height:100%}"]
            }] }
];
/** @nocollapse */
FivBottomSheet.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: DomController },
    { type: Platform }
];
FivBottomSheet.propDecorators = {
    dockedHeight: [{ type: Input }],
    shouldBounce: [{ type: Input }],
    distanceTop: [{ type: Input }],
    transition: [{ type: Input }],
    state: [{ type: Input }],
    bounceThreshold: [{ type: Input }],
    panThreshold: [{ type: Input }],
    panEnabled: [{ type: Input }],
    stateChange: [{ type: Output }],
    fivOpen: [{ type: Output }],
    fivDocked: [{ type: Output }],
    fivClose: [{ type: Output }],
    fivProgress: [{ type: Output }],
    content: [{ type: ContentChild, args: [FivBottomSheetContent, { static: true },] }]
};
if (false) {
    /** @type {?} */
    FivBottomSheet.prototype.dockedHeight;
    /** @type {?} */
    FivBottomSheet.prototype.shouldBounce;
    /** @type {?} */
    FivBottomSheet.prototype.distanceTop;
    /** @type {?} */
    FivBottomSheet.prototype.transition;
    /** @type {?} */
    FivBottomSheet.prototype.state;
    /** @type {?} */
    FivBottomSheet.prototype.bounceThreshold;
    /** @type {?} */
    FivBottomSheet.prototype.panThreshold;
    /** @type {?} */
    FivBottomSheet.prototype.panEnabled;
    /** @type {?} */
    FivBottomSheet.prototype.stateChange;
    /** @type {?} */
    FivBottomSheet.prototype.fivOpen;
    /** @type {?} */
    FivBottomSheet.prototype.fivDocked;
    /** @type {?} */
    FivBottomSheet.prototype.fivClose;
    /** @type {?} */
    FivBottomSheet.prototype.fivProgress;
    /** @type {?} */
    FivBottomSheet.prototype.content;
    /**
     * @type {?}
     * @private
     */
    FivBottomSheet.prototype._startPositionTop;
    /** @type {?} */
    FivBottomSheet.prototype._startPositionOffset;
    /** @type {?} */
    FivBottomSheet.prototype.scrollTop;
    /** @type {?} */
    FivBottomSheet.prototype.$onDestroy;
    /**
     * @type {?}
     * @private
     */
    FivBottomSheet.prototype._element;
    /**
     * @type {?}
     * @private
     */
    FivBottomSheet.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    FivBottomSheet.prototype._domCtrl;
    /**
     * @type {?}
     * @private
     */
    FivBottomSheet.prototype._platform;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bottom-sheet/bottom-sheet.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivBottomSheetModule {
}
FivBottomSheetModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivBottomSheet, FivBottomSheetContent],
                imports: [CommonModule, FivCenterModule, IonicModule],
                exports: [FivBottomSheet, FivBottomSheetContent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/collapsable-menu/collapsable-menu.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivCollapsableMenu {
    /**
     * @param {?} sanitizer
     * @param {?} menu
     * @param {?} split
     * @param {?} platform
     */
    constructor(sanitizer, menu, split, platform) {
        this.sanitizer = sanitizer;
        this.menu = menu;
        this.split = split;
        this.platform = platform;
        this.collapsed = false;
        this.hovering = false;
        this.splitVisible = false;
        this.hoverMenu = true;
        this.width = 64;
        this.minWidth = 270;
        this.maxWidth = this.platform.width() * 0.28;
        this.split.ionSplitPaneVisible
            .pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        event => event.detail.visible)))
            .subscribe((/**
         * @param {?} visible
         * @return {?}
         */
        visible => (this.splitVisible = visible)));
    }
    /**
     * @return {?}
     */
    get myStyle() {
        if (this.collapsed && this.splitVisible) {
            return (this.sanitizer
                // tslint:disable-next-line:max-line-length
                .bypassSecurityTrustStyle(`min-width: ${this.width}px; max-width: ${this.width}px; --border: 0; transition: all cubic-bezier(.55,0,.1,1) 200ms;`));
        }
        else {
            if (!this.splitVisible) {
                return (this.sanitizer
                    // tslint:disable-next-line:max-line-length
                    .bypassSecurityTrustStyle(`--border: 0; transition: all cubic-bezier(.55,0,.1,1) 200ms;`));
            }
            else {
                return (this.sanitizer
                    // tslint:disable-next-line:max-line-length
                    .bypassSecurityTrustStyle(`min-width: ${this.minWidth}px; max-width: ${this.maxWidth}px; --border: 0; transition: all cubic-bezier(.55,0,.1,1) 200ms;`));
            }
        }
    }
    /**
     * @return {?}
     */
    hover() {
        if (this.collapsed && !this.hovering && this.hoverMenu) {
            this.open();
            this.hovering = true;
        }
    }
    /**
     * @return {?}
     */
    blur() {
        if (!this.hoverMenu) {
            return;
        }
        if (!this.collapsed && this.hovering) {
            this.close();
        }
        this.hovering = false;
    }
    /**
     * @param {?} collapse
     * @return {?}
     */
    set fivCollapseMenu(collapse) {
        this.collapsed = collapse;
    }
    /**
     * @return {?}
     */
    toggleMenu() {
        if (this.hovering) {
            this.open();
            this.hovering = false;
            return;
        }
        this.collapsed = !this.collapsed;
    }
    /**
     * @return {?}
     */
    open() {
        this.collapsed = false;
    }
    /**
     * @return {?}
     */
    close() {
        this.collapsed = true;
    }
}
FivCollapsableMenu.decorators = [
    { type: Directive, args: [{
                selector: '[fivCollapseMenu]',
                exportAs: 'menuCollapse'
            },] }
];
/** @nocollapse */
FivCollapsableMenu.ctorParameters = () => [
    { type: DomSanitizer },
    { type: IonMenu, decorators: [{ type: Host }] },
    { type: IonSplitPane, decorators: [{ type: Host }, { type: Optional }] },
    { type: Platform }
];
FivCollapsableMenu.propDecorators = {
    hoverMenu: [{ type: Input }],
    width: [{ type: Input }],
    minWidth: [{ type: Input }],
    maxWidth: [{ type: Input }],
    myStyle: [{ type: HostBinding, args: ['style',] }],
    hover: [{ type: HostListener, args: ['mouseenter',] }],
    blur: [{ type: HostListener, args: ['mouseleave',] }],
    fivCollapseMenu: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FivCollapsableMenu.prototype.collapsed;
    /** @type {?} */
    FivCollapsableMenu.prototype.hovering;
    /** @type {?} */
    FivCollapsableMenu.prototype.splitVisible;
    /** @type {?} */
    FivCollapsableMenu.prototype.hoverMenu;
    /** @type {?} */
    FivCollapsableMenu.prototype.width;
    /** @type {?} */
    FivCollapsableMenu.prototype.minWidth;
    /** @type {?} */
    FivCollapsableMenu.prototype.maxWidth;
    /**
     * @type {?}
     * @private
     */
    FivCollapsableMenu.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    FivCollapsableMenu.prototype.menu;
    /**
     * @type {?}
     * @private
     */
    FivCollapsableMenu.prototype.split;
    /**
     * @type {?}
     * @private
     */
    FivCollapsableMenu.prototype.platform;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/collapsable-menu/collapsable-menu-button/collapsable-menu-button.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivCollapsableMenuButton {
    constructor() {
        this.icon = 'menu';
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    onClick() {
        this.menu.toggleMenu();
    }
}
FivCollapsableMenuButton.decorators = [
    { type: Component, args: [{
                selector: 'fiv-collapsable-menu-button',
                template: "<ion-button fivCenter (click)=\"onClick()\">\n  <fiv-icon slot=\"icon-only\" [name]=\"icon\" [color]=\"color\"></fiv-icon>\n</ion-button>",
                styles: [":host{display:block;padding-top:.2em}"]
            }] }
];
/** @nocollapse */
FivCollapsableMenuButton.ctorParameters = () => [];
FivCollapsableMenuButton.propDecorators = {
    menu: [{ type: Input }],
    icon: [{ type: Input }],
    color: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FivCollapsableMenuButton.prototype.menu;
    /** @type {?} */
    FivCollapsableMenuButton.prototype.icon;
    /** @type {?} */
    FivCollapsableMenuButton.prototype.color;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/collapsable-menu/collapsable-menu.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivCollapsableModule {
}
FivCollapsableModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivCollapsableMenu, FivCollapsableMenuButton],
                imports: [CommonModule, FivIconModule, IonicModule],
                exports: [FivCollapsableMenu, FivCollapsableMenuButton]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pull/pull.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivPull {
    /**
     * @param {?} element
     * @param {?} platform
     * @param {?} content
     */
    constructor(element, platform, content) {
        this.element = element;
        this.platform = platform;
        this.content = content;
        this.minPullHeight = 112;
        this.maxPullHeight = 168;
        this.enabled = true;
        this.enableScroll = false;
        this.direction = 'down';
        this.fivRefresh = new EventEmitter();
        this.fivCancel = new EventEmitter();
        this.fivPull = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * @param {?=} minPullHeight
     * @param {?=} maxPullHeight
     * @param {?=} direction
     * @return {?}
     */
    init(minPullHeight = 112, maxPullHeight = 168, direction = 'down') {
        this.minPullHeight = minPullHeight;
        this.maxPullHeight = maxPullHeight;
        this.direction = direction;
        this.content.scrollEvents = true;
        this.content.getScrollElement().then((/**
         * @param {?} s
         * @return {?}
         */
        s => {
            this.scrollY = s; // needed for scrollTop
            this.setupPanListener();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    setupPanListener() {
        /** @type {?} */
        const touchstart$ = fromEvent(this.element.nativeElement, 'touchstart', {
            passive: true
        });
        /** @type {?} */
        const touchmove$ = fromEvent(this.element.nativeElement, 'touchmove', {
            passive: true
        });
        /** @type {?} */
        const touchend$ = fromEvent(this.element.nativeElement, 'touchend', {
            passive: true
        });
        /** @type {?} */
        const touchcancel$ = fromEvent(this.element.nativeElement, 'touchcancel', {
            passive: true
        });
        /** @type {?} */
        const end$ = merge(touchend$, touchcancel$);
        /** @type {?} */
        const dragAtTop = touchstart$.pipe(filter((/**
         * @param {?} e
         * @return {?}
         */
        e => (this.scrollY.scrollTop === 0 || this.enableScroll) &&
            this.direction === 'down' &&
            this.enabled)));
        /** @type {?} */
        const dragAtBottom = touchstart$.pipe(filter((/**
         * @param {?} e
         * @return {?}
         */
        e => (this.scrollY.scrollTop ===
            this.scrollY.clientHeight - this.platform.height() ||
            this.enableScroll) &&
            this.direction === 'up' &&
            this.enabled)));
        /** @type {?} */
        const dragTopDown = dragAtTop.pipe(map((/**
         * @param {?} start
         * @return {?}
         */
        (start) => {
            /** @type {?} */
            const startY = start.touches[0].pageY;
            return touchmove$.pipe(map((/**
             * @param {?} move
             * @return {?}
             */
            (move) => {
                /** @type {?} */
                const currentY = move.touches[0].pageY;
                return {
                    startEvent: start,
                    moveEvent: move,
                    startY: startY,
                    currentY: currentY,
                    offset: currentY - startY
                };
            })), skipWhile((/**
             * @param {?} drag
             * @return {?}
             */
            drag => drag.offset < 0)), takeUntil(end$));
        })));
        dragTopDown.forEach((/**
         * @param {?} drags
         * @return {?}
         */
        drags => {
            drags.forEach((/**
             * @param {?} drag
             * @return {?}
             */
            drag => {
                /** @type {?} */
                const offset = drag.offset / 2;
                if (offset < 0 || offset > this.maxPullHeight) {
                    return;
                }
                if (offset <= this.maxPullHeight) {
                }
                this.fivPull.emit(offset / this.maxPullHeight);
            }));
            drags.pipe(takeLast(1)).subscribe((/**
             * @param {?} drag
             * @return {?}
             */
            drag => {
                /** @type {?} */
                const offset = drag.offset / 2;
                /** @type {?} */
                const refresh = offset >= this.minPullHeight;
                if (refresh) {
                    this.fivRefresh.emit(offset / this.maxPullHeight);
                }
                else {
                    this.fivCancel.emit(offset / this.maxPullHeight);
                }
            }));
        }));
        /** @type {?} */
        const dragBottomUp = dragAtBottom.pipe(map((/**
         * @param {?} start
         * @return {?}
         */
        (start) => {
            /** @type {?} */
            const startY = start.touches[0].pageY;
            return touchmove$.pipe(map((/**
             * @param {?} move
             * @return {?}
             */
            (move) => {
                /** @type {?} */
                const currentY = move.touches[0].pageY;
                return {
                    startEvent: start,
                    moveEvent: move,
                    startY: startY,
                    currentY: currentY,
                    offset: startY - currentY
                };
            })), skipWhile((/**
             * @param {?} drag
             * @return {?}
             */
            drag => drag.offset < 0)), takeUntil(end$));
        })));
        dragBottomUp.forEach((/**
         * @param {?} drags
         * @return {?}
         */
        drags => {
            drags.forEach((/**
             * @param {?} drag
             * @return {?}
             */
            drag => {
                /** @type {?} */
                const offset = drag.offset / 2;
                if (offset < 0 || offset > this.maxPullHeight) {
                    return;
                }
                this.fivPull.emit(offset / this.maxPullHeight);
            }));
            drags.pipe(takeLast(1)).subscribe((/**
             * @param {?} drag
             * @return {?}
             */
            drag => {
                /** @type {?} */
                const offset = drag.offset / 2;
                /** @type {?} */
                const refresh = offset >= this.minPullHeight;
                if (refresh) {
                    this.fivRefresh.emit(offset / this.maxPullHeight);
                }
                else {
                    this.fivCancel.emit(offset / this.maxPullHeight);
                }
            }));
        }));
    }
}
FivPull.decorators = [
    { type: Directive, args: [{
                selector: '[fivPull]'
            },] }
];
/** @nocollapse */
FivPull.ctorParameters = () => [
    { type: ElementRef },
    { type: Platform },
    { type: IonContent }
];
FivPull.propDecorators = {
    minPullHeight: [{ type: Input }],
    maxPullHeight: [{ type: Input }],
    enabled: [{ type: Input }],
    enableScroll: [{ type: Input }],
    direction: [{ type: Input }],
    fivRefresh: [{ type: Output }],
    fivCancel: [{ type: Output }],
    fivPull: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FivPull.prototype.minPullHeight;
    /** @type {?} */
    FivPull.prototype.maxPullHeight;
    /** @type {?} */
    FivPull.prototype.enabled;
    /** @type {?} */
    FivPull.prototype.enableScroll;
    /** @type {?} */
    FivPull.prototype.direction;
    /** @type {?} */
    FivPull.prototype.fivRefresh;
    /** @type {?} */
    FivPull.prototype.fivCancel;
    /** @type {?} */
    FivPull.prototype.fivPull;
    /** @type {?} */
    FivPull.prototype.scrollY;
    /**
     * @type {?}
     * @private
     */
    FivPull.prototype.element;
    /**
     * @type {?}
     * @private
     */
    FivPull.prototype.platform;
    /**
     * @type {?}
     * @private
     */
    FivPull.prototype.content;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pull/pull.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivPullModule {
}
FivPullModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivPull],
                imports: [CommonModule],
                exports: [FivPull]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/overlay/overlay.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivOverlayService {
    /**
     * @param {?} componentFactoryResolver
     * @param {?} rendererFactory
     * @param {?} appRef
     * @param {?} injector
     */
    constructor(componentFactoryResolver, rendererFactory, appRef, injector) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    /**
     * @template T
     * @param {?} view
     * @param {?} component
     * @param {?=} content
     * @return {?}
     */
    createOverlay(view, component, content) {
        /** @type {?} */
        const resolvedContent = this.resolveNgContent(view, content);
        /** @type {?} */
        const componentRef = this.componentFactoryResolver
            .resolveComponentFactory(component)
            .create(this.injector, resolvedContent);
        this.appRef.attachView(componentRef.hostView);
        /** @type {?} */
        const domElem = (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView)))
            .rootNodes[0]));
        document.body.appendChild(domElem);
        return componentRef;
    }
    /**
     * @private
     * @template T
     * @param {?} viewContainerRef
     * @param {?} content
     * @return {?}
     */
    resolveNgContent(viewContainerRef, content) {
        if (!content) {
            return;
        }
        if (content instanceof TemplateRef) {
            /** @type {?} */
            const viewRef = viewContainerRef.createEmbeddedView(content);
            return [viewRef.rootNodes];
        }
        /** @type {?} */
        const factory = this.componentFactoryResolver.resolveComponentFactory(content);
        /** @type {?} */
        const componentRef = factory.create(this.injector);
        return [[componentRef.location.nativeElement]];
    }
}
FivOverlayService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FivOverlayService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: RendererFactory2 },
    { type: ApplicationRef },
    { type: Injector }
];
/** @nocollapse */ FivOverlayService.ngInjectableDef = ɵɵdefineInjectable({ factory: function FivOverlayService_Factory() { return new FivOverlayService(ɵɵinject(ComponentFactoryResolver), ɵɵinject(RendererFactory2), ɵɵinject(ApplicationRef), ɵɵinject(INJECTOR)); }, token: FivOverlayService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    FivOverlayService.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FivOverlayService.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    FivOverlayService.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    FivOverlayService.prototype.injector;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/overlay/overlay-content/overlay-content.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivOverlayContent {
    /**
     * @param {?} sanitizer
     */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * @return {?}
     */
    get myStyle() {
        return this.priority
            ? this.sanitizer.bypassSecurityTrustStyle(`z-index: ${this.priority}`)
            : null;
    }
}
FivOverlayContent.decorators = [
    { type: Component, args: [{
                selector: 'fiv-overlay-content',
                template: "<ng-content #content></ng-content>",
                styles: [""]
            }] }
];
/** @nocollapse */
FivOverlayContent.ctorParameters = () => [
    { type: DomSanitizer }
];
FivOverlayContent.propDecorators = {
    myStyle: [{ type: HostBinding, args: ['style',] }]
};
if (false) {
    /** @type {?} */
    FivOverlayContent.prototype.priority;
    /**
     * @type {?}
     * @private
     */
    FivOverlayContent.prototype.sanitizer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/overlay/overlay.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivOverlay {
    /**
     * @param {?} viewContainer
     * @param {?} overlay
     */
    constructor(viewContainer, overlay) {
        this.viewContainer = viewContainer;
        this.overlay = overlay;
        this.afterInit = new EventEmitter();
        this._open = false;
    }
    /**
     * @param {?=} priority
     * @param {?=} data
     * @return {?}
     */
    show(priority, data) {
        if (!this.componentRef) {
            this.componentRef = this.overlay.createOverlay(this.viewContainer, FivOverlayContent, this.ngContent);
            this._open = true;
            this.componentRef.instance.priority = priority;
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.afterInit.emit(data);
            }), 0);
            return this.componentRef.instance;
        }
    }
    /**
     * @return {?}
     */
    hide() {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.componentRef = null;
            this._open = false;
        }
    }
    /**
     * @return {?}
     */
    get open() {
        return this._open;
    }
}
FivOverlay.decorators = [
    { type: Component, args: [{
                selector: 'fiv-overlay',
                template: "<ng-template #content>\n  <ng-content></ng-content>\n</ng-template>",
                styles: [""]
            }] }
];
/** @nocollapse */
FivOverlay.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: FivOverlayService }
];
FivOverlay.propDecorators = {
    ngContent: [{ type: ViewChild, args: ['content', { static: true },] }],
    priority: [{ type: Input }],
    afterInit: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    FivOverlay.prototype.componentRef;
    /** @type {?} */
    FivOverlay.prototype.ngContent;
    /** @type {?} */
    FivOverlay.prototype.priority;
    /** @type {?} */
    FivOverlay.prototype.afterInit;
    /**
     * @type {?}
     * @private
     */
    FivOverlay.prototype._open;
    /**
     * @type {?}
     * @private
     */
    FivOverlay.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    FivOverlay.prototype.overlay;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dialog/dialog.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivDialog {
    /**
     * @param {?} renderer
     * @param {?} domCtrl
     * @param {?} animation
     */
    constructor(renderer, domCtrl, animation) {
        this.renderer = renderer;
        this.domCtrl = domCtrl;
        this.animation = animation;
        this.verticalAlign = 'top';
        this.horizontalAlign = 'middle';
        this.shape = 'card';
        this.priority = 20001;
        this.backdrop = true;
        this.backdropDismiss = true;
        this.pullEnabled = true;
        // animation data
        this.inDuration = 160;
        this.outDuration = 120;
        this.outPosition = '-100%';
        this.toPosition = '0px';
        this.translate = '0px';
        this.fivClose = new EventEmitter();
        this.fivDurationOver = new EventEmitter();
        this.fivOpen = new EventEmitter();
        this.dialogState = 'out';
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    open() {
        this.overlay.show(this.priority);
        this.dialogState = this.verticalAlign;
        if (this.duration) {
            this.bar.shrinkIn(this.duration);
        }
    }
    /**
     * @return {?}
     */
    doneShrinking() {
        this.fivDurationOver.emit(this);
    }
    /**
     * @return {?}
     */
    close() {
        this.dialogState = 'out';
        this.bar.stopProgressAnimation();
    }
    /**
     * @return {?}
     */
    backdropClick() {
        if (this.backdropDismiss) {
            this.close();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    animationDone(event) {
        if (event.fromState !== 'void' && event.toState === 'out') {
            this.transformDialog(0);
            this.overlay.hide();
            this.fivClose.emit(this);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    backdropAnimDone(event) {
        if (event.fromState === 'out' && event.toState !== 'void') {
            this.fivOpen.emit(this);
        }
    }
    /**
     * @return {?}
     */
    onRefresh() {
        this.close();
    }
    /**
     * @return {?}
     */
    fivCancel() {
        this.resetDialog(this.currentPullProgress);
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    transformDialog(progress) {
        this.currentPullProgress = progress;
        this.domCtrl.write((/**
         * @return {?}
         */
        () => {
            if (this.verticalAlign === 'bottom') {
                this.renderer.setStyle(this.dialogRef.nativeElement, 'margin-bottom', `-${progress * 120}px`);
            }
            else if (this.verticalAlign === 'top') {
                this.renderer.setStyle(this.dialogRef.nativeElement, 'margin-top', `-${progress * 120}px`);
            }
            else if (this.verticalAlign === 'center') {
                this.renderer.setStyle(this.dialogRef.nativeElement, 'margin-top', `${progress * 120}px`);
            }
        }));
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    resetDialog(progress) {
        /** @type {?} */
        let reset;
        if (this.verticalAlign === 'bottom') {
            reset = this.animation.build([
                style({ 'margin-bottom': `-${progress * 120}px` }),
                animate('150ms', style({ 'margin-bottom': `0px` }))
            ]);
        }
        else if (this.verticalAlign === 'top') {
            reset = this.animation.build([
                style({ 'margin-top': `-${progress * 120}px` }),
                animate('150ms', style({ 'margin-top': `0px` }))
            ]);
        }
        else if (this.verticalAlign === 'center') {
            reset = this.animation.build([
                style({ 'margin-top': `${progress * 120}px` }),
                animate('150ms', style({ 'margin-top': `0px` }))
            ]);
        }
        /** @type {?} */
        const animation = reset.create(this.dialogRef.nativeElement);
        animation.play();
        animation.onDone((/**
         * @return {?}
         */
        () => {
            animation.destroy();
            this.transformDialog(0);
        }));
    }
}
FivDialog.decorators = [
    { type: Component, args: [{
                selector: 'fiv-dialog',
                template: "<fiv-overlay #overlay>\n  <ion-content no-bounce [direction]=\"verticalAlign === 'top' ? 'up' : 'down'\" fivPull [enabled]=\"pullEnabled\" [maxPullHeight]=\"168\" [minPullHeight]=\"120\" (fivPull)=\"transformDialog($event)\"\n  (fivRefresh)=\"onRefresh()\" (fivCancel)=\"fivCancel()\"  *ngIf=\"backdrop\" (@fade.done)=\"backdropAnimDone($event)\"\n    [@fade]=\"{value: dialogState, params: { opacity: 0, inDuration: '120ms' }}\" (click)=\"backdropClick()\" class=\"backdrop\">\n</ion-content>\n  <div #dialog [@fade]=\"{value: dialogState, params: { opacity: 0, inDuration: '120ms' }}\"\n  [@slide]=\"{value: dialogState, params: {top: outPosition, inDuration: inDuration + 'ms',outDuration: outDuration + 'ms', toPosition: toPosition, translate: translate,translateX: horizontalAlign === 'middle' ? 'translateX(-50%)' :  '' }}\"\n  (@slide.done)=\"animationDone($event)\" class=\"dialog\" [ngClass]=\"[verticalAlign, horizontalAlign, shape]\">\n    <ng-container>\n      <ng-container *ngTemplateOutlet=\"card\"></ng-container>\n    </ng-container>\n  </div>\n\n</fiv-overlay>\n\n<ng-template #card>\n  <ion-card>\n    <fiv-loading-progress-bar [verticalAlign]=\"verticalAlign === 'top' ? 'bottom' : 'top'\"\n      (fivDoneShrinking)=\"doneShrinking()\" #bar></fiv-loading-progress-bar>\n    <ng-content></ng-content>\n  </ion-card>\n</ng-template>",
                animations: [
                    trigger('slide', [
                        transition('out => top', [
                            style({ top: '0', transform: 'translateY(-100%) {{translateX}}' }),
                            animate('220ms ease-out')
                        ]),
                        transition('out => center', [
                            style({
                                top: '50%',
                                transform: 'translateY(-50%) {{translateX}} scale(0)',
                                opacity: 0
                            }),
                            animate('220ms ease-out', style({
                                top: '50%',
                                transform: 'translateY(-50%) {{translateX}} scale(1)',
                                opacity: 1
                            }))
                        ]),
                        transition('out => bottom', [
                            style({ bottom: '0', transform: 'translateY(100%) {{translateX}}' }),
                            animate('220ms ease-out')
                        ]),
                        transition('top => out', [
                            style({ top: '0', transform: '*' }),
                            animate('140ms ease-in', style({ top: '0', transform: 'translateY(-100%) {{translateX}}' }))
                        ]),
                        transition('center => out', [
                            style({
                                top: '50%',
                                transform: '*',
                                opacity: 1
                            }),
                            animate('140ms ease-in', style({
                                top: '50%',
                                transform: 'translateY(-50%) {{translateX}} scale(0)',
                                opacity: 0
                            }))
                        ]),
                        transition('bottom => out', [
                            style({ bottom: '0', transform: '*' }),
                            animate('140ms ease-in', style({ bottom: '0', transform: 'translateY(100%) {{translateX}}' }))
                        ])
                        // state('bottom', style({ bottom: '0', transform: '*' })),
                        // state('top', style({ top: '0', transform: '*' })),
                        // state('center', style({ top: '50%', transform: 'translateY(-50%) {{translateX}}' }))
                    ]),
                    trigger('fade', [
                        transition('out => *', [
                            style({ opacity: '{{opacity}}' }),
                            animate('{{inDuration}} ease-out', style({ opacity: '1' }))
                        ], { params: { opacity: 0, inDuration: '250ms' } }),
                        transition('* => out', [
                            style({ opacity: '1' }),
                            animate('{{outDuration}} ease-in', style({ opacity: '0' }))
                        ], { params: { opacity: 0, outDuration: '200ms' } }),
                        state('out', style({ opacity: '0' }))
                    ])
                ],
                styles: ["ion-grid{--ion-grid-padding:0;--ion-grid-column-padding:0}.dialog{--min-width:340px;position:absolute;min-width:var(--min-width)}@media (max-width:600px){.dialog{--min-width:100%}}.dialog.fill{background:var(--ion-item-background);box-shadow:0 4px 16px rgba(0,0,0,.12)}.dialog.fill .sc-ion-card-ios-h,.dialog.fill .sc-ion-card-md-h{margin-left:unset;margin-right:unset;-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:0;margin-inline-end:0;box-shadow:none;margin-top:0;margin-bottom:0}.dialog.fill.bottom .sc-ion-card-ios-h,.dialog.fill.bottom .sc-ion-card-md-h,.dialog.fill.top .sc-ion-card-ios-h,.dialog.fill.top .sc-ion-card-md-h{border-radius:0}.dialog.top.left{padding-top:env(safe-area-inset-top);top:0;left:0}.dialog.top.right{padding-top:env(safe-area-inset-top);top:0;right:0}.dialog.top.middle{padding-top:env(safe-area-inset-top);top:0;left:50%;transform:translateX(-50%)}.dialog.center.middle{padding-top:env(safe-area-inset-top);top:50%;left:50%;transform:translate(-50%,-50%)}.dialog.center.left{top:50%;padding-top:env(safe-area-inset-top);left:0;transform:translateY(-50%)}.dialog.center.right{right:0;top:50%;padding-top:env(safe-area-inset-top);transform:translateY(-50%)}.dialog.bottom.left{bottom:0;left:0;padding-bottom:env(safe-area-inset-bottom)}.dialog.bottom.right{bottom:0;right:0;padding-bottom:env(safe-area-inset-bottom)}.dialog.bottom.middle{bottom:0;left:50%;transform:translateX(-50%);padding-bottom:env(safe-area-inset-bottom)}.backdrop{width:100%;height:100%;--background:rgba(0, 0, 0, 0.2);position:absolute}"]
            }] }
];
/** @nocollapse */
FivDialog.ctorParameters = () => [
    { type: Renderer2 },
    { type: DomController },
    { type: AnimationBuilder }
];
FivDialog.propDecorators = {
    verticalAlign: [{ type: Input }],
    horizontalAlign: [{ type: Input }],
    shape: [{ type: Input }],
    priority: [{ type: Input }],
    backdrop: [{ type: Input }],
    backdropDismiss: [{ type: Input }],
    pullEnabled: [{ type: Input }],
    duration: [{ type: Input }],
    inDuration: [{ type: Input }],
    outDuration: [{ type: Input }],
    fivClose: [{ type: Output }],
    fivDurationOver: [{ type: Output }],
    fivOpen: [{ type: Output }],
    overlay: [{ type: ViewChild, args: [FivOverlay, { static: false },] }],
    bar: [{ type: ViewChild, args: [FivLoadingProgressBar, { static: false },] }],
    dialogRef: [{ type: ViewChild, args: ['dialog', { static: false },] }]
};
if (false) {
    /** @type {?} */
    FivDialog.prototype.verticalAlign;
    /** @type {?} */
    FivDialog.prototype.horizontalAlign;
    /** @type {?} */
    FivDialog.prototype.shape;
    /** @type {?} */
    FivDialog.prototype.priority;
    /** @type {?} */
    FivDialog.prototype.backdrop;
    /** @type {?} */
    FivDialog.prototype.backdropDismiss;
    /** @type {?} */
    FivDialog.prototype.pullEnabled;
    /** @type {?} */
    FivDialog.prototype.duration;
    /** @type {?} */
    FivDialog.prototype.inDuration;
    /** @type {?} */
    FivDialog.prototype.outDuration;
    /** @type {?} */
    FivDialog.prototype.outPosition;
    /** @type {?} */
    FivDialog.prototype.toPosition;
    /** @type {?} */
    FivDialog.prototype.translate;
    /** @type {?} */
    FivDialog.prototype.fivClose;
    /** @type {?} */
    FivDialog.prototype.fivDurationOver;
    /** @type {?} */
    FivDialog.prototype.fivOpen;
    /** @type {?} */
    FivDialog.prototype.overlay;
    /** @type {?} */
    FivDialog.prototype.bar;
    /** @type {?} */
    FivDialog.prototype.dialogRef;
    /** @type {?} */
    FivDialog.prototype.dialogState;
    /** @type {?} */
    FivDialog.prototype.currentPullProgress;
    /**
     * @type {?}
     * @private
     */
    FivDialog.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FivDialog.prototype.domCtrl;
    /**
     * @type {?}
     * @private
     */
    FivDialog.prototype.animation;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dialog/dialog.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function DialogOptions() { }
if (false) {
    /** @type {?} */
    DialogOptions.prototype.verticalAlign;
    /** @type {?} */
    DialogOptions.prototype.horizontalAlign;
    /** @type {?} */
    DialogOptions.prototype.shape;
    /** @type {?} */
    DialogOptions.prototype.backdrop;
    /** @type {?} */
    DialogOptions.prototype.duration;
}
class FivDialogService {
    /**
     * @param {?} overlay
     */
    constructor(overlay) {
        this.overlay = overlay;
    }
    /**
     * @param {?} viewContainerRef
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    openDialog(viewContainerRef, content, options) {
        /** @type {?} */
        const c = this.overlay.createOverlay(viewContainerRef, FivDialog, content);
        c.instance.verticalAlign = options ? options.verticalAlign : 'top';
        c.instance.verticalAlign = options ? options.verticalAlign : 'center';
        c.instance.backdrop = options ? options.backdrop : true;
        c.instance.duration = options ? options.duration : 0;
        c.instance.shape = options ? options.shape : 'card';
        c.instance.open();
        return c;
    }
}
FivDialogService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FivDialogService.ctorParameters = () => [
    { type: FivOverlayService }
];
/** @nocollapse */ FivDialogService.ngInjectableDef = ɵɵdefineInjectable({ factory: function FivDialogService_Factory() { return new FivDialogService(ɵɵinject(FivOverlayService)); }, token: FivDialogService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    FivDialogService.prototype.overlay;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/overlay/overlay.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivOverlayModule {
}
FivOverlayModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivOverlay, FivOverlayContent],
                imports: [CommonModule],
                exports: [FivOverlay, FivOverlayContent],
                entryComponents: [FivOverlayContent],
                providers: [FivOverlayService]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/dialog/dialog.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivDialogModule {
}
FivDialogModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivDialog],
                imports: [
                    CommonModule,
                    FivLoadingProgressBarModule,
                    FivOverlayModule,
                    IonicModule,
                    FivPullModule
                ],
                exports: [FivDialog],
                entryComponents: [FivDialog],
                providers: [FivDialogService]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/editable-label/editable-label.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const CUSTOM_EDITIABLE_LABEL_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => FivEditableLabel)),
    multi: true
};
class FivEditableLabel {
    constructor() {
        this.type = 'label';
        this.disabled = false;
        this.blur = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get editing() {
        return this._editing;
    }
    /**
     * @param {?} edit
     * @return {?}
     */
    set editing(edit) {
        this._editing = edit;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        timer(0).subscribe((/**
         * @return {?}
         */
        () => (this.internalValue = this.value)));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set internalValue(value) {
        if (value !== this._value) {
            this._value = value;
            if (this.onChangeCallback) {
                this.onChangeCallback(this._value);
            }
        }
    }
    /**
     * @return {?}
     */
    get internalValue() {
        return this._value;
    }
    /**
     * @return {?}
     */
    edit() {
        this.editing = true;
    }
    /**
     * @return {?}
     */
    stopEdit() {
        this.editing = false;
    }
    /**
     * @return {?}
     */
    onEscapeClick() {
        this.internalValue = this.value;
        this.stopEdit();
    }
    /**
     * @return {?}
     */
    onEnterClick() {
        this.value = this.internalValue;
        this.stopEdit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== undefined && value !== this._value) {
            this._value = value;
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.blur.emit();
        this.stopEdit();
        if (this.onTouchedCallback) {
            this.onTouchedCallback();
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    titleAnimDone(event) {
        if (event.toState === 'void') {
            this.input.setFocus();
        }
    }
}
FivEditableLabel.decorators = [
    { type: Component, args: [{
                selector: 'fiv-editable-label',
                template: "<!-- TODO if value is empty label or title can not be clicked, show placeholder?! -->\n<ion-title *ngIf=\"type === 'title' && !editing\" (click)=\"edit()\" (@titleAnim.done)=\"titleAnimDone($event)\" [@titleAnim]>\n    {{value}}</ion-title>\n<ion-label *ngIf=\"type === 'label' && !editing\" class=\"label\" (click)=\"edit()\" (@titleAnim.done)=\"titleAnimDone($event)\" [@titleAnim]>\n    {{value}}</ion-label>\n<ion-input *ngIf=\"editing\" [(ngModel)]=\"internalValue\" (blur)=\"onBlur()\" (keyup.enter)=\"onEnterClick()\"\n    (keyup.escape)=\"onEscapeClick()\" #input [@titleAnim] [ngClass]=\"{'title-input': type === 'title'}\">\n</ion-input>",
                animations: [
                    trigger('titleAnim', [
                        transition('void => *', [
                            style({ opacity: '0', transform: 'translateY(-20%)' }),
                            animate('175ms ease-out', style({ opacity: '1', transform: 'translateY(0)' }))
                        ])
                    ])
                ],
                providers: [CUSTOM_EDITIABLE_LABEL_CONTROL_VALUE_ACCESSOR],
                styles: [":host{width:100%}.label{max-width:100%}:host *{pointer-events:auto}:host(.editable-label-disabled){pointer-events:none}.title-input{font-size:20px;font-weight:500;color:var(--color)}"]
            }] }
];
/** @nocollapse */
FivEditableLabel.ctorParameters = () => [];
FivEditableLabel.propDecorators = {
    editing: [{ type: Input }],
    value: [{ type: Input }],
    type: [{ type: Input }],
    disabled: [{ type: HostBinding, args: ['class.editable-label-disabled',] }, { type: Input }],
    blur: [{ type: Output }],
    input: [{ type: ViewChild, args: ['input', { static: false },] }]
};
if (false) {
    /** @type {?} */
    FivEditableLabel.prototype.value;
    /** @type {?} */
    FivEditableLabel.prototype.type;
    /** @type {?} */
    FivEditableLabel.prototype.disabled;
    /** @type {?} */
    FivEditableLabel.prototype.blur;
    /** @type {?} */
    FivEditableLabel.prototype.input;
    /**
     * @type {?}
     * @private
     */
    FivEditableLabel.prototype._editing;
    /**
     * @type {?}
     * @private
     */
    FivEditableLabel.prototype._value;
    /**
     * @type {?}
     * @private
     */
    FivEditableLabel.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    FivEditableLabel.prototype.onChangeCallback;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/editable-label/editable-label.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivEditableLabelModule {
}
FivEditableLabelModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivEditableLabel],
                imports: [CommonModule, FormsModule, IonicModule],
                exports: [FivEditableLabel]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/expandable/expandable.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivExpandable {
    /**
     * @param {?} change
     */
    constructor(change) {
        this.change = change;
        this.isOpen = false;
        this.fivWillOpen = new EventEmitter();
        this.fivDidOpen = new EventEmitter();
        this.fivWillClose = new EventEmitter();
        this.fivDidClose = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    open() {
        this.fivWillOpen.emit(this);
        this.isOpen = true;
        this.change.detectChanges();
    }
    /**
     * @return {?}
     */
    toggle() {
        if (this.isOpen === false) {
            this.open();
        }
        else {
            this.close();
        }
    }
    /**
     * @param {?=} param
     * @return {?}
     */
    close(param) {
        this.param = param;
        this.fivWillClose.emit(this);
        this.isOpen = false;
        this.change.detectChanges();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onAnimationEnd(event) {
        if (event.fromState === 'closed') {
            this.fivDidOpen.emit(this);
        }
        else if (event.fromState === 'open') {
            this.fivDidClose.emit({ expandable: this, param: this.param });
            this.param = null;
        }
    }
}
FivExpandable.decorators = [
    { type: Component, args: [{
                selector: 'fiv-expandable',
                template: "<div>\n  <ng-content select=\"[header]\"></ng-content>\n  <div [@listAnim]=\"{value: isOpen ? 'open' : 'closed', params: timingFunction ? {time: timingFunction} : {}}\" (@listAnim.done)=\"onAnimationEnd($event)\"\n    style=\"overflow: hidden\">\n    <ng-content select=\"[content]\"></ng-content>\n  </div>\n</div>",
                animations: [
                    trigger('listAnim', [
                        state('open', style({ height: '*', opacity: 1 })),
                        state('closed', style({ height: '0', opacity: 0 })),
                        transition('closed => open', [
                            animate('{{time}}', keyframes([
                                style({ height: '0', opacity: 0, offset: 0 }),
                                style({ height: '*', opacity: 0.1, offset: 0.8 }),
                                style({ height: '*', opacity: 1, offset: 1 })
                            ]))
                        ], { params: { time: '270ms ease-out' } }),
                        transition('open => closed', [
                            animate('{{time}}', keyframes([
                                style({ height: '*', opacity: 1, offset: 0 }),
                                style({ height: '*', opacity: 0.1, offset: 0.2 }),
                                style({ height: '0', opacity: 0, offset: 1 })
                            ]))
                        ], { params: { time: '220ms ease-out' } })
                    ])
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
FivExpandable.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
FivExpandable.propDecorators = {
    isOpen: [{ type: Input }],
    timingFunction: [{ type: Input }],
    fivWillOpen: [{ type: Output }],
    fivDidOpen: [{ type: Output }],
    fivWillClose: [{ type: Output }],
    fivDidClose: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FivExpandable.prototype.isOpen;
    /** @type {?} */
    FivExpandable.prototype.timingFunction;
    /** @type {?} */
    FivExpandable.prototype.fivWillOpen;
    /** @type {?} */
    FivExpandable.prototype.fivDidOpen;
    /** @type {?} */
    FivExpandable.prototype.fivWillClose;
    /** @type {?} */
    FivExpandable.prototype.fivDidClose;
    /** @type {?} */
    FivExpandable.prototype.param;
    /**
     * @type {?}
     * @private
     */
    FivExpandable.prototype.change;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/expandable/expandable-indicator/expandable-indicator.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivExpandableIndicator {
    /**
     * @param {?} expandable
     */
    constructor(expandable) {
        this.expandable = expandable;
        this.icon = 'chevron-down';
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
}
FivExpandableIndicator.decorators = [
    { type: Component, args: [{
                selector: 'fiv-expandable-indicator',
                template: "<ion-icon class=\"indicator\" [ngClass]=\"{'rotate': expandable.isOpen}\" [name]=\"icon\"></ion-icon>",
                styles: [":host{display:flex}.indicator{transition:125ms}.indicator.rotate{transform:rotateZ(180deg)}"]
            }] }
];
/** @nocollapse */
FivExpandableIndicator.ctorParameters = () => [
    { type: FivExpandable }
];
FivExpandableIndicator.propDecorators = {
    icon: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FivExpandableIndicator.prototype.icon;
    /** @type {?} */
    FivExpandableIndicator.prototype.expandable;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/expandable/expandable.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivExpandableModule {
}
FivExpandableModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivExpandable, FivExpandableIndicator],
                imports: [CommonModule, IonicModule],
                exports: [FivExpandable, FivExpandableIndicator]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/feature-discovery/feature-discovery.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivFeatureDiscovery {
    /**
     * @param {?} renderer
     * @param {?} platform
     */
    constructor(renderer, platform) {
        this.renderer = renderer;
        this.platform = platform;
        this.top = 0;
        this.left = 0;
        this.width = 420;
        this.height = 420;
        this.innerDiameter = 0;
        this.featurePadding = 0;
        this.contentTop = 0;
        this.contentLeft = 0;
        this.contentWidth = 0;
        this.contentHeight = 0;
        this.contentOffset = 0;
        this.animationState = 'hidden';
        this.pulse = 'small';
        this.fivClick = new EventEmitter();
        this.fivBackdropClick = new EventEmitter();
        this.fivClose = new EventEmitter();
        this.fivOpen = new EventEmitter();
        this.fivAnimation = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get _classes() {
        return this.classes.join(' ');
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngAfterContentInit() { }
    /**
     * @param {?} bounds
     * @return {?}
     */
    setBounds(bounds) {
        this.bounds = bounds;
        this.innerDiameter =
            bounds.height > bounds.width ? bounds.height : bounds.width;
        this.top = bounds.top + bounds.height / 2 - this.height / 2;
        this.left = bounds.left + bounds.width / 2 - this.width / 2;
        this.calculateContentBounds();
        if (!this.icon) {
            /** @type {?} */
            const gradient = `-webkit-radial-gradient(transparent ${this
                .innerDiameter /
                2 +
                5}px, var(--fiv-color-feature) ${this.innerDiameter / 2 + 5}px)`;
            /** @type {?} */
            const pulseGradient = `-webkit-radial-gradient(transparent ${this
                .innerDiameter /
                2 +
                5}px, var(--fiv-color-pulse) ${this.innerDiameter / 2 + 5}px)`;
            this.renderer.setStyle(this.circle.nativeElement, 'background', gradient);
            this.renderer.setStyle(this.innerPulse.nativeElement, 'background', pulseGradient);
            this.renderer.setStyle(this.outerPulse.nativeElement, 'background', pulseGradient);
        }
    }
    /**
     * @return {?}
     */
    calculateContentBounds() {
        /** @type {?} */
        const absoluteCenter = {
            x: this.platform.width() / 2,
            y: this.platform.height() / 2
        };
        /** @type {?} */
        const center = {
            x: this.left + this.width / 2,
            y: this.top + this.width / 2
        };
        /** @type {?} */
        const rectWidth = Math.sqrt(Math.pow(this.width, 2) / 2);
        /** @type {?} */
        const isTop = center.y < absoluteCenter.y;
        /** @type {?} */
        const isLeft = center.x < absoluteCenter.x;
        /** @type {?} */
        const innerRadius = this.innerDiameter / 2;
        /** @type {?} */
        const padding = this.featurePadding / 2;
        /** @type {?} */
        let contentRight = 0;
        /** @type {?} */
        let contentBottom = 0;
        if (isLeft) {
            this.contentLeft = center.x - innerRadius;
            contentRight = Math.min(center.x + rectWidth / 2 + this.contentOffset, this.platform.width());
        }
        else {
            this.contentLeft = Math.max(center.x - rectWidth / 2 - this.contentOffset, 0);
            contentRight = center.x + innerRadius;
        }
        if (isTop) {
            this.contentTop = center.y + innerRadius + padding;
            contentBottom = center.y + rectWidth / 2 + -1 * this.contentOffset;
        }
        else {
            this.contentTop = center.y - rectWidth / 2 + this.contentOffset;
            contentBottom = center.y - innerRadius - padding;
        }
        this.contentWidth = Math.abs(this.contentLeft - contentRight);
        this.contentHeight = Math.abs(this.contentTop - contentBottom);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleCircleAnimation(event) {
        this.fivAnimation.emit(event);
        if (event.toState === 'visible') {
            this.fivOpen.emit();
        }
        if (event.fromState === 'visible' && event.toState === 'hidden') {
            this.fivClose.emit();
        }
        if (event.fromState === 'visible' && event.toState === 'execute') {
            this.fivClose.emit();
        }
    }
    /**
     * @return {?}
     */
    show() {
        this.animationState = 'visible';
    }
    /**
     * @return {?}
     */
    hide() {
        this.animationState = 'hidden';
    }
    /**
     * @return {?}
     */
    featureClick() {
        this.animationState = 'execute';
    }
    /**
     * @param {?} icon
     * @return {?}
     */
    setIcon(icon) {
        if (icon) {
            this.icon = icon.name;
        }
    }
}
FivFeatureDiscovery.decorators = [
    { type: Component, args: [{
                selector: 'fiv-feature-discovery',
                template: "<div class=\"backdrop\" (click)=\"fivBackdropClick.emit()\"></div>\n<div [@scale]=\"animationState\" (@scale.done)=\"handleCircleAnimation($event)\" #circle class=\"circle\"\n  [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\" [style.top]=\"top + 'px'\" [style.left]=\"left + 'px'\">\n  <div #pOuter class=\"feature center pulse\" [style.height]=\"(innerDiameter + featurePadding) + 'px'\"\n    [style.width]=\"(innerDiameter + featurePadding) + 'px'\">\n  </div>\n  <div #pInner class=\"feature center inner  ion-activatable\" (click)=\"fivClick.emit($event)\"\n    [style.height]=\"(innerDiameter + (icon ? featurePadding : 0)) + 'px'\"\n    [style.width]=\"(innerDiameter + (icon ? featurePadding : 0)) + 'px'\">\n    <fiv-icon class=\"center\" *ngIf=\"icon\" [name]=\"icon\"></fiv-icon>\n    <ion-ripple-effect type=\"unbounded\"></ion-ripple-effect>\n  </div>\n</div>\n<div class=\"content\" *ngIf=\"animationState === 'visible'\" [@contentAnim] [style.width]=\"contentWidth + 'px'\"\n  [style.height]=\"contentHeight + 'px'\" [style.top]=\"contentTop + 'px'\" [style.left]=\"contentLeft + 'px'\">\n  <ng-content></ng-content>\n</div>",
                animations: [
                    trigger('scale', [
                        transition('* => visible', [
                            style({ transform: 'scale(0)', opacity: '0' }),
                            animate('240ms ease-out', style({ transform: 'scale(1)', opacity: '1' }))
                        ]),
                        transition('visible => hidden', [
                            style({ transform: 'scale(1)', opacity: '1' }),
                            animate('215ms ease-in', style({ transform: 'scale(0)', opacity: '0' }))
                        ]),
                        transition('visible => execute', [
                            style({ transform: 'scale(1)', opacity: '1' }),
                            animate('215ms 0.15s ease-in', style({ transform: 'scale(1.4)', opacity: '0' }))
                        ])
                    ]),
                    trigger('contentAnim', [
                        transition('void => *', [
                            style({ opacity: '0' }),
                            animate('100ms 240ms ease-out', style({ opacity: '1' }))
                        ])
                    ])
                ],
                styles: [":host{display:block;height:100vh;width:100vw;position:absolute;--fiv-color-feature:rgba(56, 128, 255, 0.97);--fiv-color-pulse:var(--ion-color-light);--fiv-icon-color:var(--fiv-color-feature, var(--ion-color-primary))}.backdrop{display:block;height:100vh;width:100vw;position:absolute}.circle{position:absolute;border-radius:100%;background:var(--fiv-color-feature);box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.feature{border-radius:100%;background:var(--fiv-color-pulse)}.feature.center.pulse{-webkit-animation:1.4s infinite feature-pulse;animation:1.4s infinite feature-pulse}@-webkit-keyframes feature-pulse{0%{transform:scale(1) translate(-50%,-50%);border-radius:100%;box-shadow:0 0 0 0 rgba(0,0,0,.24)}50%{transform:scale(1.1) translate(-45%,-45%)}100%{transform:scale(1) translate(-50%,-50%);border-radius:100%;box-shadow:0 0 0 28px transparent}}@keyframes feature-pulse{0%{transform:scale(1) translate(-50%,-50%);border-radius:100%;box-shadow:0 0 0 0 rgba(0,0,0,.24)}50%{transform:scale(1.1) translate(-45%,-45%)}100%{transform:scale(1) translate(-50%,-50%);border-radius:100%;box-shadow:0 0 0 28px transparent}}.content{position:absolute}.center{position:absolute;left:50%;top:50%;transform:translate(-50%,-50%)}"]
            }] }
];
/** @nocollapse */
FivFeatureDiscovery.ctorParameters = () => [
    { type: Renderer2 },
    { type: Platform }
];
FivFeatureDiscovery.propDecorators = {
    circle: [{ type: ViewChild, args: ['circle', { static: true },] }],
    rect: [{ type: ViewChild, args: ['rect', { static: true },] }],
    innerPulse: [{ type: ViewChild, args: ['pInner', { static: true, read: ElementRef },] }],
    outerPulse: [{ type: ViewChild, args: ['pOuter', { static: true },] }],
    fivClick: [{ type: Output }],
    fivBackdropClick: [{ type: Output }],
    fivClose: [{ type: Output }],
    fivOpen: [{ type: Output }],
    fivAnimation: [{ type: Output }],
    _classes: [{ type: HostBinding, args: ['class',] }]
};
if (false) {
    /** @type {?} */
    FivFeatureDiscovery.prototype.top;
    /** @type {?} */
    FivFeatureDiscovery.prototype.left;
    /** @type {?} */
    FivFeatureDiscovery.prototype.width;
    /** @type {?} */
    FivFeatureDiscovery.prototype.height;
    /** @type {?} */
    FivFeatureDiscovery.prototype.innerDiameter;
    /** @type {?} */
    FivFeatureDiscovery.prototype.featurePadding;
    /** @type {?} */
    FivFeatureDiscovery.prototype.contentTop;
    /** @type {?} */
    FivFeatureDiscovery.prototype.contentLeft;
    /** @type {?} */
    FivFeatureDiscovery.prototype.contentWidth;
    /** @type {?} */
    FivFeatureDiscovery.prototype.contentHeight;
    /** @type {?} */
    FivFeatureDiscovery.prototype.contentOffset;
    /** @type {?} */
    FivFeatureDiscovery.prototype.bounds;
    /** @type {?} */
    FivFeatureDiscovery.prototype.icon;
    /** @type {?} */
    FivFeatureDiscovery.prototype.classes;
    /** @type {?} */
    FivFeatureDiscovery.prototype.circle;
    /** @type {?} */
    FivFeatureDiscovery.prototype.rect;
    /** @type {?} */
    FivFeatureDiscovery.prototype.innerPulse;
    /** @type {?} */
    FivFeatureDiscovery.prototype.outerPulse;
    /** @type {?} */
    FivFeatureDiscovery.prototype.animationState;
    /** @type {?} */
    FivFeatureDiscovery.prototype.pulse;
    /** @type {?} */
    FivFeatureDiscovery.prototype.fivClick;
    /** @type {?} */
    FivFeatureDiscovery.prototype.fivBackdropClick;
    /** @type {?} */
    FivFeatureDiscovery.prototype.fivClose;
    /** @type {?} */
    FivFeatureDiscovery.prototype.fivOpen;
    /** @type {?} */
    FivFeatureDiscovery.prototype.fivAnimation;
    /**
     * @type {?}
     * @private
     */
    FivFeatureDiscovery.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FivFeatureDiscovery.prototype.platform;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/feature-discovery/feature.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivFeature {
    /**
     * @param {?} host
     * @param {?} viewContainer
     * @param {?} fivIcon
     * @param {?} ionIcon
     * @param {?} overlay
     * @param {?} platform
     */
    constructor(host, viewContainer, fivIcon, ionIcon, overlay, platform) {
        this.host = host;
        this.viewContainer = viewContainer;
        this.fivIcon = fivIcon;
        this.ionIcon = ionIcon;
        this.overlay = overlay;
        this.platform = platform;
        this.maxDiameter = 1080;
        this.diameter = Math.min(this.platform.width() * 2, this.maxDiameter);
        this.contentOffset = 20;
        this.featurePadding = 20;
        this.clickEnabled = true;
        this.classes = [];
        this.fivFeatureClick = new EventEmitter();
        this.fivOpen = new EventEmitter();
        this.fivWillOpen = new EventEmitter();
        this.fivClose = new EventEmitter();
        this.fivWillClose = new EventEmitter();
        this.isOpen = false;
    }
    /**
     * @private
     * @param {?} nativeElement
     * @return {?}
     */
    getBounds(nativeElement) {
        /** @type {?} */
        const bounds = nativeElement.getBoundingClientRect();
        return {
            top: bounds.top,
            left: bounds.left,
            height: nativeElement.clientHeight,
            width: nativeElement.clientWidth
        };
    }
    /**
     * @return {?}
     */
    show() {
        /** @type {?} */
        const icon = this.ionIcon || this.fivIcon;
        /** @type {?} */
        const bounds = icon
            ? this.getBounds(this.host.nativeElement.parentElement)
            : this.getBounds(this.host.nativeElement);
        this.overlayRef = this.overlay.createOverlay(this.viewContainer, FivFeatureDiscovery, this.fivFeature);
        /** @type {?} */
        const featureOverlay = this.overlayRef.instance;
        featureOverlay.height = this.diameter;
        featureOverlay.width = this.diameter;
        featureOverlay.featurePadding = this.featurePadding;
        featureOverlay.contentOffset = this.contentOffset;
        featureOverlay.classes = this.classes;
        featureOverlay.setIcon(icon);
        featureOverlay.setBounds(bounds);
        featureOverlay.show();
        this.fivWillOpen.emit();
        featureOverlay.fivAnimation
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        event => event.toState === 'visible')), first())
            .subscribe((/**
         * @return {?}
         */
        () => {
            this.didOpen();
        }));
        featureOverlay.fivClick.pipe(first()).subscribe((/**
         * @param {?} ev
         * @return {?}
         */
        ev => {
            this.featureClick(ev);
        }));
        featureOverlay.fivBackdropClick.pipe(first()).subscribe((/**
         * @return {?}
         */
        () => {
            this.hide();
        }));
    }
    /**
     * @return {?}
     */
    hide() {
        this.fivWillClose.emit();
        if (this.overlayRef) {
            this.overlayRef.instance.hide();
            this.overlayRef.instance.fivClose.pipe(first()).subscribe((/**
             * @return {?}
             */
            () => {
                this.fivClose.emit();
                this.isOpen = false;
                this.overlayRef.destroy();
                this.overlayRef = null;
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    didOpen() {
        this.fivOpen.emit();
        this.isOpen = true;
    }
    /**
     * @private
     * @param {?} ev
     * @return {?}
     */
    featureClick(ev) {
        if (this.overlayRef) {
            this.fivFeatureClick.emit(ev);
            this.fivWillClose.emit();
            this.overlayRef.instance.featureClick();
            this.overlayRef.instance.fivClose.pipe(first()).subscribe((/**
             * @return {?}
             */
            () => {
                this.fivClose.emit();
                this.overlayRef.destroy();
                this.overlayRef = null;
                if (this.clickEnabled) {
                    this.host.nativeElement.click();
                }
            }));
        }
    }
}
FivFeature.decorators = [
    { type: Directive, args: [{
                selector: '[fivFeature]',
                exportAs: 'fivFeature'
            },] }
];
/** @nocollapse */
FivFeature.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Host }] },
    { type: ViewContainerRef },
    { type: FivIcon, decorators: [{ type: Host }, { type: Optional }] },
    { type: IonIcon, decorators: [{ type: Host }, { type: Optional }] },
    { type: FivOverlayService },
    { type: Platform }
];
FivFeature.propDecorators = {
    maxDiameter: [{ type: Input }],
    diameter: [{ type: Input }],
    contentOffset: [{ type: Input }],
    featurePadding: [{ type: Input }],
    clickEnabled: [{ type: Input }],
    classes: [{ type: Input }],
    fivFeature: [{ type: Input }],
    fivFeatureClick: [{ type: Output }],
    fivOpen: [{ type: Output }],
    fivWillOpen: [{ type: Output }],
    fivClose: [{ type: Output }],
    fivWillClose: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FivFeature.prototype.maxDiameter;
    /** @type {?} */
    FivFeature.prototype.diameter;
    /** @type {?} */
    FivFeature.prototype.contentOffset;
    /** @type {?} */
    FivFeature.prototype.featurePadding;
    /** @type {?} */
    FivFeature.prototype.clickEnabled;
    /** @type {?} */
    FivFeature.prototype.classes;
    /** @type {?} */
    FivFeature.prototype.fivFeature;
    /** @type {?} */
    FivFeature.prototype.overlayRef;
    /** @type {?} */
    FivFeature.prototype.fivFeatureClick;
    /** @type {?} */
    FivFeature.prototype.fivOpen;
    /** @type {?} */
    FivFeature.prototype.fivWillOpen;
    /** @type {?} */
    FivFeature.prototype.fivClose;
    /** @type {?} */
    FivFeature.prototype.fivWillClose;
    /** @type {?} */
    FivFeature.prototype.isOpen;
    /**
     * @type {?}
     * @private
     */
    FivFeature.prototype.host;
    /**
     * @type {?}
     * @private
     */
    FivFeature.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    FivFeature.prototype.fivIcon;
    /**
     * @type {?}
     * @private
     */
    FivFeature.prototype.ionIcon;
    /**
     * @type {?}
     * @private
     */
    FivFeature.prototype.overlay;
    /**
     * @type {?}
     * @private
     */
    FivFeature.prototype.platform;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/feature-discovery/feature-discovery.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivFeatureDiscoveryModule {
}
FivFeatureDiscoveryModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivFeature, FivFeatureDiscovery],
                imports: [CommonModule, IonicModule, FivIconModule],
                exports: [FivFeature, FivFeatureDiscovery],
                entryComponents: [FivFeatureDiscovery]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/gallery/gallery-toolbar/gallery-toolbar.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivGalleryToolbar {
    constructor() {
        this.position = 'top';
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
}
FivGalleryToolbar.decorators = [
    { type: Component, args: [{
                selector: 'fiv-gallery-toolbar',
                template: "<ng-template #ref>\n  <ng-content></ng-content>\n</ng-template>",
                styles: [""]
            }] }
];
/** @nocollapse */
FivGalleryToolbar.ctorParameters = () => [];
FivGalleryToolbar.propDecorators = {
    content: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],
    position: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FivGalleryToolbar.prototype.content;
    /** @type {?} */
    FivGalleryToolbar.prototype.position;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/gallery/gallery-image/gallery-image.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivGalleryImage {
    constructor() {
        this.click = new EventEmitter();
    }
    /**
     * @return {?}
     */
    open() {
        this.click.emit(this);
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
}
FivGalleryImage.decorators = [
    { type: Component, args: [{
                selector: 'fiv-gallery-image',
                template: "<ng-container *ngIf=\"!src\">\n  <ng-content></ng-content>\n</ng-container>\n<div class=\"ion-activatable\" (click)=\"open()\">\n  <img #thumbnail class=\"thumbnail\" [src]=\"src\">\n  <ion-ripple-effect type=\"bounded\"></ion-ripple-effect>\n</div>",
                styles: [":host{display:block;--max-height:100%;--border-radius:0px;min-height:var(--max-height);--background:var(--ion-color-light);background:var(--background)}.thumbnail{-o-object-position:center;object-position:center;-o-object-fit:cover;object-fit:cover;display:block;height:var(--height,auto);max-height:var(--max-height);width:var(--width,100%);border-radius:var(--border-radius)}.ion-activatable{position:relative;--ripple-color:rgba(0, 0, 0, 0.5)}"]
            }] }
];
/** @nocollapse */
FivGalleryImage.ctorParameters = () => [];
FivGalleryImage.propDecorators = {
    src: [{ type: Input }],
    thumbnail: [{ type: ViewChild, args: ['thumbnail', { static: true },] }],
    click: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FivGalleryImage.prototype.src;
    /** @type {?} */
    FivGalleryImage.prototype.originalSrc;
    /** @type {?} */
    FivGalleryImage.prototype.index;
    /** @type {?} */
    FivGalleryImage.prototype.thumbnail;
    /** @type {?} */
    FivGalleryImage.prototype.click;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/animations/animations.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const fade = animation([
    style({
        opacity: '{{ fromOpacity }}'
    }),
    animate('{{ time }}', style({
        opacity: '{{ toOpacity }}'
    }))
]);
/** @type {?} */
const translate = animation([
    animate('{{ time }}', style({
        transform: 'translate({{toX}},{{toY}})'
    }))
]);

/**
 * @fileoverview added by tsickle
 * Generated from: lib/gallery/image.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ImageService {
    constructor() { }
    /**
     * @param {?} imgEl
     * @return {?}
     */
    getAverageRGB(imgEl) {
        /** @type {?} */
        const blockSize = 5;
        /** @type {?} */
        const // only visit every 5 pixels
        defaultRGB = { r: 0, g: 0, b: 0 };
        /** @type {?} */
        const // for non-supporting envs
        canvas = document.createElement('canvas');
        /** @type {?} */
        const context = canvas.getContext && canvas.getContext('2d');
        /** @type {?} */
        const rgb = { r: 0, g: 0, b: 0 };
        /** @type {?} */
        let data;
        /** @type {?} */
        let width;
        /** @type {?} */
        let height;
        /** @type {?} */
        let length;
        /** @type {?} */
        let i = -4;
        /** @type {?} */
        let count = 0;
        if (!context) {
            return `rgb(${defaultRGB.r},${defaultRGB.g},${defaultRGB.b})`;
        }
        height = canvas.height =
            imgEl.naturalHeight || imgEl.offsetHeight || imgEl.height;
        width = canvas.width =
            imgEl.naturalWidth || imgEl.offsetWidth || imgEl.width;
        context.drawImage(imgEl, 0, 0);
        try {
            data = context.getImageData(0, 0, width, height);
        }
        catch (e) {
            /* security error, img on diff domain */
            return `rgb(${defaultRGB.r},${defaultRGB.g},${defaultRGB.b})`;
        }
        length = data.data.length;
        while ((i += blockSize * 4) < length) {
            ++count;
            rgb.r += data.data[i];
            rgb.g += data.data[i + 1];
            rgb.b += data.data[i + 2];
        }
        // ~~ used to floor values
        rgb.r = Math.floor(rgb.r / count);
        rgb.g = Math.floor(rgb.g / count);
        rgb.b = Math.floor(rgb.b / count);
        return `rgb(${rgb.r},${rgb.g},${rgb.b})`;
    }
}
ImageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ImageService.ctorParameters = () => [];
/** @nocollapse */ ImageService.ngInjectableDef = ɵɵdefineInjectable({ factory: function ImageService_Factory() { return new ImageService(); }, token: ImageService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * Generated from: lib/gallery/gallery.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivGallery {
    /**
     * @param {?} domCtrl
     * @param {?} renderer
     * @param {?} animation
     * @param {?} change
     * @param {?} platform
     * @param {?} imageService
     * @param {?} document
     */
    constructor(domCtrl, renderer, animation, change, platform, imageService, document) {
        this.domCtrl = domCtrl;
        this.renderer = renderer;
        this.animation = animation;
        this.change = change;
        this.platform = platform;
        this.imageService = imageService;
        this.document = document;
        this.activeIndex = 0;
        this.inFullscreen = false;
        this.zoomedIn = false;
        this.controlsVisible = true;
        this.slidesLoaded = false;
        this.morphing = false;
        this.backdrop = false;
        this.backdropColor = '#000000ee';
        this.pagerVisible = true;
        this.ambient = false;
        this.willOpen = new EventEmitter();
        this.willClose = new EventEmitter();
        this.didOpen = new EventEmitter();
        this.didClose = new EventEmitter();
        this.backdropChange = new EventEmitter();
        this.$onDestroy = new Subject();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.updateImagesIndex();
        this.setupToolbars();
        this.subscribeToImageEvents();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.$onDestroy.next();
    }
    /**
     * @return {?}
     */
    subscribeToImageEvents() {
        from(this.images.map((/**
         * @param {?} image
         * @return {?}
         */
        image => image.click)))
            .pipe(mergeMap((/**
         * @param {?} value
         * @return {?}
         */
        (value) => value)), takeUntil(this.$onDestroy))
            .subscribe((/**
         * @param {?} image
         * @return {?}
         */
        image => {
            this.open(image);
        }));
    }
    /**
     * @return {?}
     */
    updateImagesIndex() {
        this.images.forEach((/**
         * @param {?} img
         * @param {?} i
         * @return {?}
         */
        (img, i) => {
            img.index = i;
        }));
    }
    /**
     * @return {?}
     */
    setupToolbars() {
        this.toolbars.forEach((/**
         * @param {?} toolbar
         * @return {?}
         */
        toolbar => {
            if (toolbar.position === 'top') {
                this.topToolbar = toolbar.content;
            }
            else {
                this.bottomToolbar = toolbar.content;
            }
        }));
    }
    /**
     * @param {?} initial
     * @return {?}
     */
    open(initial) {
        this.willOpen.emit(initial);
        this.activeIndex = initial.index;
        this.morphing = true;
        this.overlay.show(50000);
        this.initialImage = initial;
        this.updateBackdrop(this.activeIndex);
        this.initialImage.originalSrc = initial.src;
        setTimeout((/**
         * @return {?}
         */
        () => {
            //wait a little for ripple
            this.backdrop = true;
            this.showControls();
            this.morphIn();
        }), 300);
    }
    /**
     * @return {?}
     */
    morphIn() {
        this.morphOverlay.show(49999);
        /** @type {?} */
        const f = getPosition(this.initialImage.thumbnail);
        /** @type {?} */
        const t = this.calculateImagePosition();
        /** @type {?} */
        const tweenDone = new Subject();
        tween(easeOutSine, 320)
            .pipe(fromToPixels(this.morphImage, f.top, t.top, 'top'), fromToPixels(this.morphImage, f.left, t.left, 'left'), fromToPixels(this.morphImage, f.height, t.height, 'height'), fromToPixels(this.morphImage, f.width, t.width, 'width'))
            .subscribe({
            complete: (/**
             * @return {?}
             */
            () => {
                tweenDone.next();
            })
        });
        zip(tweenDone, !this.slidesLoaded ? this.slides.ionSlidesDidLoad : of(true))
            .pipe(tap((/**
         * @return {?}
         */
        () => {
            this.morphing = false;
            this.morphOverlay.hide();
            this.didOpen.emit(this.initialImage);
            this.swiper.nativeElement.swiper.on('click', (/**
             * @return {?}
             */
            () => {
                this.handleSingleTap();
            }));
        })), takeUntil(this.$onDestroy))
            .subscribe();
    }
    /**
     * @return {?}
     */
    dismiss() {
        this.close(false);
    }
    /**
     * @param {?=} emit
     * @return {?}
     */
    close(emit = true) {
        if (emit) {
            this.willClose.emit(this.initialImage);
        }
        this.backdrop = false;
        /** @type {?} */
        const sameAsInitial = this.images.toArray()[this.activeIndex].index === this.initialImage.index;
        if (sameAsInitial) {
            this.morphBack();
        }
        else {
            this.slideOut();
        }
        this.resetSlides(0);
        if (this.inFullscreen) {
            this.closeFullscreen();
        }
        this.slidesLoaded = false;
    }
    /**
     * @return {?}
     */
    morphBack() {
        /** @type {?} */
        const f = getPosition(this.getActiveImage());
        /** @type {?} */
        const t = getPosition(this.initialImage.thumbnail);
        this.overlay.hide();
        this.morphOverlay.show();
        tween(easeOutSine, 240)
            .pipe(fromToPixels(this.morphImage, f.top, t.top, 'top'), fromToPixels(this.morphImage, f.left, t.left, 'left'), fromToPixels(this.morphImage, f.height, t.height, 'height'), fromToPixels(this.morphImage, f.width, t.width, 'width'))
            .subscribe({
            complete: (/**
             * @return {?}
             */
            () => {
                this.morphOverlay.hide();
                this.didClose.emit(this.initialImage);
                this.initialImage = null;
            })
        });
    }
    /**
     * @return {?}
     */
    slideOut() {
        this.overlay.hide();
        this.morphOverlay.show();
        this.morphImage.nativeElement.src = this.getActiveImage().nativeElement.src;
        setPosition(this.morphImage, getPosition(this.getActiveImage()));
        tween(easeOutSine, 240)
            .pipe(fromTo(this.morphImage, 'transform', 0, 100, (/**
         * @param {?} t
         * @return {?}
         */
        (t) => `translateY(${t}%)`)))
            .subscribe({
            complete: (/**
             * @return {?}
             */
            () => {
                this.morphImage.nativeElement.style.transform = '';
                this.morphOverlay.hide();
                this.didClose.emit(this.initialImage);
                this.initialImage = null;
            })
        });
    }
    /**
     * @return {?}
     */
    getActiveImage() {
        return this.slideImages.toArray()[this.activeIndex];
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    transformSlides(progress) {
        if (this.controlsVisible) {
            this.hideControls();
        }
        this.domCtrl.write((/**
         * @return {?}
         */
        () => {
            this.renderer.setStyle(this.viewer.nativeElement, 'transform', `translateY(${progress * 120}px)`);
        }));
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    resetSlides(progress) {
        /** @type {?} */
        const reset = this.animation.build([
            style({ transform: `translateY(${progress * 120}px)` }),
            animate('150ms', style({ transform: `translateY(0px)` }))
        ]);
        /** @type {?} */
        const animation = reset.create(this.viewer.nativeElement);
        animation.play();
        animation.onDone((/**
         * @return {?}
         */
        () => {
            animation.destroy();
            this.transformSlides(0);
            this.showControls();
        }));
    }
    /**
     * @return {?}
     */
    slideDidChange() {
        this.activeIndex = this.swiper.nativeElement.swiper.activeIndex;
    }
    /**
     * @return {?}
     */
    ionSlideNextStart() {
        if (this.slidesLoaded) {
            this.updateBackdrop(this.activeIndex + 1);
        }
    }
    /**
     * @return {?}
     */
    ionSlidePrevStart() {
        if (this.slidesLoaded) {
            this.updateBackdrop(this.activeIndex - 1);
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    updateBackdrop(index) {
        this.backdropColor = this.ambient
            ? this.imageService.getAverageRGB(this.images.toArray()[index].thumbnail.nativeElement)
            : '#000000ee';
        this.backdropChange.emit();
    }
    /**
     * @return {?}
     */
    onSlidesLoad() {
        this.slidesLoaded = true;
    }
    /**
     * @return {?}
     */
    calculateImagePosition() {
        /** @type {?} */
        const nH = this.initialImage.thumbnail.nativeElement.naturalHeight;
        /** @type {?} */
        const nW = this.initialImage.thumbnail.nativeElement.naturalWidth;
        /** @type {?} */
        let height = Math.min(nH, this.platform.height());
        /** @type {?} */
        let width = Math.min(nW, this.platform.width());
        /** @type {?} */
        const ratio = nW / nH;
        if (ratio * height < width) {
            width = height * ratio;
        }
        else {
            height = width / ratio;
        }
        /** @type {?} */
        const top = this.platform.height() / 2 - height / 2;
        /** @type {?} */
        const left = this.platform.width() / 2 - width / 2;
        /** @type {?} */
        const p = {
            height: height,
            width: width,
            left: left,
            top: top
        };
        return p;
    }
    /**
     * @return {?}
     */
    fullscreen() {
        if (this.inFullscreen) {
            this.closeFullscreen();
        }
        else {
            this.openFullscreen();
        }
    }
    /**
     * @return {?}
     */
    openFullscreen() {
        /** @type {?} */
        const elem = document.documentElement;
        if (elem.requestFullscreen) {
            elem.requestFullscreen();
        }
        else if (elem['mozRequestFullScreen']) {
            /* Firefox */
            elem['mozRequestFullScreen']();
        }
        else if (elem['webkitRequestFullscreen']) {
            /* Chrome, Safari and Opera */
            elem['webkitRequestFullscreen']();
        }
        else if (elem['msRequestFullscreen']) {
            /* IE/Edge */
            elem['msRequestFullscreen']();
        }
        this.inFullscreen = true;
    }
    /**
     * @return {?}
     */
    closeFullscreen() {
        this.inFullscreen = false;
        if (this.document.exitFullscreen) {
            this.document.exitFullscreen();
        }
        else if (this.document.mozCancelFullScreen) {
            /* Firefox */
            this.document.mozCancelFullScreen();
        }
        else if (this.document.webkitExitFullscreen) {
            /* Chrome, Safari and Opera */
            this.document.webkitExitFullscreen();
        }
        else if (this.document.msExitFullscreen) {
            /* IE/Edge */
            this.document.msExitFullscreen();
        }
    }
    /**
     * @return {?}
     */
    zoom() {
        if (this.zoomedIn) {
            this.zoomOut();
        }
        else {
            this.zoomIn();
        }
    }
    /**
     * @return {?}
     */
    zoomIn() {
        this.swiper.nativeElement.swiper.zoom.in();
        this.zoomedIn = true;
    }
    /**
     * @return {?}
     */
    zoomOut() {
        this.swiper.nativeElement.swiper.zoom.out();
        this.zoomedIn = false;
    }
    /**
     * @return {?}
     */
    handleSingleTap() {
        this.controlsVisible = !this.controlsVisible;
        this.change.detectChanges();
    }
    /**
     * @return {?}
     */
    hideControls() {
        this.controlsVisible = false;
        this.change.detectChanges();
    }
    /**
     * @return {?}
     */
    showControls() {
        this.controlsVisible = true;
        this.change.detectChanges();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    keyEvent(event) {
        if (this.slidesLoaded && !this.morphing) {
            this.handleKeyboardEvents(event);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleKeyboardEvents(event) {
        if (event.key === 'ArrowRight') {
            this.next();
            return;
        }
        if (event.key === 'ArrowLeft') {
            this.prev();
            return;
        }
        if (event.key === 'ArrowDown' || event.key === 'Escape') {
            this.close();
            return;
        }
    }
    /**
     * @return {?}
     */
    next() {
        if (this.slides && this.slidesLoaded) {
            this.slides.slideNext();
        }
    }
    /**
     * @return {?}
     */
    prev() {
        if (this.slides && this.slidesLoaded) {
            this.slides.slidePrev();
        }
    }
}
FivGallery.decorators = [
    { type: Component, args: [{
                selector: 'fiv-gallery',
                template: "<ng-content></ng-content>\n<fiv-overlay #overlay>\n  <div [style.background]=\"backdropColor\" [@fade] class=\"backdrop\" *ngIf=\"overlay.open && backdrop\"></div>\n\n  <div [style.visibility]=\"!morphing ? 'visible' : 'hidden'\">\n    <div [@slideDown] *ngIf=\"controlsVisible && topToolbar\" class=\"gallery-toolbar header\" color=\"transparent\">\n      <ng-container [ngTemplateOutlet]=\"topToolbar\">\n      </ng-container>\n    </div>\n\n    <ng-container *fivIf=\"['desktop']\">\n      <ion-fab [@scale] *ngIf=\"controlsVisible && images?.length > 0 && pagerVisible\" vertical=\"center\"\n        horizontal=\"start\" slot=\"fixed\">\n        <ion-fab-button color=\"light\" (click)=\"prev()\" [disabled]=\"activeIndex === 0\">\n          <ion-icon name=\"arrow-back\"></ion-icon>\n        </ion-fab-button>\n      </ion-fab>\n    </ng-container>\n\n    <div #viewer class=\"viewer\" fivPull [maxPullHeight]=\"160\" [minPullHeight]=\"120\" (fivPull)=\"transformSlides($event)\"\n      (fivRefresh)=\"close()\" (fivCancel)=\"resetSlides($event)\" [enableScroll]=\"true\">\n      <ion-slides #slider *ngIf=\"overlay.open\" (ionSlideDidChange)=\"slideDidChange()\"\n        (ionSlideNextStart)=\"ionSlideNextStart()\" (ionSlidePrevStart)=\"ionSlidePrevStart()\"\n        (ionSlidesDidLoad)=\"onSlidesLoad()\" [options]=\"{ zoom: true, initialSlide: initialImage?.index}\">\n        <ion-slide *ngFor=\"let image of images; let i = index\">\n          <div class=\"swiper-zoom-container\">\n            <img #slideImage [ngClass]=\"{'instant': activeIndex !== i}\" [src]=\"image.src\">\n          </div>\n        </ion-slide>\n      </ion-slides>\n    </div>\n\n    <ng-container *fivIf=\"['desktop']\">\n      <ion-fab [@scale] *ngIf=\"controlsVisible && pagerVisible\" vertical=\"center\" horizontal=\"end\" slot=\"fixed\">\n        <ion-fab-button color=\"light\" (click)=\"next()\" [disabled]=\"activeIndex === images.length - 1\">\n          <ion-icon name=\"arrow-forward\"></ion-icon>\n        </ion-fab-button>\n      </ion-fab>\n    </ng-container>\n\n    <div [@slideUp] *ngIf=\"controlsVisible && bottomToolbar\" class=\"gallery-toolbar footer\" color=\"transparent\">\n      <ng-container [ngTemplateOutlet]=\"bottomToolbar\">\n      </ng-container>\n    </div>\n  </div>\n\n\n\n\n</fiv-overlay>\n<fiv-overlay #morphOverlay>\n  <img #morph class=\"morph\" *ngIf=\"initialImage\" [src]=\"initialImage.src\">\n</fiv-overlay>",
                animations: [
                    trigger('scale', [
                        transition('void => *', [
                            style({ opacity: 0, transform: 'scale(0)' }),
                            animate('125ms', style({ opacity: 1, transform: 'scale(1)' }))
                        ]),
                        transition('* => void', [
                            style({ opacity: 1, transform: 'scale(1)' }),
                            animate('125ms', style({ opacity: 0, transform: 'scale(0)' }))
                        ])
                    ]),
                    trigger('slideUp', [
                        transition('void => *', [
                            style({ opacity: 0, transform: 'translateY(100%)' }),
                            animate('75ms', style({ opacity: 1, transform: 'translateY(0%)' }))
                        ]),
                        transition('* => void', [
                            style({ opacity: 1, transform: 'translateY(0%)' }),
                            animate('75ms', style({ opacity: 0, transform: 'translateY(100%)' }))
                        ])
                    ]),
                    trigger('slideDown', [
                        transition('* => void', [
                            style({ opacity: 0, transform: 'translateY(0%)' }),
                            animate('75ms', style({ opacity: 1, transform: 'translateY(-100%)' }))
                        ]),
                        transition('void => *', [
                            style({ opacity: 1, transform: 'translateY(-100%)' }),
                            animate('75ms', style({ opacity: 0, transform: 'translateY(0%)' }))
                        ])
                    ]),
                    trigger('fade', [
                        transition('* => void', useAnimation(fade, {
                            params: {
                                fromOpacity: 1,
                                toOpacity: 0,
                                time: '240ms'
                            }
                        })),
                        transition('void => *', useAnimation(fade, {
                            params: {
                                fromOpacity: 0,
                                toOpacity: 1,
                                time: '240ms'
                            }
                        }))
                    ])
                ],
                styles: [".viewer{width:100vw;height:100vh}.viewer ion-slides{height:100%}.viewer img{height:auto;max-height:100%;width:auto;max-width:100%}.viewer img.instant{transition-duration:0s!important}.gallery-toolbar{width:100%;--fiv-gallery-toolbar-color:#fff;position:absolute;color:var(--fiv-gallery-toolbar-color)}.gallery-toolbar.header{top:env(safe-area-inset-top)}.gallery-toolbar.footer{bottom:env(safe-area-inset-bottom)}.morph{position:absolute;-o-object-position:center;object-position:center;-o-object-fit:cover;object-fit:cover;display:block}.backdrop{height:100vh;width:100vw;position:absolute;transition:background-color .2s}"]
            }] }
];
/** @nocollapse */
FivGallery.ctorParameters = () => [
    { type: DomController },
    { type: Renderer2 },
    { type: AnimationBuilder },
    { type: ChangeDetectorRef },
    { type: Platform },
    { type: ImageService },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
FivGallery.propDecorators = {
    overlay: [{ type: ViewChild, args: ['overlay', { static: false },] }],
    morphOverlay: [{ type: ViewChild, args: ['morphOverlay', { static: false },] }],
    viewer: [{ type: ViewChild, args: ['viewer', { static: false },] }],
    morphImage: [{ type: ViewChild, args: ['morph', { static: false },] }],
    swiper: [{ type: ViewChild, args: ['slider', { static: false, read: ElementRef },] }],
    slides: [{ type: ViewChild, args: ['slider', { static: false },] }],
    slideImages: [{ type: ViewChildren, args: ['slideImage',] }],
    images: [{ type: ContentChildren, args: [forwardRef((/**
                 * @return {?}
                 */
                () => FivGalleryImage)),
                { descendants: true },] }],
    toolbars: [{ type: ContentChildren, args: [FivGalleryToolbar,] }],
    pagerVisible: [{ type: Input }],
    ambient: [{ type: Input }],
    willOpen: [{ type: Output }],
    willClose: [{ type: Output }],
    didOpen: [{ type: Output }],
    didClose: [{ type: Output }],
    backdropChange: [{ type: Output }],
    keyEvent: [{ type: HostListener, args: ['window:keyup', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    FivGallery.prototype.overlay;
    /** @type {?} */
    FivGallery.prototype.morphOverlay;
    /** @type {?} */
    FivGallery.prototype.viewer;
    /** @type {?} */
    FivGallery.prototype.morphImage;
    /** @type {?} */
    FivGallery.prototype.swiper;
    /** @type {?} */
    FivGallery.prototype.slides;
    /** @type {?} */
    FivGallery.prototype.slideImages;
    /** @type {?} */
    FivGallery.prototype.images;
    /** @type {?} */
    FivGallery.prototype.toolbars;
    /** @type {?} */
    FivGallery.prototype.topToolbar;
    /** @type {?} */
    FivGallery.prototype.bottomToolbar;
    /** @type {?} */
    FivGallery.prototype.initialImage;
    /** @type {?} */
    FivGallery.prototype.activeIndex;
    /** @type {?} */
    FivGallery.prototype.inFullscreen;
    /** @type {?} */
    FivGallery.prototype.zoomedIn;
    /** @type {?} */
    FivGallery.prototype.controlsVisible;
    /** @type {?} */
    FivGallery.prototype.slidesLoaded;
    /** @type {?} */
    FivGallery.prototype.morphing;
    /** @type {?} */
    FivGallery.prototype.backdrop;
    /** @type {?} */
    FivGallery.prototype.backdropColor;
    /** @type {?} */
    FivGallery.prototype.pagerVisible;
    /** @type {?} */
    FivGallery.prototype.ambient;
    /** @type {?} */
    FivGallery.prototype.willOpen;
    /** @type {?} */
    FivGallery.prototype.willClose;
    /** @type {?} */
    FivGallery.prototype.didOpen;
    /** @type {?} */
    FivGallery.prototype.didClose;
    /** @type {?} */
    FivGallery.prototype.backdropChange;
    /** @type {?} */
    FivGallery.prototype.$onDestroy;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.domCtrl;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.animation;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.change;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.platform;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.imageService;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.document;
}
class Position {
}
if (false) {
    /** @type {?} */
    Position.prototype.top;
    /** @type {?} */
    Position.prototype.left;
    /** @type {?} */
    Position.prototype.height;
    /** @type {?} */
    Position.prototype.width;
    /** @type {?} */
    Position.prototype.translate;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/if-platform/if-platform.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivIfPlatform {
    /**
     * @param {?} platform
     * @param {?} viewContainer
     * @param {?} templateRef
     */
    constructor(platform, viewContainer, templateRef) {
        this.platform = platform;
        this.viewContainer = viewContainer;
        this.templateRef = templateRef;
    }
    /**
     * @param {?} platforms
     * @return {?}
     */
    set fivIf(platforms) {
        /** @type {?} */
        let show = true;
        platforms.forEach((/**
         * @param {?} p
         * @return {?}
         */
        p => {
            if (!this.platform.is(p)) {
                show = false;
            }
        }));
        if (show) {
            this.viewContainer.createEmbeddedView(this.templateRef);
        }
        else {
            this.viewContainer.clear();
        }
    }
}
FivIfPlatform.decorators = [
    { type: Directive, args: [{
                selector: '[fivIf]'
            },] }
];
/** @nocollapse */
FivIfPlatform.ctorParameters = () => [
    { type: Platform },
    { type: ViewContainerRef },
    { type: TemplateRef }
];
FivIfPlatform.propDecorators = {
    fivIf: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    FivIfPlatform.prototype.platform;
    /**
     * @type {?}
     * @private
     */
    FivIfPlatform.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    FivIfPlatform.prototype.templateRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/if-platform/if-platform.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivIfModule {
}
FivIfModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivIfPlatform],
                imports: [CommonModule],
                exports: [FivIfPlatform]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/gallery/gallery-toolbar-content/gallery-toolbar-content.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivGalleryToolbarContent {
    /**
     * @param {?} gallery
     */
    constructor(gallery) {
        this.gallery = gallery;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
}
FivGalleryToolbarContent.decorators = [
    { type: Component, args: [{
                selector: 'fiv-gallery-toolbar-content',
                template: "<ion-toolbar color=\"transparent\">\n  <ion-buttons slot=\"start\">\n    <ion-button (click)=\"gallery.close()\">\n      <ion-icon slot=\"icon-only\" name=\"close\"></ion-icon>\n    </ion-button>\n  </ion-buttons>\n  <ion-buttons slot=\"end\">\n    <ion-button (click)=\"gallery.fullscreen()\">\n      <fiv-icon slot=\"icon-only\" [name]=\"gallery.inFullscreen ? 'contract': 'expand'\"></fiv-icon>\n    </ion-button>\n    <ion-button (click)=\"gallery.zoom()\">\n      <fiv-icon slot=\"icon-only\" [name]=\"gallery.zoomedIn ? 'remove': 'add'\"></fiv-icon>\n    </ion-button>\n  </ion-buttons>\n</ion-toolbar>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
FivGalleryToolbarContent.ctorParameters = () => [
    { type: FivGallery, decorators: [{ type: Host }] }
];
if (false) {
    /** @type {?} */
    FivGalleryToolbarContent.prototype.gallery;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/gallery/gallery.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivGalleryModule {
}
FivGalleryModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    FivGallery,
                    FivGalleryImage,
                    FivGalleryToolbar,
                    FivGalleryToolbarContent
                ],
                imports: [
                    CommonModule,
                    IonicModule,
                    FivIconModule,
                    FivIfModule,
                    FivPullModule,
                    FivOverlayModule
                ],
                exports: [
                    FivGallery,
                    FivGalleryImage,
                    FivGalleryToolbar,
                    FivGalleryToolbarContent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/refresher/refresher-content/refresher-content.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivRefresherContent {
    /**
     * @param {?} element
     * @param {?} renderer
     * @param {?} builder
     */
    constructor(element, renderer, builder) {
        this.element = element;
        this.renderer = renderer;
        this.builder = builder;
        this._progress = 0;
        this.fivComplete = new EventEmitter();
        this.fivRefresh = new EventEmitter();
        this.fivHidden = new EventEmitter();
        this.fivShowed = new EventEmitter();
        this.fivProgress = new EventEmitter();
        this.visible = false;
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    set progress(progress) {
        this._progress = progress;
        if (progress < 1) {
            this.renderer.setStyle(this.spinnerRef.nativeElement, 'transform', `rotateZ(${360 * progress}deg)`);
        }
    }
    /**
     * @return {?}
     */
    get progress() {
        return this._progress;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    load() {
        this.visible = true;
        this.spinner.spin();
        this.fivRefresh.emit(this);
    }
    /**
     * @return {?}
     */
    unload() {
        this.spinner.stop();
    }
    /**
     * @return {?}
     */
    show() {
        if (!this.visible) {
            this.visible = true;
            /** @type {?} */
            const animation = this.builder.build([
                style({ transform: 'scale(0)' }),
                animate('0ms ease-out', style({ transform: 'scale(1)' }))
            ]);
            /** @type {?} */
            const player = animation.create(this.background.nativeElement);
            player.play();
            player.onDone((/**
             * @return {?}
             */
            () => {
                this.fivShowed.emit(this);
                player.destroy();
            }));
        }
    }
    /**
     * @return {?}
     */
    hide() {
        if (this.visible) {
            /** @type {?} */
            const transform = `scale(1)`;
            /** @type {?} */
            const animation = this.builder.build([
                style({ transform: transform }),
                animate('175ms ease-in', style({ transform: `scale(0)` }))
            ]);
            /** @type {?} */
            const player = animation.create(this.background.nativeElement);
            player.play();
            player.onDone((/**
             * @return {?}
             */
            () => {
                this.fivHidden.emit(this);
                this.visible = false;
                player.destroy();
            }));
        }
    }
    /**
     * @return {?}
     */
    complete() {
        this.unload();
        this.fivComplete.emit(this);
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    setValue(progress) {
        this.spinner.setValue(progress);
    }
    /**
     * @return {?}
     */
    reset() {
        this.spinner.setMode('indeterminate');
    }
}
FivRefresherContent.decorators = [
    { type: Component, args: [{
                selector: 'fiv-refresher-content',
                template: "<div #background class=\"spinner-background\" [ngClass]=\"{'hidden': progress === 0}\">\n    <fiv-spinner #spinner (fivProgress)=\"fivProgress.emit($event)\" (fivComplete)=\"complete()\" [circleRadius]=\"8\"\n        [diameter]=\"20\" [strokeWidth]=\"2\"></fiv-spinner>\n</div>",
                styles: [":host{--fiv-spinner-size:40px;position:absolute;width:var(--fiv-spinner-size);height:var(--fiv-spinner-size);top:calc(-1 * var(--fiv-spinner-size));left:calc(50% - var(--fiv-spinner-size)/ 2);z-index:9}.spinner-background:not(.hidden){box-shadow:0 4px 6px 0 rgba(0,0,0,.14),0 4px 5px rgba(0,0,0,.1)}.spinner-background{position:absolute;width:40px;height:40px;background:var(--fiv-spin-background);border-radius:50%}.spinner-background fiv-spinner{position:absolute;top:10px;left:10px}"]
            }] }
];
/** @nocollapse */
FivRefresherContent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: AnimationBuilder }
];
FivRefresherContent.propDecorators = {
    progress: [{ type: Input }],
    fivComplete: [{ type: Output }],
    fivRefresh: [{ type: Output }],
    fivHidden: [{ type: Output }],
    fivShowed: [{ type: Output }],
    fivProgress: [{ type: Output }],
    spinner: [{ type: ViewChild, args: ['spinner', { static: false },] }],
    spinnerRef: [{ type: ViewChild, args: ['spinner', { static: true, read: ElementRef },] }],
    background: [{ type: ViewChild, args: ['background', { static: false },] }]
};
if (false) {
    /** @type {?} */
    FivRefresherContent.prototype._progress;
    /** @type {?} */
    FivRefresherContent.prototype.fivComplete;
    /** @type {?} */
    FivRefresherContent.prototype.fivRefresh;
    /** @type {?} */
    FivRefresherContent.prototype.fivHidden;
    /** @type {?} */
    FivRefresherContent.prototype.fivShowed;
    /** @type {?} */
    FivRefresherContent.prototype.fivProgress;
    /** @type {?} */
    FivRefresherContent.prototype.spinner;
    /** @type {?} */
    FivRefresherContent.prototype.spinnerRef;
    /** @type {?} */
    FivRefresherContent.prototype.background;
    /** @type {?} */
    FivRefresherContent.prototype.visible;
    /** @type {?} */
    FivRefresherContent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    FivRefresherContent.prototype.renderer;
    /** @type {?} */
    FivRefresherContent.prototype.builder;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/refresher/refresher.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivRefresher {
    /**
     * @param {?} builder
     * @param {?} refresher
     * @param {?} renderer
     * @param {?} platform
     */
    constructor(builder, refresher, renderer, platform) {
        this.builder = builder;
        this.refresher = refresher;
        this.renderer = renderer;
        this.platform = platform;
        this.hintText = 'new posts';
        this.maxPullHeight = 168;
        this.minPullHeight = 112;
        this.fivProgressChanged = new EventEmitter();
        this.fivRefresh = new EventEmitter();
        this.hintVisible = false;
        this.currentProgress = 0;
        this.refreshing = false;
        this.$onDestroy = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.attachPullDirective();
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.$onDestroy.next();
    }
    /**
     * @private
     * @return {?}
     */
    attachPullDirective() {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const content = this.refresher.nativeElement.closest('ion-content');
            if (!content) {
                throw new Error('The fiv-refresher component needs to be inside of an ion-content.');
            }
            content.scrollEvents = true;
            /** @type {?} */
            const scroll = yield content.getScrollElement();
            /** @type {?} */
            const pull = new FivPull(new ElementRef(content), this.platform, content);
            pull.init();
            pull.fivPull
                .pipe(filter((/**
             * @return {?}
             */
            () => !this.refreshing && !this.hintVisible)), tap((/**
             * @param {?} progress
             * @return {?}
             */
            progress => this.fivPull(progress))), takeUntil(this.$onDestroy))
                .subscribe();
            pull.fivRefresh
                .pipe(tap((/**
             * @return {?}
             */
            () => this.refresh())), takeUntil(this.$onDestroy))
                .subscribe();
            pull.fivCancel
                .pipe(tap((/**
             * @return {?}
             */
            () => this.moveBack())), takeUntil(this.$onDestroy))
                .subscribe();
            this.spinner.fivComplete.pipe(takeUntil(this.$onDestroy)).subscribe();
            this.fivRefresh
                .pipe(tap((/**
             * @return {?}
             */
            () => scroll.scrollTo({ top: 0, behavior: 'smooth' }))), takeUntil(this.$onDestroy))
                .subscribe();
        });
    }
    /**
     * @return {?}
     */
    refresh() {
        if (this.refreshing) {
            return;
        }
        this.refreshing = true;
        this.spinner.load();
        this.setPullAnimationProgress(112 / 168);
        this.fivRefresh.emit(this);
    }
    /**
     * @return {?}
     */
    complete() {
        if (!this.refreshing) {
            return;
        }
        this.spinner.complete();
    }
    /**
     * @return {?}
     */
    onDone() {
        this.spinner.hide();
    }
    /**
     * @return {?}
     */
    onHidden() {
        this.refreshing = false;
        this.setPullAnimationProgress(0);
    }
    /**
     * @return {?}
     */
    showHint() {
        this.hintVisible = true;
    }
    /**
     * @return {?}
     */
    onHintClicked() {
        this.hintVisible = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    postHint(event) {
        if (!event.fromState && event.toState === 'void') {
            this.refresh();
        }
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    setPullAnimationProgress(progress) {
        this.currentProgress = progress;
        if (progress < 1) {
            this.renderer.setStyle(this.spinner.element.nativeElement, 'transform', `translateY(${this.minPullHeight * progress}px)`);
        }
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    changeAnimationToProgress(progress) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            /** @type {?} */
            const animation = this.builder.build([
                style({
                    transform: `translateY(${100 *
                        this.currentProgress}px) rotateZ(${360 * this.currentProgress}deg)`
                }),
                animate('85ms ease-in', style({
                    transform: `translateY(${100 * progress}px) rotateZ(${360 *
                        progress}deg)`
                }))
            ]);
            /** @type {?} */
            const player = animation.create(this.spinner.element.nativeElement);
            player.play();
            player.onDone((/**
             * @return {?}
             */
            () => {
                this.setPullAnimationProgress(progress);
                player.destroy();
                resolve();
            }));
        }));
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    fivPull(progress) {
        this.setPullAnimationProgress(progress);
        this.spinner.show();
        /** @type {?} */
        const value = Math.max(0, Math.min(100, (progress * 100 * this.maxPullHeight) / this.minPullHeight));
        this.spinner.setValue(value * 0.84);
    }
    /**
     * @return {?}
     */
    moveBack() {
        /** @type {?} */
        const animation = this.builder.build([
            style({
                transform: `translateY(${this.currentProgress *
                    this.minPullHeight}px) rotateZ(${360 * this.currentProgress}deg)`
            }),
            animate('205ms ease-in', style({ transform: 'translateY(0) rotateZ(0)' }))
        ]);
        /** @type {?} */
        const player = animation.create(this.spinner.element.nativeElement);
        tween(easeOutSine, 145)
            .pipe(reverse(), map((/**
         * @param {?} n
         * @return {?}
         */
        n => Math.max(0, Math.min(100, (this.currentProgress * n * 100 * this.maxPullHeight) /
            this.minPullHeight)))), tap((/**
         * @param {?} value
         * @return {?}
         */
        value => this.spinner.setValue(value))))
            .subscribe();
        player.play();
        player.onDone((/**
         * @return {?}
         */
        () => {
            this.setPullAnimationProgress(0);
            this.spinner.visible = false;
            player.destroy();
        }));
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    onSpinnerProgress(progress) {
        this.fivProgressChanged.emit(progress);
        this.renderer
            // tslint:disable-next-line:max-line-length
            .setStyle(this.spinner.element.nativeElement, 'transform', `translateY(${this.maxPullHeight *
            this.currentProgress}px) rotateZ(${(360 * progress) / 200}deg)`);
    }
}
FivRefresher.decorators = [
    { type: Component, args: [{
                selector: 'fiv-refresher',
                template: "<fiv-refresher-content [progress]=\"currentProgress\" (fivProgress)=\"onSpinnerProgress($event)\" (fivComplete)=\"onDone()\"\n  (fivHidden)=\"onHidden()\" #spinner>\n</fiv-refresher-content>\n\n<ion-chip class=\"gg-hint-wrapper\" *ngIf=\"hintVisible\" [@hintAnim] (@hintAnim.done)=\"postHint($event)\"\n  (click)=\"onHintClicked()\" #hint>\n  <ion-icon class=\"icon\" name=\"arrow-up\"></ion-icon>\n  <ion-label [ngClass]=\"{'hidden': !hintVisible}\" class=\"text\">{{hintText}}</ion-label>\n</ion-chip>",
                animations: [
                    trigger('hintAnim', [
                        transition('void => *', [
                            style({ transform: 'translateY(0px) translateX(-50%)' }),
                            animate('150ms ease-in', style({
                                opacity: 1,
                                transform: 'translateY(72px) translateX(-50%)'
                            }))
                        ]),
                        transition('* => void', [
                            style({
                                width: '*',
                                opacity: 1,
                                transform: 'translateY(72px) translateX(-50%)'
                            }),
                            animate('150ms 125ms ease-out', style({
                                width: '40px',
                                transform: 'translateY(72px) translateX(-50%)'
                            }))
                        ])
                    ])
                ],
                styles: [":host{--fiv-spin-color:var(--ion-color-primary);--fiv-hint-color:var(--fiv-spin-color, var(--ion-color-primary));--fiv-spin-background:var(--ion-color-light)}.icon{height:20px;width:20px;background:0 0;color:var(--fiv-hint-color)}.text{font-size:1em;color:var(--fiv-hint-color)}.text.hidden{opacity:0}.gg-hint-wrapper{position:absolute;z-index:8;opacity:1;left:50%;top:-40px;transform:translateY(72px) translateX(-50%);height:40px;padding-left:8px;padding-right:8px;background:var(--fiv-spin-background);border-radius:40px;box-shadow:0 4px 6px 0 rgba(0,0,0,.14),0 4px 5px rgba(0,0,0,.1);margin:0}"]
            }] }
];
/** @nocollapse */
FivRefresher.ctorParameters = () => [
    { type: AnimationBuilder },
    { type: ElementRef },
    { type: Renderer2 },
    { type: Platform }
];
FivRefresher.propDecorators = {
    hintText: [{ type: Input }],
    maxPullHeight: [{ type: Input }],
    minPullHeight: [{ type: Input }],
    fivProgressChanged: [{ type: Output }],
    fivRefresh: [{ type: Output }],
    spinner: [{ type: ViewChild, args: ['spinner', { static: false },] }]
};
if (false) {
    /** @type {?} */
    FivRefresher.prototype.hintText;
    /** @type {?} */
    FivRefresher.prototype.maxPullHeight;
    /** @type {?} */
    FivRefresher.prototype.minPullHeight;
    /** @type {?} */
    FivRefresher.prototype.fivProgressChanged;
    /** @type {?} */
    FivRefresher.prototype.fivRefresh;
    /** @type {?} */
    FivRefresher.prototype.spinner;
    /** @type {?} */
    FivRefresher.prototype.hintVisible;
    /** @type {?} */
    FivRefresher.prototype.currentProgress;
    /** @type {?} */
    FivRefresher.prototype.refreshing;
    /**
     * @type {?}
     * @private
     */
    FivRefresher.prototype.$onDestroy;
    /**
     * @type {?}
     * @private
     */
    FivRefresher.prototype.builder;
    /**
     * @type {?}
     * @private
     */
    FivRefresher.prototype.refresher;
    /**
     * @type {?}
     * @private
     */
    FivRefresher.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FivRefresher.prototype.platform;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/refresher/refresher.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivRefresherModule {
}
FivRefresherModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivRefresher, FivRefresherContent],
                imports: [CommonModule, FivSpinnerModule, FivPullModule, IonicModule],
                exports: [FivRefresher, FivRefresherContent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/network-status/network-status.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivNetworkStatus {
    constructor() {
        this.visible = true;
        this.status = 'online';
        this.onClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    show() {
        this.visible = true;
    }
    /**
     * @return {?}
     */
    hide() {
        this.visible = false;
    }
    /**
     * @param {?} status
     * @return {?}
     */
    setStatus(status) {
        this.status = status;
    }
    /**
     * @return {?}
     */
    FivNetworkStatusClicked() {
        this.onClick.emit(this);
    }
}
FivNetworkStatus.decorators = [
    { type: Component, args: [{
                selector: 'fiv-network-status',
                template: "<ion-chip [@status] (click)=\"FivNetworkStatusClicked()\" *ngIf=\"visible\">\n  <fiv-icon [badge]=\"-1\" [fivCenter] [off]=\"status === 'offline'\" name=\"cloud\"></fiv-icon>\n</ion-chip>",
                animations: [
                    trigger('status', [
                        transition('void => *', [
                            style({ opacity: 0 }),
                            animate('200ms ease-out', style({ opacity: 1 }))
                        ]),
                        transition('* => void', [
                            style({ opacity: 1 }),
                            animate('550ms 200ms ease-in', style({ opacity: 0 }))
                        ])
                    ])
                ],
                styles: [":host{position:absolute;top:66px;right:8px}ion-chip{width:56px}fiv-icon{--fiv-icon-color:var(--ion-color-dark)}"]
            }] }
];
/** @nocollapse */
FivNetworkStatus.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    FivNetworkStatus.prototype.visible;
    /** @type {?} */
    FivNetworkStatus.prototype.status;
    /** @type {?} */
    FivNetworkStatus.prototype.onClick;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/network-status/network-status.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivNetworkStatusModule {
}
FivNetworkStatusModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivNetworkStatus],
                imports: [CommonModule, FivCenterModule, FivIconModule, IonicModule],
                exports: [FivNetworkStatus],
                entryComponents: [FivNetworkStatus]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/password-input/password-input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => FivPasswordInput)),
    multi: true
};
class FivPasswordInput {
    constructor() {
        this.clearOnEdit = false;
        this.disabled = false;
        this.hideIcon = 'eye';
        this.position = 'floating';
        this.showIcon = 'eye-off';
        this._passwordValue = '';
    }
    /**
     * @return {?}
     */
    toggleShowPassword() {
        this.show = !this.show;
    }
    /**
     * @return {?}
     */
    get passwordValue() {
        return this._passwordValue;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set passwordValue(v) {
        if (v !== this._passwordValue) {
            this._passwordValue = v;
            if (this.onChangeCallback) {
                this.onChangeCallback(this._passwordValue);
            }
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== undefined && value !== this._passwordValue) {
            this._passwordValue = value;
        }
    }
    /**
     * @return {?}
     */
    blur() {
        if (this.onTouchedCallback) {
            this.onTouchedCallback();
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
}
FivPasswordInput.decorators = [
    { type: Component, args: [{
                selector: 'fiv-password-input',
                template: "<ion-item [color]=\"color\" [disabled]=\"disabled\" [lines]=\"lines\">\n  <ion-label *ngIf=\"placeholder\" [position]=\"position\">{{ placeholder }}</ion-label>\n  <ion-input [type]=\"show ? 'text' : 'password'\" [(ngModel)]=\"passwordValue\" [clearOnEdit]=\"clearOnEdit\"\n    (ionBlur)=\"blur()\"></ion-input>\n  <ion-icon slot=\"end\" [name]=\"show ? hideIcon : showIcon\" (click)=\"toggleShowPassword()\"></ion-icon>\n</ion-item>",
                providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR],
                styles: [":host(.password-disabled){pointer-events:none}ion-icon{-ms-grid-row-align:center;align-self:center}"]
            }] }
];
/** @nocollapse */
FivPasswordInput.ctorParameters = () => [];
FivPasswordInput.propDecorators = {
    clearOnEdit: [{ type: Input }],
    color: [{ type: Input }],
    disabled: [{ type: HostBinding, args: ['class.password-disabled',] }, { type: Input }],
    hideIcon: [{ type: Input }],
    lines: [{ type: Input }],
    placeholder: [{ type: Input }],
    position: [{ type: Input }],
    show: [{ type: Input }],
    showIcon: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FivPasswordInput.prototype.clearOnEdit;
    /** @type {?} */
    FivPasswordInput.prototype.color;
    /** @type {?} */
    FivPasswordInput.prototype.disabled;
    /** @type {?} */
    FivPasswordInput.prototype.hideIcon;
    /** @type {?} */
    FivPasswordInput.prototype.lines;
    /** @type {?} */
    FivPasswordInput.prototype.placeholder;
    /** @type {?} */
    FivPasswordInput.prototype.position;
    /** @type {?} */
    FivPasswordInput.prototype.show;
    /** @type {?} */
    FivPasswordInput.prototype.showIcon;
    /**
     * @type {?}
     * @private
     */
    FivPasswordInput.prototype._passwordValue;
    /**
     * @type {?}
     * @private
     */
    FivPasswordInput.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    FivPasswordInput.prototype.onChangeCallback;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/password-input/password-input.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivPasswordInputModule {
}
FivPasswordInputModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivPasswordInput],
                imports: [CommonModule, FormsModule, IonicModule],
                exports: [FivPasswordInput]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/popover/popover.animations.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const scaleIn = (/**
 * @param {?} target
 * @param {?} easing
 * @param {?} duration
 * @return {?}
 */
(target, easing, duration) => tween(easing, duration).pipe(transform(target, scale(0, 1))));
/** @type {?} */
const animIn = (/**
 * @param {?} element
 * @param {?} position
 * @param {?} duration
 * @return {?}
 */
(element, position, duration) => zip(fadeIn(element, easeOutSine, duration), scaleIn(element, easeOutSine, duration).pipe(beforeStyle(element, 'transform-origin', `${position.vertical} ${position.horizontal}`))));
/** @type {?} */
const animOut = (/**
 * @param {?} element
 * @param {?} duration
 * @return {?}
 */
(element, duration) => fadeOut(element, easeInSine, duration));

/**
 * @fileoverview added by tsickle
 * Generated from: lib/popover/popover.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivPopover {
    /**
     * @param {?} platform
     * @param {?} content
     * @param {?} dom
     * @param {?} router
     */
    constructor(platform, content, dom, router) {
        this.platform = platform;
        this.content = content;
        this.dom = dom;
        this.router = router;
        this.arrow = false;
        this.arrowWidth = 24;
        this.arrowHeight = this.arrowWidth / 1.6;
        this.arrowPosition = 'auto';
        this.backdrop = true;
        this.overlaysTarget = true;
        this.closeOnNavigation = true;
        this.scrollToTarget = false;
        this.scrollSpeed = 100;
        this.position = 'auto';
        this.classes = [];
        this.viewportOnly = true;
        this.hidden = false;
        this.onDestroy$ = new Subject();
        this.onClose$ = new Subject();
        this.inDuration = 200;
        this.outDuration = 80;
        this.animationIn = (/**
         * @param {?} element
         * @return {?}
         */
        (element) => animIn(element, this._position, this.inDuration));
        this.animationOut = (/**
         * @param {?} element
         * @return {?}
         */
        (element) => animOut(element, this.outDuration));
    }
    /**
     * @return {?}
     */
    get styles() {
        if (!this._position) {
            return;
        }
        return this.dom.bypassSecurityTrustStyle(` width: ${this.width ? this.width + 'px' : 'auto'}; 
        height: ${this.height ? this.height + 'px' : 'auto'}; 
        left: ${this.getContainerLeft()}px; 
        top: ${this.getContainerTop()}px;`);
    }
    /**
     * @return {?}
     */
    get triangle() {
        /** @type {?} */
        const isHorizontal = ['left', 'right'].some((/**
         * @param {?} s
         * @return {?}
         */
        s => s === this.position));
        if (isHorizontal) {
            return `${this.arrowHeight},0 0,${this.arrowWidth / 2} ${this.arrowHeight},${this.arrowWidth}`;
        }
        return `0,${this.arrowHeight} ${this.arrowWidth / 2},0 ${this.arrowWidth},${this.arrowHeight}`;
    }
    /**
     * @return {?}
     */
    get svgStyles() {
        if (!this._position) {
            return;
        }
        /** @type {?} */
        const isHorizontal = ['left', 'right'].some((/**
         * @param {?} s
         * @return {?}
         */
        s => s === this.position));
        /** @type {?} */
        const rotate = (this.position === 'auto' && this._position.vertical === 'bottom') ||
            this.position === 'left';
        return this.dom.bypassSecurityTrustStyle(`height: ${isHorizontal ? this.arrowWidth : this.arrowHeight}px; 
      width: ${isHorizontal ? this.arrowHeight : this.arrowWidth}px; 
      top: ${this.getArrowTop()}px; 
      left: ${this.getArrowLeft()}px;
      transform: rotateZ(${rotate ? 180 : 0}deg);`);
    }
    /**
     * @return {?}
     */
    get animationStyles() {
        if (!this._position) {
            return;
        }
        return this.dom.bypassSecurityTrustStyle(`height: ${this.arrowHeight}px; 
      width: ${this.arrowWidth}px; 
      top: ${this.getArrowTop()}px; 
      left: ${this.getArrowLeft()}px;
      transform: rotateZ(${this._position.vertical === 'bottom' ? 180 : 0}deg);`);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.router.events
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        event => event instanceof NavigationStart)), filter((/**
         * @return {?}
         */
        () => this.closeOnNavigation && this.overlay.open)), tap((/**
         * @return {?}
         */
        () => this.close())), takeUntil(this.onDestroy$))
            .subscribe();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() { }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.onDestroy$.next();
    }
    /**
     * @return {?}
     */
    close() {
        this.animationOut(this.animationContainer)
            .pipe(after((/**
         * @return {?}
         */
        () => {
            this.overlay.hide();
            this.onClose$.next();
        })))
            .subscribe();
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    getPositionOfTarget(target) {
        /** @type {?} */
        const rect = target.getBoundingClientRect();
        return this.calculcatePositioning(rect.top, rect.left, rect.bottom, rect.right, rect.height, rect.width);
    }
    /**
     * @param {?} target
     * @return {?}
     */
    open(target) {
        /** @type {?} */
        let element;
        if (target instanceof MouseEvent) {
            element = (/** @type {?} */ (target.target));
        }
        else if (target instanceof ElementRef) {
            element = (/** @type {?} */ (target.nativeElement));
        }
        else {
            return;
        }
        this.openTarget(element);
    }
    /**
     * @param {?} target
     * @return {?}
     */
    openTarget(target) {
        /** @type {?} */
        const position = this.getPositionOfTarget(target);
        this.openAtPosition(target, position);
        this.watchResize(target);
        this.watchScroll(target);
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    watchResize(target) {
        if (!this.viewportOnly) {
            return;
        }
        fromEvent(window, 'resize')
            .pipe(flatMap((/**
         * @return {?}
         */
        () => this.filterInViewport(target))), throttleTime(50), map((/**
         * @return {?}
         */
        () => this.getPositionOfTarget(target))), tap((/**
         * @param {?} pos
         * @return {?}
         */
        pos => (this._position = pos))), takeUntil(this.onDestroy$))
            .subscribe();
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    watchScroll(target) {
        if (!this.viewportOnly) {
            return;
        }
        if (this.content && !this.backdrop) {
            this.content.scrollEvents = true;
            merge(fromEvent(window, 'mousewheel'), fromEvent(window, 'touchmove'), this.content.ionScroll)
                .pipe(flatMap((/**
             * @return {?}
             */
            () => this.filterInViewport(target))), map((/**
             * @return {?}
             */
            () => this.getPositionOfTarget(target))), tap((/**
             * @param {?} pos
             * @return {?}
             */
            pos => (this._position = pos))), takeUntil(this.onDestroy$))
                .subscribe();
        }
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    filterInViewport(target) {
        return from(this.inViewport(target.getBoundingClientRect())).pipe(tap((/**
         * @param {?} inViewport
         * @return {?}
         */
        inViewport => !inViewport ? (this.hidden = true) : (this.hidden = false))), filter((/**
         * @param {?} inViewPort
         * @return {?}
         */
        inViewPort => this.overlay.open && inViewPort)));
    }
    /**
     * @private
     * @param {?} target
     * @param {?} position
     * @return {?}
     */
    openAtPosition(target, position) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.scrollToPosition(target, position);
            this._position = position;
            this.overlay.show();
        });
    }
    /**
     * @private
     * @param {?} target
     * @param {?} position
     * @return {?}
     */
    scrollToPosition(target, position) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.content && this.scrollToTarget) {
                /** @type {?} */
                const isInViewport = yield this.inViewport(target.getBoundingClientRect());
                if (isInViewport) {
                    return;
                }
                yield this.content.scrollToPoint(position.left, position.top, this.scrollSpeed);
            }
        });
    }
    /**
     * @param {?} position
     * @return {?}
     */
    inViewport(position) {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const height = this.platform.height();
            /** @type {?} */
            const width = this.platform.width();
            return (position.top <= height &&
                position.bottom >= 0 &&
                position.left < width &&
                position.right > 0);
        });
    }
    /**
     * @private
     * @param {?} top
     * @param {?} left
     * @param {?} bottom
     * @param {?} right
     * @param {?} targetHeight
     * @param {?} targetWidth
     * @return {?}
     */
    calculcatePositioning(top, left, bottom, right, targetHeight, targetWidth) {
        // calculates the position of the popover without considering arrow and overlay offset
        /** @type {?} */
        const width = this.platform.width();
        /** @type {?} */
        const height = this.platform.height();
        /** @type {?} */
        const _left = this.position === 'right' ||
            (width / 2 > left && this.position !== 'left');
        /** @type {?} */
        const _right = this.position === 'left' ||
            (width / 2 <= left && this.position !== 'right');
        /** @type {?} */
        const _top = this.position === 'below' ||
            (height / 2 > top && this.position !== 'above');
        /** @type {?} */
        const _bottom = this.position === 'above' ||
            (height / 2 <= top && this.position !== 'below');
        // transform origin
        /** @type {?} */
        let horizontal = 'left';
        /** @type {?} */
        let vertical = 'top';
        if (_left && _top) {
            // top left
            horizontal = 'left';
            vertical = 'top';
        }
        else if (_right && _bottom) {
            // bottom right
            left = right - this.width;
            top = bottom - this.height;
            horizontal = 'right';
            vertical = 'bottom';
        }
        else if (_right && _top) {
            // top right
            left = right - this.width;
            horizontal = 'right';
            vertical = 'top';
        }
        else if (_left && _bottom) {
            // bottom left
            top = bottom - this.height;
            horizontal = 'left';
            vertical = 'bottom';
        }
        return {
            top,
            left,
            bottom,
            right,
            targetHeight,
            targetWidth,
            horizontal,
            vertical
        };
    }
    /**
     * @private
     * @return {?}
     */
    getArrowTop() {
        /** @type {?} */
        const isVert = ['auto', 'below', 'above'].some((/**
         * @param {?} s
         * @return {?}
         */
        s => s === this.position));
        if (isVert) {
            return this._position.vertical === 'top'
                ? -1 * this.arrowHeight
                : this.height;
        }
        if (this.arrowPosition === 'center') {
            return this.height / 2 - this.arrowWidth / 2;
        }
        return this._position.vertical === 'top'
            ? this._position.targetHeight / 2 - this.arrowHeight / 2
            : this.height - this.arrowHeight / 2 - this._position.targetHeight / 2;
    }
    /**
     * @private
     * @return {?}
     */
    getArrowLeft() {
        /** @type {?} */
        const isHorizontal = ['left', 'right'].some((/**
         * @param {?} s
         * @return {?}
         */
        s => s === this.position));
        if (isHorizontal) {
            return this._position.horizontal === 'left'
                ? -1 * this.arrowHeight
                : this.width;
        }
        if (this.arrowPosition === 'center') {
            return this.width / 2 - this.arrowHeight / 2;
        }
        return this._position.horizontal === 'left'
            ? this._position.targetWidth / 2 - this.arrowWidth / 2
            : this.width - this.arrowWidth / 2 - this._position.targetWidth / 2;
    }
    /**
     * @private
     * @return {?}
     */
    getContainerTop() {
        /** @type {?} */
        const isVert = ['auto', 'below', 'above'].some((/**
         * @param {?} s
         * @return {?}
         */
        s => s === this.position));
        /** @type {?} */
        const isTop = this._position.vertical === 'top';
        /** @type {?} */
        let offset = 0;
        if (this.arrow && isTop) {
            offset -= this.getVerticalArrowOffset();
        }
        else if (this.arrow && !isTop) {
            offset += this.getVerticalArrowOffset();
        }
        if (!isVert) {
            return this._position.top + offset;
        }
        if (!this.overlaysTarget && isTop) {
            offset += this._position.targetHeight;
        }
        else if (!this.overlaysTarget && !isTop) {
            offset -= this._position.targetHeight;
        }
        if (this.arrow && isTop) {
            offset += this.arrowHeight;
        }
        else if (this.arrow && !isTop) {
            offset -= this.arrowHeight;
        }
        return this._position.top + offset;
    }
    /**
     * @private
     * @return {?}
     */
    getVerticalArrowOffset() {
        /** @type {?} */
        let offset = 0;
        /** @type {?} */
        const isHorizontal = ['left', 'right'].some((/**
         * @param {?} s
         * @return {?}
         */
        s => s === this.position));
        if (this.arrowPosition === 'center' && isHorizontal) {
            offset += this.height / 2 - this._position.targetHeight / 2;
        }
        return offset;
    }
    /**
     * @private
     * @return {?}
     */
    getHorizontalArrowOffset() {
        /** @type {?} */
        let offset = 0;
        /** @type {?} */
        const isVertical = ['above', 'auto', 'below'].some((/**
         * @param {?} s
         * @return {?}
         */
        s => s === this.position));
        if (this.arrowPosition === 'center' && isVertical) {
            offset += this.width / 2 - this._position.targetWidth / 2;
        }
        return offset;
    }
    /**
     * @private
     * @return {?}
     */
    getContainerLeft() {
        /** @type {?} */
        const isHorizontal = ['left', 'right'].some((/**
         * @param {?} s
         * @return {?}
         */
        s => s === this.position));
        /** @type {?} */
        const isLeft = this._position.horizontal === 'left';
        /** @type {?} */
        let offset = 0;
        if (this.arrow && isLeft) {
            offset -= this.getHorizontalArrowOffset();
        }
        else if (this.arrow && !isLeft) {
            offset += this.getHorizontalArrowOffset();
        }
        if (!isHorizontal) {
            return this._position.left + offset;
        }
        if (!this.overlaysTarget && isLeft) {
            offset += this._position.targetWidth;
        }
        else if (!this.overlaysTarget && !isLeft) {
            offset -= this._position.targetWidth;
        }
        if (this.arrow && isLeft) {
            offset += this.arrowHeight;
        }
        else if (this.arrow && !isLeft) {
            offset -= this.arrowHeight;
        }
        return this._position.left + offset;
    }
}
FivPopover.decorators = [
    { type: Component, args: [{
                selector: 'fiv-popover',
                template: "<fiv-overlay>\n  <div *ngIf=\"backdrop && !hidden\" [ngClass]=\"classes\" class=\"fiv-popover-backdrop\" (click)=\"close()\">\n  </div>\n  <div *ngIf=\"!hidden\" [ngClass]=\"classes\" class=\"popover-container\" [style]=\"styles\">\n    <div #animation *ngIf=\"overlay?.open\" class=\"animation-container\" anim [anim.in]=\"animationIn\">\n      <ng-content>\n      </ng-content>\n      <svg *ngIf=\"arrow && !overlaysTarget\" class=\"arrow\" [style]=\"svgStyles\">\n        <polygon [attr.points]=\"triangle\" />\n      </svg>\n    </div>\n\n  </div>\n\n</fiv-overlay>",
                encapsulation: ViewEncapsulation.None,
                styles: [":host{--fiv-popover-backdrop-color:rgba(0, 0, 0, 0.2)}.popover-container{position:absolute;display:block}.animation-container{height:100%;position:relative}svg.arrow{position:absolute;fill:var(--ion-item-background)}.fiv-popover-backdrop{position:absolute;display:block;width:100vw;height:100vh;background:var(--fiv-popover-backdrop-color)}"]
            }] }
];
/** @nocollapse */
FivPopover.ctorParameters = () => [
    { type: Platform },
    { type: IonContent, decorators: [{ type: Host }, { type: Optional }] },
    { type: DomSanitizer },
    { type: Router }
];
FivPopover.propDecorators = {
    overlay: [{ type: ViewChild, args: [FivOverlay, { static: true },] }],
    animationContainer: [{ type: ViewChild, args: ['animation', { static: false },] }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    arrow: [{ type: Input }],
    arrowWidth: [{ type: Input }],
    arrowHeight: [{ type: Input }],
    arrowPosition: [{ type: Input }],
    backdrop: [{ type: Input }],
    overlaysTarget: [{ type: Input }],
    closeOnNavigation: [{ type: Input }],
    scrollToTarget: [{ type: Input }],
    scrollSpeed: [{ type: Input }],
    position: [{ type: Input }],
    classes: [{ type: Input }],
    viewportOnly: [{ type: Input }],
    inDuration: [{ type: Input }],
    outDuration: [{ type: Input }],
    animationIn: [{ type: Input }],
    animationOut: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FivPopover.prototype.overlay;
    /** @type {?} */
    FivPopover.prototype.animationContainer;
    /** @type {?} */
    FivPopover.prototype.width;
    /** @type {?} */
    FivPopover.prototype.height;
    /** @type {?} */
    FivPopover.prototype.arrow;
    /** @type {?} */
    FivPopover.prototype.arrowWidth;
    /** @type {?} */
    FivPopover.prototype.arrowHeight;
    /** @type {?} */
    FivPopover.prototype.arrowPosition;
    /** @type {?} */
    FivPopover.prototype.backdrop;
    /** @type {?} */
    FivPopover.prototype.overlaysTarget;
    /** @type {?} */
    FivPopover.prototype.closeOnNavigation;
    /** @type {?} */
    FivPopover.prototype.scrollToTarget;
    /** @type {?} */
    FivPopover.prototype.scrollSpeed;
    /** @type {?} */
    FivPopover.prototype.position;
    /** @type {?} */
    FivPopover.prototype.classes;
    /** @type {?} */
    FivPopover.prototype.viewportOnly;
    /** @type {?} */
    FivPopover.prototype._position;
    /** @type {?} */
    FivPopover.prototype.hidden;
    /** @type {?} */
    FivPopover.prototype.onDestroy$;
    /** @type {?} */
    FivPopover.prototype.onClose$;
    /** @type {?} */
    FivPopover.prototype.inDuration;
    /** @type {?} */
    FivPopover.prototype.outDuration;
    /** @type {?} */
    FivPopover.prototype.animationIn;
    /** @type {?} */
    FivPopover.prototype.animationOut;
    /**
     * @type {?}
     * @private
     */
    FivPopover.prototype.platform;
    /**
     * @type {?}
     * @private
     */
    FivPopover.prototype.content;
    /**
     * @type {?}
     * @private
     */
    FivPopover.prototype.dom;
    /**
     * @type {?}
     * @private
     */
    FivPopover.prototype.router;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/popover/popover-element.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivPopoverElementDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.ready = false;
        this.delay = 150;
    }
    /**
     * @param {?} visible
     * @return {?}
     */
    set show(visible) {
        this._show = visible;
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.show && this.ready) {
                this.fivPopover.open(this.el);
            }
            else if (this.fivPopover.overlay && this.fivPopover.overlay.open) {
                this.fivPopover.close();
            }
        }), 0);
    }
    /**
     * @return {?}
     */
    get show() {
        return this._show;
    }
    /**
     * @return {?}
     */
    open() {
        this.show = true;
    }
    /**
     * @return {?}
     */
    close() {
        this.show = false;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.ready = true;
            this.show = this._show;
        }), this.delay);
    }
}
FivPopoverElementDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fivPopover]',
                exportAs: 'fivPopover'
            },] }
];
/** @nocollapse */
FivPopoverElementDirective.ctorParameters = () => [
    { type: ElementRef }
];
FivPopoverElementDirective.propDecorators = {
    delay: [{ type: Input, args: ['fivPopover.delay',] }],
    fivPopover: [{ type: Input }],
    show: [{ type: Input, args: ['fivPopover.show',] }]
};
if (false) {
    /** @type {?} */
    FivPopoverElementDirective.prototype._show;
    /** @type {?} */
    FivPopoverElementDirective.prototype.ready;
    /** @type {?} */
    FivPopoverElementDirective.prototype.delay;
    /** @type {?} */
    FivPopoverElementDirective.prototype.fivPopover;
    /**
     * @type {?}
     * @private
     */
    FivPopoverElementDirective.prototype.el;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/popover/popover.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivPopoverModule {
}
FivPopoverModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivPopover, FivPopoverElementDirective],
                imports: [CommonModule, AnimationsModule, FivOverlayModule],
                exports: [FivPopover, FivPopoverElementDirective]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/router-item/router-item.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivRouterItem {
    /**
     * @param {?} router
     * @param {?} host
     */
    constructor(router, host) {
        this.router = router;
        this.host = host;
        this.active = false;
        this.detailIcon = 'chevron-forward';
        this.disabled = false;
        this.matchChildUrl = false;
        this.navigate = true;
        /**
         * The position of the active state.
         * Default value is: `"left"`
         */
        this.position = 'left';
        /**
         * The shape of the active state.
         * Possible values are: `"line"`, `"dot"` and `"rounded"`.
         * Default value is: `"line"`
         */
        this.shape = 'line';
    }
    /**
     * @return {?}
     */
    onclick() {
        if (this.navigate && this.pageUrl) {
            this.router.navigateByUrl(this.pageUrl);
        }
    }
    /**
     * @return {?}
     */
    get classes() {
        return `${this.position} ${this.shape}`;
    }
    /**
     * @return {?}
     */
    get activeClass() {
        return this.matchActiveUrl() || this.active;
    }
    /**
     * @return {?}
     */
    get disabledClass() {
        return this.disabled;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.router.events
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        event => event instanceof NavigationEnd)), filter((/**
         * @param {?} event
         * @return {?}
         */
        (event) => event.url === this.pageUrl)))
            .subscribe((/**
         * @return {?}
         */
        () => this.openExpandableHost()));
    }
    /**
     * @return {?}
     */
    openExpandableHost() {
        /** @type {?} */
        const isActive = this.matchActiveUrl() || this.active;
        if (isActive) {
            if (this.host && !this.host.isOpen) {
                this.host.open();
            }
        }
    }
    /**
     * @return {?}
     */
    getClasses() {
        return [this.position, this.shape];
    }
    /**
     * @return {?}
     */
    matchActiveUrl() {
        return this.matchChildUrl ? this.isChildUrl() : this.isCurrentUrl();
    }
    /**
     * @return {?}
     */
    isCurrentUrl() {
        return this.router.url === this.pageUrl;
    }
    /**
     * @return {?}
     */
    isChildUrl() {
        return this.router.url.startsWith(this.pageUrl);
    }
}
FivRouterItem.decorators = [
    { type: Component, args: [{
                selector: 'fiv-router-item',
                template: "<ion-menu-toggle auto-hide=\"false\">\n    <ion-item class=\"ion-activatable\" [color]=\"color\" [detail]=\"detail\" [detailIcon]=\"detailIcon\" [disabled]=\"disabled\"\n        [lines]=\"lines\">\n        <fiv-icon #fivIcon *ngIf=\"icon\" [name]=\"icon\"></fiv-icon>\n        <ion-label>{{text}}</ion-label>\n        <ion-ripple-effect type=\"bounded\"></ion-ripple-effect>\n    </ion-item>\n</ion-menu-toggle>\n<span [ngClass]=\"getClasses()\" class=\"indicator\"></span>",
                styles: [":host{display:block;position:relative;width:100%}:host(.active){--color-active:var(--ion-color-primary)}:host(.active) ion-item{--color:var(--color-active);--background:var(--fiv-background, var(--ion-color-light))}:host(.line){--width-line:4px;--background-line:var(--ion-color-primary)}:host(.active) .line{display:block;background:var(--background-line)}:host.active.left .line{width:var(--width-line);height:100%;top:0}:host.active.right .line{width:var(--width-line);height:100%;top:0}.indicator{position:absolute}:host.active .dot{display:block}:host.active.dot.left{padding-left:24px}.dot{width:var(--fiv-dot-width,8px);height:var(--fiv-dot-heigt,8px);background-color:var(--fiv-dot-color,var(--ion-color-primary));top:50%;border-radius:100%;transform:translateY(-50%);right:8px;display:none}.dot.left{left:8px;right:unset}.dot.right{right:8px}:host(.rounded.left){--border-radius-rounded-left:0 50px 50px 0}:host(.rounded.left) ion-item{--border-radius:var(--border-radius-rounded-left);--background:var(--fiv-background)}:host(.rounded.right){--border-radius-rounded-right:50px 0 0 50px}:host(.rounded.right) ion-item{--border-radius:var(--border-radius-rounded-right);--background:var(--fiv-background)}:host(.active.rounded){--background-rounded:var(--ion-color-primary-rgb);--opacity-rounded:0.25}:host(.active.rounded) ion-item{--background:rgba(var(--background-rounded), var(--opacity-rounded))}@media (any-hover:hover){:host(:hover){cursor:pointer}:host(:hover) ion-label{--color:var(--ion-color-primary)}:host(.dot:hover) ion-item,:host(.line:hover) ion-item,:host(.rounded:hover) ion-item{--background:var(--fiv-background-hover, var(--ion-color-light))}}.left{left:0}.right{right:0}ion-item{--border-style:none}fiv-icon{--fiv-padding-end:8px}:host(.router-item-disabled){pointer-events:none}"]
            }] }
];
/** @nocollapse */
FivRouterItem.ctorParameters = () => [
    { type: Router },
    { type: FivExpandable, decorators: [{ type: Optional }, { type: Host }] }
];
FivRouterItem.propDecorators = {
    fivIcon: [{ type: ViewChild, args: ['fivIcon', { static: false },] }],
    active: [{ type: Input }],
    color: [{ type: Input }],
    detail: [{ type: Input }],
    detailIcon: [{ type: Input }],
    disabled: [{ type: Input }],
    icon: [{ type: Input }],
    lines: [{ type: Input }],
    matchChildUrl: [{ type: Input }],
    navigate: [{ type: Input }],
    pageUrl: [{ type: Input }],
    position: [{ type: Input }],
    shape: [{ type: Input }],
    text: [{ type: Input }],
    onclick: [{ type: HostListener, args: ['click',] }],
    classes: [{ type: HostBinding, args: ['class',] }],
    activeClass: [{ type: HostBinding, args: ['class.active',] }],
    disabledClass: [{ type: HostBinding, args: ['class.router-item-disabled',] }]
};
if (false) {
    /** @type {?} */
    FivRouterItem.prototype.fivIcon;
    /** @type {?} */
    FivRouterItem.prototype.active;
    /** @type {?} */
    FivRouterItem.prototype.color;
    /** @type {?} */
    FivRouterItem.prototype.detail;
    /** @type {?} */
    FivRouterItem.prototype.detailIcon;
    /** @type {?} */
    FivRouterItem.prototype.disabled;
    /** @type {?} */
    FivRouterItem.prototype.icon;
    /** @type {?} */
    FivRouterItem.prototype.lines;
    /** @type {?} */
    FivRouterItem.prototype.matchChildUrl;
    /** @type {?} */
    FivRouterItem.prototype.navigate;
    /** @type {?} */
    FivRouterItem.prototype.pageUrl;
    /**
     * The position of the active state.
     * Default value is: `"left"`
     * @type {?}
     */
    FivRouterItem.prototype.position;
    /**
     * The shape of the active state.
     * Possible values are: `"line"`, `"dot"` and `"rounded"`.
     * Default value is: `"line"`
     * @type {?}
     */
    FivRouterItem.prototype.shape;
    /** @type {?} */
    FivRouterItem.prototype.text;
    /** @type {?} */
    FivRouterItem.prototype.router;
    /**
     * @type {?}
     * @private
     */
    FivRouterItem.prototype.host;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/router-item/router-item.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivRouterItemModule {
}
FivRouterItemModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivRouterItem],
                imports: [CommonModule, IonicModule, FivExpandableModule, FivIconModule],
                exports: [FivRouterItem]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/stepper/step/step.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivStep {
    constructor() {
        this.isLast = false;
        this.open = false;
        this.title = '';
        this.subtitle = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
}
FivStep.decorators = [
    { type: Component, args: [{
                selector: 'fiv-step',
                template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>",
                styles: [""]
            }] }
];
/** @nocollapse */
FivStep.ctorParameters = () => [];
FivStep.propDecorators = {
    index: [{ type: Input }],
    icon: [{ type: Input }],
    isLast: [{ type: Input }],
    open: [{ type: Input }],
    title: [{ type: Input }],
    subtitle: [{ type: Input }],
    content: [{ type: ViewChild, args: [TemplateRef, { static: false },] }]
};
if (false) {
    /** @type {?} */
    FivStep.prototype.index;
    /** @type {?} */
    FivStep.prototype.icon;
    /** @type {?} */
    FivStep.prototype.isLast;
    /** @type {?} */
    FivStep.prototype.open;
    /** @type {?} */
    FivStep.prototype.title;
    /** @type {?} */
    FivStep.prototype.subtitle;
    /** @type {?} */
    FivStep.prototype.content;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/stepper/step-header/step-header.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivStepHeader {
    constructor() {
        this.iconCompleted = 'checkmark';
        this.iconState = 'normal';
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} event
     * @param {?} icon
     * @return {?}
     */
    changeIconAndReveal(event, icon) {
        if (event.fromState === 'normal') {
            this.tempIcon = this.icon;
            this.icon = icon;
            this.iconState = 'normal';
        }
    }
    /**
     * @return {?}
     */
    complete() {
        this.iconState = 'rotate';
    }
    /**
     * @return {?}
     */
    reset() {
        this.icon = this.tempIcon;
    }
}
FivStepHeader.decorators = [
    { type: Component, args: [{
                selector: 'fiv-step-header',
                template: "<div class=\"number-container\">\n  <span *ngIf=\"index && !icon\" [@rotateAnim]=\"iconState\"\n    (@rotateAnim.done)=\"changeIconAndReveal($event,iconCompleted)\">{{index}}</span>\n  <ion-icon *ngIf=\"icon\" [@rotateAnim]=\"iconState\" (@rotateAnim.done)=\"changeIconAndReveal($event,iconCompleted)\"\n    [name]=\"icon\"></ion-icon>\n</div>\n<div class=\"step-content\">\n  <ng-content>\n  </ng-content>\n</div>",
                animations: [
                    trigger('rotateAnim', [
                        transition('normal => rotate', [animate('125ms ease-out')]),
                        transition('rotate => normal', [animate('125ms ease-in')]),
                        state('rotate', style({
                            opacity: '0',
                            transform: 'translate(-50%, -50%) rotateZ(45deg)'
                        })),
                        state('normal', style({
                            opacity: '1',
                            transform: 'translate(-50%, -50%) rotateZ(0deg)'
                        }))
                    ])
                ],
                styles: [":host{display:block;width:100%;height:72px;align-items:center;position:relative;padding-top:8px}.number-container{width:24px;height:24px;border-radius:100%;position:absolute;left:16px;background:var(--fiv-color-circle,var(--ion-color-primary));color:var(--fiv-color-circle-color,var(--ion-color-light))}.number-container *{position:absolute;left:50%;top:50%;transform:translate(-50%,-50%) rotateZ(0)}.step-content{padding-left:56px}"]
            }] }
];
/** @nocollapse */
FivStepHeader.ctorParameters = () => [];
FivStepHeader.propDecorators = {
    index: [{ type: Input }],
    icon: [{ type: Input }],
    iconCompleted: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FivStepHeader.prototype.index;
    /** @type {?} */
    FivStepHeader.prototype.icon;
    /** @type {?} */
    FivStepHeader.prototype.iconCompleted;
    /** @type {?} */
    FivStepHeader.prototype.iconState;
    /** @type {?} */
    FivStepHeader.prototype.tempIcon;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/stepper/step-content/step-content.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivStepContent {
    /**
     * @param {?} change
     */
    constructor(change) {
        this.change = change;
        this.isLast = false;
        this.isOpen = false;
        this.title = '';
        this.subtitle = '';
        this.fivDidOpen = new EventEmitter();
        this.fivDidClose = new EventEmitter();
        this.fivClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    open() {
        this.isOpen = true;
        this.change.detectChanges();
    }
    /**
     * @return {?}
     */
    close() {
        this.isOpen = false;
        this.change.detectChanges();
    }
    /**
     * @return {?}
     */
    completeAndClose() {
        this.close();
        this.complete();
    }
    /**
     * @return {?}
     */
    complete() {
        this.header.complete();
    }
    /**
     * @return {?}
     */
    reset() {
        this.header.reset();
    }
    /**
     * @return {?}
     */
    afterClose() {
        this.fivDidClose.emit(this);
    }
    /**
     * @return {?}
     */
    afterOpen() {
        this.fivDidOpen.emit(this);
    }
    /**
     * @return {?}
     */
    click() {
        this.fivClick.emit(this);
    }
}
FivStepContent.decorators = [
    { type: Component, args: [{
                selector: 'fiv-step-content',
                template: "<div *ngIf=\"!isLast\" class=\"timeline\"></div>\n<fiv-expandable [isOpen]=\"isOpen\" (fivDidClose)=\"afterClose()\" (fivDidOpen)=\"afterOpen()\" #self>\n  <div header class=\"ion-activatable\" (click)=\"click()\">\n    <fiv-step-header #header [index]=\"index\" [icon]=\"icon\">\n      <div class=\"header-title\">{{title}}</div>\n      <div class=\"header-subtitle\">{{subtitle}}</div>\n\n      <ion-ripple-effect type=\"bounded\"></ion-ripple-effect>\n    </fiv-step-header>\n  </div>\n  <ng-container content>\n    <div class=\"step-content\">\n      <ng-content></ng-content>\n    </div>\n  </ng-container>\n</fiv-expandable>",
                styles: [":host{display:block;width:100%;position:relative}.step-content{padding-left:44px;padding-bottom:24px}.timeline{width:1px;height:calc(100% - 32px);position:absolute;background:var(--fiv-color-timeline,var(--ion-color-medium));left:27.5px;top:36px}.ion-activatable{position:relative;overflow:hidden}.header-title{color:var(--fiv-color-title,var(--ion-color-dark))}.header-subtitle{color:var(--fiv-color-subtitle,var(--ion-color-medium));font-size:.8em}"]
            }] }
];
/** @nocollapse */
FivStepContent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
FivStepContent.propDecorators = {
    index: [{ type: Input }],
    icon: [{ type: Input }],
    isLast: [{ type: Input }],
    isOpen: [{ type: Input }],
    title: [{ type: Input }],
    subtitle: [{ type: Input }],
    fivDidOpen: [{ type: Output }],
    fivDidClose: [{ type: Output }],
    fivClick: [{ type: Output }],
    step: [{ type: ViewChild, args: ['self', { static: false },] }],
    header: [{ type: ViewChild, args: ['header', { static: false },] }]
};
if (false) {
    /** @type {?} */
    FivStepContent.prototype.index;
    /** @type {?} */
    FivStepContent.prototype.icon;
    /** @type {?} */
    FivStepContent.prototype.isLast;
    /** @type {?} */
    FivStepContent.prototype.isOpen;
    /** @type {?} */
    FivStepContent.prototype.title;
    /** @type {?} */
    FivStepContent.prototype.subtitle;
    /** @type {?} */
    FivStepContent.prototype.fivDidOpen;
    /** @type {?} */
    FivStepContent.prototype.fivDidClose;
    /** @type {?} */
    FivStepContent.prototype.fivClick;
    /** @type {?} */
    FivStepContent.prototype.step;
    /** @type {?} */
    FivStepContent.prototype.header;
    /**
     * @type {?}
     * @private
     */
    FivStepContent.prototype.change;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/stepper/stepper-horizontal/stepper-horizontal.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivStepperHorizontal {
    constructor() {
        this.fivSelect = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.slides.lockSwipes(true);
    }
    /**
     * @return {?}
     */
    close() {
        this.slides.slideTo(0);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    open(index) {
        this.slides.lockSwipes(false);
        this.slides.slideTo(index);
        this.slides.lockSwipes(true);
    }
}
FivStepperHorizontal.decorators = [
    { type: Component, args: [{
                selector: 'fiv-stepper-horizontal',
                template: "<ion-grid fixed>\n  <ion-row>\n    <ion-col *ngFor=\"let content of contents.toArray(); let i = index; let f = first; let l = last;\"\n      [size]=\"12 / contents.length\">\n      <div class=\"ion-activatable\" (click)=\"fivSelect.emit(i)\">\n        <span *ngIf=\"!f\" class=\"line left\"></span>\n        <div class=\"number-container\">\n          <span *ngIf=\"!content.icon\">{{i +  1}}</span>\n          <ion-icon *ngIf=\"content.icon\" [name]=\"content.icon\"></ion-icon>\n        </div>\n\n        <ion-ripple-effect type=\"bounded\"></ion-ripple-effect>\n        <span *ngIf=\"!l\" class=\"line right\"></span>\n      </div>\n    </ion-col>\n  </ion-row>\n  <ion-row>\n    <ion-col *ngFor=\"let content of contents.toArray(); let i = index; let f = first; let l = last;\"\n      [size]=\"12 / contents.length\">\n      <div class=\"ion-activatable\" (click)=\"fivSelect.emit(i)\">\n        <div class=\"horizontal-content\">\n          <div class=\"header-title\">{{content.title}}</div>\n          <div class=\"header-subtitle\">{{content.subtitle}}</div>\n        </div>\n      </div>\n      <ion-ripple-effect type=\"bounded\"></ion-ripple-effect>\n    </ion-col>\n  </ion-row>\n</ion-grid>\n\n<ion-slides #slides pager=\"false\">\n  <ion-slide *ngFor=\"let content of contents; let i = index\">\n    <ng-container [ngTemplateOutlet]=\"content.content\"></ng-container>\n  </ion-slide>\n</ion-slides>",
                animations: [
                    trigger('rotateAnim', [
                        transition('normal => rotate', [animate('125ms ease-out')]),
                        transition('rotate => normal', [animate('125ms ease-in')]),
                        state('rotate', style({
                            opacity: '0',
                            transform: 'translate(-50%, -50%) rotateZ(45deg)'
                        })),
                        state('normal', style({
                            opacity: '1',
                            transform: 'translate(-50%, -50%) rotateZ(0deg)'
                        }))
                    ])
                ],
                styles: [".number-container{width:24px;height:24px;border-radius:100%;position:relative;left:50%;transform:translateX(-50%);background:var(--fiv-color-circle,var(--ion-color-primary));color:var(--fiv-color-circle-color,var(--ion-color-light))}.number-container *{position:absolute;left:50%;top:50%;transform:translate(-50%,-50%) rotateZ(0)}ion-col{text-align:center;padding:0}.line{width:calc(50% - 20px);height:1px;position:absolute;background:var(--fiv-color-timeline,var(--ion-color-medium));top:50%;transform:translateY(-50%)}.left{left:0}.right{right:0}.header-title{color:var(--fiv-color-title,var(--ion-color-dark))}.header-subtitle{color:var(--fiv-color-subtitle,var(--ion-color-medium));font-size:.8em}"]
            }] }
];
/** @nocollapse */
FivStepperHorizontal.ctorParameters = () => [];
FivStepperHorizontal.propDecorators = {
    contents: [{ type: Input }],
    slides: [{ type: ViewChild, args: ['slides', { static: true },] }],
    fivSelect: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FivStepperHorizontal.prototype.contents;
    /** @type {?} */
    FivStepperHorizontal.prototype.slides;
    /** @type {?} */
    FivStepperHorizontal.prototype.fivSelect;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/stepper/stepper.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivStepper {
    constructor() {
        this.mode = 'vertical';
        this.fivClick = new EventEmitter();
        this.fivClose = new EventEmitter();
        this.currentIndex = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} index
     * @return {?}
     */
    open(index) {
        if (this.mode === 'horizontal') {
            this.currentIndex = index;
            this.horizontal.open(index);
        }
        else {
            if (this.steps.toArray()[index]) {
                if (this.steps.toArray()[index].isOpen) {
                    this.close(index);
                }
                else {
                    this.currentIndex = index;
                    this.steps.toArray()[index].open();
                }
            }
            else {
            }
        }
    }
    /**
     * @return {?}
     */
    openFirst() {
        this.open(0);
    }
    /**
     * @return {?}
     */
    openLast() {
        this.open(this.steps.toArray().length - 1);
    }
    /**
     * @param {?} index
     * @param {?=} param
     * @return {?}
     */
    close(index, param) {
        this.param = param;
        if (this.mode === 'horizontal') {
            this.currentIndex = 0;
            this.horizontal.close();
        }
        else {
            this.currentIndex = -1;
            this.steps.toArray()[index].close();
        }
    }
    /**
     * @return {?}
     */
    closeFirst() {
        this.close(0);
    }
    /**
     * @return {?}
     */
    closeLast() {
        this.close(this.steps.toArray().length - 1);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    select(index) {
        if (index >= 0 && index < this.contents.length) {
            if (this.mode === 'vertical') {
                this.closeAll();
            }
            this.open(index);
        }
    }
    /**
     * @return {?}
     */
    closeAll() {
        if (this.mode === 'horizontal') {
            this.currentIndex = 0;
            this.horizontal.close();
        }
        else {
            this.steps.forEach((/**
             * @param {?} step
             * @return {?}
             */
            step => {
                step.close();
            }));
        }
    }
    /**
     * @return {?}
     */
    next() {
        /** @type {?} */
        const next = this.currentIndex < this.steps.length ? this.currentIndex + 1 : -1;
        this.select(next);
    }
    /**
     * @return {?}
     */
    previous() {
        /** @type {?} */
        const next = this.currentIndex > 0 ? this.currentIndex + -1 : -1;
        this.select(next);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    completeStep(index) {
        if (this.mode === 'horizontal') {
            // not yet impletented
        }
        else {
            this.steps.toArray()[index].complete();
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    completeAndCloseStep(index) {
        if (this.mode === 'horizontal') {
            // not yet impletented
        }
        else {
            this.steps.toArray()[index].completeAndClose();
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    reset(index) {
        if (this.mode === 'horizontal') {
            // not yet impletented
        }
        else {
            this.steps.toArray()[index].reset();
        }
    }
}
FivStepper.decorators = [
    { type: Component, args: [{
                selector: 'fiv-stepper',
                template: "<ion-list *ngIf=\"mode === 'vertical'\">\n  <fiv-step-content (fivDidClose)=\"fivClose.emit({index: i, param: param}); param = null;\" (fivClick)=\"fivClick.emit(i)\" *ngFor=\"let content of contents; let i = index; let l = last;\" [icon]=\"content.icon\" [index]=\"i + 1\"\n    [isLast]=\"l\" [title]=\"content.title\" [subtitle]=\"content.subtitle\" [isOpen]=\"content.open\">\n    <ng-container [ngTemplateOutlet]=\"content.content\"></ng-container>\n  </fiv-step-content>\n</ion-list>\n<div *ngIf=\"mode === 'horizontal'\">\n  <fiv-stepper-horizontal (fivSelect)=\"select($event)\" [contents]=\"contents\"></fiv-stepper-horizontal>\n</div>",
                styles: [":host{display:block;width:100%}"]
            }] }
];
/** @nocollapse */
FivStepper.ctorParameters = () => [];
FivStepper.propDecorators = {
    contents: [{ type: ContentChildren, args: [FivStep,] }],
    steps: [{ type: ViewChildren, args: [FivStepContent,] }],
    horizontal: [{ type: ViewChild, args: [FivStepperHorizontal, { static: false },] }],
    mode: [{ type: Input }],
    fivClick: [{ type: Output }],
    fivClose: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FivStepper.prototype.contents;
    /** @type {?} */
    FivStepper.prototype.steps;
    /** @type {?} */
    FivStepper.prototype.horizontal;
    /** @type {?} */
    FivStepper.prototype.mode;
    /** @type {?} */
    FivStepper.prototype.fivClick;
    /** @type {?} */
    FivStepper.prototype.fivClose;
    /** @type {?} */
    FivStepper.prototype.currentIndex;
    /** @type {?} */
    FivStepper.prototype.param;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/stepper/stepper.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivStepperModule {
}
FivStepperModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    FivStepper,
                    FivStepContent,
                    FivStepperHorizontal,
                    FivStep,
                    FivStepHeader
                ],
                imports: [CommonModule, IonicModule, FivExpandableModule],
                exports: [
                    FivStepper,
                    FivStepContent,
                    FivStepperHorizontal,
                    FivStep,
                    FivStepHeader
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/searchbar/searchbar.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivSearchbar {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        this.searching = false;
        this.titleVisible = true;
        this.closeButtonVisible = false;
        this.smallWidth = 120;
        this.searchIcon = 'search';
        this.closeIcon = 'close';
        this._small = false;
        this.fivInputChange = new EventEmitter();
        this.fivClose = new EventEmitter();
        this.open = new EventEmitter();
        this.state = 'normal';
    }
    /**
     * @param {?} s
     * @return {?}
     */
    set small(s) {
        if (s && !this._small) {
            this.shrink();
        }
        else if (!s && this._small) {
            this.grow();
        }
        this._small = s;
    }
    /**
     * @return {?}
     */
    get small() {
        return this._small;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.state = this._small ? 'small' : 'normal';
    }
    /**
     * @return {?}
     */
    shrink() {
        this.state = 'small';
    }
    /**
     * @return {?}
     */
    grow() {
        this.state = 'normal';
    }
    /**
     * @return {?}
     */
    openSearchbar() {
        if (this._small) {
            this.state = 'normal';
        }
        this._open();
    }
    /**
     * @return {?}
     */
    toggleSearchbar() {
        if (this.searching) {
            this.closeSearchbar();
        }
        else {
            this.openSearchbar();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    searchBarStateChange(event) {
        if (event.fromState === 'normal' && event.toState === 'small') {
        }
        if (event.fromState === 'small' && event.toState === 'normal') {
        }
    }
    /**
     * @private
     * @return {?}
     */
    _open() {
        this.searching = true;
        this.titleVisible = false;
        this.open.emit();
    }
    /**
     * @return {?}
     */
    closeSearchbar() {
        if (this.small) {
            this.state = 'small';
        }
        this.searching = false;
        this.fivClose.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    searchAnimDone(event) {
        if (event.fromState !== 'void') {
            this.closeButtonVisible = true;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    closeAnimDone(event) {
        if (event.fromState !== 'void') {
            this.searching = false;
        }
    }
    /**
     * @param {?} event
     * @param {?} input
     * @return {?}
     */
    seachbarAnimDone(event, input) {
        if (event.fromState !== 'void') {
            this.titleVisible = true;
        }
        else {
            input.setFocus();
        }
    }
}
FivSearchbar.decorators = [
    { type: Component, args: [{
                selector: 'fiv-searchbar',
                template: "<ion-toolbar [@searchbarAnim]=\"{value:state, params: {width: smallWidth}}\"\n  (@searchbarAnim.done)=\"searchBarStateChange($event)\" [ngClass]=\"{'small': state === 'small'}\">\n  <ion-buttons slot=\"start\">\n    <ng-content select=\"[start]\"></ng-content>\n\n  </ion-buttons>\n  <ion-title [@titleAnim] *ngIf=\"titleVisible && state !== 'small'\">{{title}}</ion-title>\n  <ion-input (ionChange)=\"fivInputChange.emit($event)\" [placeholder]=\"!titleVisible ? placeholder : ''\" autofocus #input\n    class=\"searchbarbar\" [@titleAnim] (@titleAnim.done)=\"seachbarAnimDone($event,input)\" *ngIf=\"searching\">\n  </ion-input>\n\n  <ion-buttons slot=\"end\">\n    <ion-button (click)=\"toggleSearchbar()\">\n      <fiv-icon slot=\"icon-only\" [name]=\"searching ? closeIcon : searchIcon\"></fiv-icon>\n    </ion-button>\n    <ng-content select=\"[end]\"></ng-content>\n  </ion-buttons>\n</ion-toolbar>",
                animations: [
                    trigger('searchbarAnim', [
                        transition('small => normal', [animate('125ms ease-out')]),
                        transition('normal => small', [animate('95ms ease-in')]),
                        state('small', style({ width: '{{width}}px' }), {
                            params: { width: 120 }
                        }),
                        state('normal', style({ width: '100%' }))
                    ]),
                    trigger('titleAnim', [
                        transition('void => *', [
                            style({ opacity: '0', transform: 'translateY(-20%)' }),
                            animate('175ms ease-out', style({ opacity: '1', transform: 'translateY(0)' }))
                        ])
                    ])
                ],
                styles: [":host{position:relative;display:block;width:100%;--fiv-toolbar-background:var(--ion-color-light)}ion-toolbar{box-shadow:0 1px 4px rgba(0,0,0,.25);transition:border-bottom-right-radius 85ms;margin-top:env(safe-area-inset-top);--background:var(--fiv-toolbar-background)}ion-toolbar.small{border-bottom-right-radius:12px}.searchbarbar{float:right}"]
            }] }
];
/** @nocollapse */
FivSearchbar.ctorParameters = () => [
    { type: Renderer2 }
];
FivSearchbar.propDecorators = {
    title: [{ type: Input }],
    placeholder: [{ type: Input }],
    smallWidth: [{ type: Input }],
    searchIcon: [{ type: Input }],
    closeIcon: [{ type: Input }],
    small: [{ type: Input }],
    fivInputChange: [{ type: Output }],
    fivClose: [{ type: Output }],
    open: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FivSearchbar.prototype.searching;
    /** @type {?} */
    FivSearchbar.prototype.titleVisible;
    /** @type {?} */
    FivSearchbar.prototype.closeButtonVisible;
    /** @type {?} */
    FivSearchbar.prototype.title;
    /** @type {?} */
    FivSearchbar.prototype.placeholder;
    /** @type {?} */
    FivSearchbar.prototype.smallWidth;
    /** @type {?} */
    FivSearchbar.prototype.searchIcon;
    /** @type {?} */
    FivSearchbar.prototype.closeIcon;
    /** @type {?} */
    FivSearchbar.prototype._small;
    /** @type {?} */
    FivSearchbar.prototype.fivInputChange;
    /** @type {?} */
    FivSearchbar.prototype.fivClose;
    /** @type {?} */
    FivSearchbar.prototype.open;
    /** @type {?} */
    FivSearchbar.prototype.state;
    /** @type {?} */
    FivSearchbar.prototype.renderer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/searchbar/searchbar.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivSearchbarModule {
}
FivSearchbarModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivSearchbar],
                imports: [CommonModule, IonicModule, FivIconModule],
                exports: [FivSearchbar]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/lazy-image/lazy-image.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivLazyImage {
    /**
     * @param {?} fivImage
     * @param {?} image
     */
    constructor(fivImage, image) {
        this.fivImage = fivImage;
        this.image = image;
        this.virtual = false;
        this.inViewport = false;
        this.willShow = new EventEmitter();
        this.willHide = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const io = new IntersectionObserver((/**
         * @param {?} entries
         * @param {?} observer
         * @return {?}
         */
        (entries, observer) => {
            entries.forEach((/**
             * @param {?} entry
             * @return {?}
             */
            entry => {
                if (entry.isIntersecting) {
                    if (!this.inViewport) {
                        this.handleIntersection();
                        if (!this.virtual) {
                            io.disconnect();
                        }
                    }
                }
                else {
                    if (this.inViewport) {
                        this.inViewport = false;
                        if (this.fivImage) {
                            this.willHide.emit(this.fivImage);
                        }
                        else if (this.image) {
                            this.willHide.emit(this.image.nativeElement);
                        }
                    }
                }
            }));
        }));
        io['POLL_INTERVAL'] = 100;
        if (this.fivImage) {
            io.observe(this.fivImage.thumbnail.nativeElement);
        }
        else if (this.image) {
            io.observe(this.image.nativeElement);
        }
    }
    /**
     * @return {?}
     */
    handleIntersection() {
        this.inViewport = true;
        if (this.fivLazyImage) {
            if (this.fivImage) {
                this.fivImage.src = this.fivLazyImage;
                this.willShow.emit(this.fivImage);
            }
            else if (this.image) {
                this.image.nativeElement.src = this.fivLazyImage;
                this.willShow.emit(this.image.nativeElement);
            }
        }
        else {
            if (this.fivImage) {
                this.willShow.emit(this.fivImage);
            }
            else if (this.image) {
                this.willShow.emit(this.image.nativeElement);
            }
        }
    }
}
FivLazyImage.decorators = [
    { type: Directive, args: [{
                selector: '[fivLazyImage]'
            },] }
];
/** @nocollapse */
FivLazyImage.ctorParameters = () => [
    { type: FivGalleryImage, decorators: [{ type: Host }, { type: Self }, { type: Optional }] },
    { type: ElementRef, decorators: [{ type: Host }, { type: Self }, { type: Optional }] }
];
FivLazyImage.propDecorators = {
    fivLazyImage: [{ type: Input }],
    virtual: [{ type: Input }],
    willShow: [{ type: Output }],
    willHide: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FivLazyImage.prototype.fivLazyImage;
    /** @type {?} */
    FivLazyImage.prototype.virtual;
    /** @type {?} */
    FivLazyImage.prototype.inViewport;
    /** @type {?} */
    FivLazyImage.prototype.willShow;
    /** @type {?} */
    FivLazyImage.prototype.willHide;
    /** @type {?} */
    FivLazyImage.prototype.fivImage;
    /** @type {?} */
    FivLazyImage.prototype.image;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/lazy-image/lazy-image.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivLazyImageModule {
}
FivLazyImageModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivLazyImage],
                imports: [CommonModule],
                exports: [FivLazyImage]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/permissions/permissions.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivPermissions {
    /**
     * @param {?} viewContainer
     * @param {?} templateRef
     */
    constructor(viewContainer, templateRef) {
        this.viewContainer = viewContainer;
        this.templateRef = templateRef;
        this.allowedPermissions = [];
        this.uPermissions = [];
    }
    /**
     * @param {?} userPermissions
     * @return {?}
     */
    set fivPermissionsUserPermissions(userPermissions) {
        this.uPermissions = userPermissions || [];
        this.updateView();
    }
    /**
     * @param {?} allowed
     * @return {?}
     */
    set fivPermissions(allowed) {
        this.allowedPermissions = allowed || [];
        this.updateView();
    }
    /**
     * @return {?}
     */
    checkPermission() {
        /** @type {?} */
        let show = false;
        this.uPermissions.forEach((/**
         * @param {?} role
         * @return {?}
         */
        role => {
            if (this.allowedPermissions.find((/**
             * @param {?} a
             * @return {?}
             */
            a => a.toUpperCase() === role.toUpperCase()))) {
                show = true;
            }
        }));
        return show;
    }
    /**
     * @return {?}
     */
    updateView() {
        if (this.checkPermission()) {
            this.viewContainer.createEmbeddedView(this.templateRef);
        }
        else {
            this.viewContainer.clear();
        }
    }
}
FivPermissions.decorators = [
    { type: Directive, args: [{
                selector: '[fivPermissions]'
            },] }
];
/** @nocollapse */
FivPermissions.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef }
];
FivPermissions.propDecorators = {
    fivPermissionsUserPermissions: [{ type: Input }],
    fivPermissions: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FivPermissions.prototype.allowedPermissions;
    /** @type {?} */
    FivPermissions.prototype.uPermissions;
    /**
     * @type {?}
     * @private
     */
    FivPermissions.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    FivPermissions.prototype.templateRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/permissions/permissions.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivPermissionsModule {
}
FivPermissionsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivPermissions],
                imports: [CommonModule],
                exports: [FivPermissions]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/viewport/viewport.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivViewport {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.fivAppear = new EventEmitter();
        this.fivDisappear = new EventEmitter();
        this.visible = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.io = new IntersectionObserver((/**
         * @param {?} entries
         * @param {?} observer
         * @return {?}
         */
        (entries, observer) => {
            entries.forEach((/**
             * @param {?} entry
             * @return {?}
             */
            entry => {
                if (entry.isIntersecting) {
                    this.handleIntersection();
                }
                else {
                    this.handleNonIntersection();
                }
            }));
        }));
        this.io['POLL_INTERVAL'] = 100;
        this.io.observe(this.elementRef.nativeElement);
    }
    /**
     * @return {?}
     */
    handleNonIntersection() {
        if (this.visible) {
            this.fivDisappear.emit(this);
        }
        this.visible = false;
    }
    /**
     * @return {?}
     */
    handleIntersection() {
        if (!this.visible) {
            this.fivAppear.emit(this);
        }
        this.visible = true;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.io.disconnect();
    }
    /**
     * @return {?}
     */
    isVisible() {
        return this.visible;
    }
}
FivViewport.decorators = [
    { type: Directive, args: [{
                selector: '[fivViewport]',
                exportAs: 'viewport'
            },] }
];
/** @nocollapse */
FivViewport.ctorParameters = () => [
    { type: ElementRef }
];
FivViewport.propDecorators = {
    fivAppear: [{ type: Output }],
    fivDisappear: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FivViewport.prototype.fivAppear;
    /** @type {?} */
    FivViewport.prototype.fivDisappear;
    /**
     * @type {?}
     * @private
     */
    FivViewport.prototype.visible;
    /**
     * @type {?}
     * @private
     */
    FivViewport.prototype.io;
    /**
     * @type {?}
     * @private
     */
    FivViewport.prototype.elementRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/viewport/viewport.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FivViewportModule {
}
FivViewportModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FivViewport],
                imports: [CommonModule],
                exports: [FivViewport]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: fivethree-core.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { CUSTOM_EDITIABLE_LABEL_CONTROL_VALUE_ACCESSOR, CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR, DrawerState, FabState, FivAppBar, FivAppBarFabDirective, FivAppBarModule, FivAppBarTab, FivBackButton, FivBackButtonModule, FivBottomSheet, FivBottomSheetContent, FivBottomSheetModule, FivCenter, FivCenterModule, FivCollapsableMenu, FivCollapsableMenuButton, FivCollapsableModule, FivDialog, FivDialogModule, FivDialogService, FivEditableLabel, FivEditableLabelModule, FivExpandable, FivExpandableIndicator, FivExpandableModule, FivFab, FivFabModule, FivFeature, FivFeatureDiscovery, FivFeatureDiscoveryModule, FivGallery, FivGalleryImage, FivGalleryModule, FivGalleryToolbar, FivGalleryToolbarContent, FivIcon, FivIconModule, FivIfModule, FivIfPlatform, FivLazyImage, FivLazyImageModule, FivLoadingProgressBar, FivLoadingProgressBarModule, FivLoadingService, FivNetworkStatus, FivNetworkStatusModule, FivOverlay, FivOverlayContent, FivOverlayModule, FivOverlayService, FivPasswordInput, FivPasswordInputModule, FivPermissions, FivPermissionsModule, FivPopover, FivPopoverElementDirective, FivPopoverModule, FivPull, FivPullModule, FivRefresher, FivRefresherContent, FivRefresherModule, FivRouterItem, FivRouterItemModule, FivRoutingStateService, FivSearchbar, FivSearchbarModule, FivSpinner, FivSpinnerModule, FivStep, FivStepContent, FivStepHeader, FivStepper, FivStepperHorizontal, FivStepperModule, FivViewport, FivViewportModule, ImageService, Position, isNavigateable, fade as ɵa };
//# sourceMappingURL=fivethree-core.js.map
