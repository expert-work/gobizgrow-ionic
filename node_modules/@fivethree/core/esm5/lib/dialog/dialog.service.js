/**
 * @fileoverview added by tsickle
 * Generated from: lib/dialog/dialog.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { FivOverlayService } from '../overlay/overlay.service';
import { FivDialog } from '../dialog/dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "../overlay/overlay.service";
/**
 * @record
 */
export function DialogOptions() { }
if (false) {
    /** @type {?} */
    DialogOptions.prototype.verticalAlign;
    /** @type {?} */
    DialogOptions.prototype.horizontalAlign;
    /** @type {?} */
    DialogOptions.prototype.shape;
    /** @type {?} */
    DialogOptions.prototype.backdrop;
    /** @type {?} */
    DialogOptions.prototype.duration;
}
var FivDialogService = /** @class */ (function () {
    function FivDialogService(overlay) {
        this.overlay = overlay;
    }
    /**
     * @param {?} viewContainerRef
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    FivDialogService.prototype.openDialog = /**
     * @param {?} viewContainerRef
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    function (viewContainerRef, content, options) {
        /** @type {?} */
        var c = this.overlay.createOverlay(viewContainerRef, FivDialog, content);
        c.instance.verticalAlign = options ? options.verticalAlign : 'top';
        c.instance.verticalAlign = options ? options.verticalAlign : 'center';
        c.instance.backdrop = options ? options.backdrop : true;
        c.instance.duration = options ? options.duration : 0;
        c.instance.shape = options ? options.shape : 'card';
        c.instance.open();
        return c;
    };
    FivDialogService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FivDialogService.ctorParameters = function () { return [
        { type: FivOverlayService }
    ]; };
    /** @nocollapse */ FivDialogService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function FivDialogService_Factory() { return new FivDialogService(i0.ɵɵinject(i1.FivOverlayService)); }, token: FivDialogService, providedIn: "root" });
    return FivDialogService;
}());
export { FivDialogService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FivDialogService.prototype.overlay;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZml2ZXRocmVlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlhbG9nL2RpYWxvZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBb0IsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLGlCQUFpQixFQUFhLE1BQU0sNEJBQTRCLENBQUM7QUFDMUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7Ozs7QUFFdkQsbUNBTUM7OztJQUxDLHNDQUEyQzs7SUFDM0Msd0NBQTZDOztJQUM3Qyw4QkFBdUI7O0lBQ3ZCLGlDQUFrQjs7SUFDbEIsaUNBQWlCOztBQUduQjtJQUlFLDBCQUFvQixPQUEwQjtRQUExQixZQUFPLEdBQVAsT0FBTyxDQUFtQjtJQUFHLENBQUM7Ozs7Ozs7SUFFbEQscUNBQVU7Ozs7OztJQUFWLFVBQ0UsZ0JBQWtDLEVBQ2xDLE9BQXVCLEVBQ3ZCLE9BQXVCOztZQUVqQixDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQ2xDLGdCQUFnQixFQUNoQixTQUFTLEVBQ1QsT0FBTyxDQUNSO1FBQ0QsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDbkUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFDdEUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDeEQsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDcEQsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVsQixPQUFPLENBQUMsQ0FBQztJQUNYLENBQUM7O2dCQXhCRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQWJRLGlCQUFpQjs7OzJCQUQxQjtDQXFDQyxBQXpCRCxJQXlCQztTQXRCWSxnQkFBZ0I7Ozs7OztJQUNmLG1DQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZpdk92ZXJsYXlTZXJ2aWNlLCBOZ0NvbnRlbnQgfSBmcm9tICcuLi9vdmVybGF5L292ZXJsYXkuc2VydmljZSc7XG5pbXBvcnQgeyBGaXZEaWFsb2cgfSBmcm9tICcuLi9kaWFsb2cvZGlhbG9nLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGlhbG9nT3B0aW9ucyB7XG4gIHZlcnRpY2FsQWxpZ246ICdib3R0b20nIHwgJ2NlbnRlcicgfCAndG9wJztcbiAgaG9yaXpvbnRhbEFsaWduOiAnbGVmdCcgfCAnY2VudGVyJyB8ICdyaWdodCc7XG4gIHNoYXBlOiAnY2FyZCcgfCAnZmlsbCc7XG4gIGJhY2tkcm9wOiBib29sZWFuO1xuICBkdXJhdGlvbjogbnVtYmVyO1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBGaXZEaWFsb2dTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBvdmVybGF5OiBGaXZPdmVybGF5U2VydmljZSkge31cblxuICBvcGVuRGlhbG9nKFxuICAgIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgY29udGVudDogTmdDb250ZW50PGFueT4sXG4gICAgb3B0aW9ucz86IERpYWxvZ09wdGlvbnNcbiAgKSB7XG4gICAgY29uc3QgYyA9IHRoaXMub3ZlcmxheS5jcmVhdGVPdmVybGF5PEZpdkRpYWxvZz4oXG4gICAgICB2aWV3Q29udGFpbmVyUmVmLFxuICAgICAgRml2RGlhbG9nLFxuICAgICAgY29udGVudFxuICAgICk7XG4gICAgYy5pbnN0YW5jZS52ZXJ0aWNhbEFsaWduID0gb3B0aW9ucyA/IG9wdGlvbnMudmVydGljYWxBbGlnbiA6ICd0b3AnO1xuICAgIGMuaW5zdGFuY2UudmVydGljYWxBbGlnbiA9IG9wdGlvbnMgPyBvcHRpb25zLnZlcnRpY2FsQWxpZ24gOiAnY2VudGVyJztcbiAgICBjLmluc3RhbmNlLmJhY2tkcm9wID0gb3B0aW9ucyA/IG9wdGlvbnMuYmFja2Ryb3AgOiB0cnVlO1xuICAgIGMuaW5zdGFuY2UuZHVyYXRpb24gPSBvcHRpb25zID8gb3B0aW9ucy5kdXJhdGlvbiA6IDA7XG4gICAgYy5pbnN0YW5jZS5zaGFwZSA9IG9wdGlvbnMgPyBvcHRpb25zLnNoYXBlIDogJ2NhcmQnO1xuICAgIGMuaW5zdGFuY2Uub3BlbigpO1xuXG4gICAgcmV0dXJuIGM7XG4gIH1cbn1cbiJdfQ==