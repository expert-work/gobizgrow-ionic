/**
 * @fileoverview added by tsickle
 * Generated from: lib/bottom-sheet/bottom-sheet.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FivBottomSheetContent } from './bottom-sheet-content/bottom-sheet-content.component';
import { Component, Input, Output, EventEmitter, ElementRef, Renderer2, ContentChild } from '@angular/core';
import { DomController, Platform } from '@ionic/angular';
import { DrawerState } from './drawer-state';
import { merge, Subject, fromEvent, from } from 'rxjs';
import { takeUntil, map, tap, flatMap, repeat, withLatestFrom, filter, first, take, repeatWhen } from 'rxjs/operators';
/**
 * @record
 */
export function PanEvent() { }
if (false) {
    /** @type {?} */
    PanEvent.prototype.currentOffset;
    /** @type {?} */
    PanEvent.prototype.startOffset;
    /** @type {?} */
    PanEvent.prototype.currentTop;
    /** @type {?} */
    PanEvent.prototype.startTop;
    /** @type {?} */
    PanEvent.prototype.distance;
    /** @type {?} */
    PanEvent.prototype.touch;
}
var FivBottomSheet = /** @class */ (function () {
    function FivBottomSheet(_element, _renderer, _domCtrl, _platform) {
        this._element = _element;
        this._renderer = _renderer;
        this._domCtrl = _domCtrl;
        this._platform = _platform;
        this.dockedHeight = 80;
        this.shouldBounce = true;
        this.distanceTop = 56;
        this.transition = '0.25s';
        this.state = DrawerState.Bottom;
        this.bounceThreshold = 40;
        this.panThreshold = 20;
        this.panEnabled = true;
        this.stateChange = new EventEmitter();
        this.fivOpen = new EventEmitter();
        this.fivDocked = new EventEmitter();
        this.fivClose = new EventEmitter();
        this.fivProgress = new EventEmitter();
        this.scrollTop = 0;
        this.$onDestroy = new Subject();
    }
    /**
     * @return {?}
     */
    FivBottomSheet.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.$onDestroy.next();
    };
    /**
     * @return {?}
     */
    FivBottomSheet.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._setDrawerState(this.state);
        this.content.shouldBounce = this.shouldBounce;
        /** @type {?} */
        var touchmove = fromEvent(this._element.nativeElement, 'touchmove', {
            passive: true
        });
        /** @type {?} */
        var touchend = merge(fromEvent(this._element.nativeElement, 'touchend', {
            passive: true
        }), fromEvent(this._element.nativeElement, 'touchcancel', {
            passive: true
        }));
        /** @type {?} */
        var getScrollContent = from(this.content.content.getScrollElement());
        /** @type {?} */
        var scroll = this.content.content.ionScroll.pipe(tap((/**
         * @param {?} el
         * @return {?}
         */
        function (el) { return (_this.scrollTop = el.detail.scrollTop); })), takeUntil(this.$onDestroy));
        scroll.subscribe();
        this.content.content.ionScrollEnd
            .pipe(filter((/**
         * @param {?} el
         * @return {?}
         */
        function (el) { return _this.scrollTop === 0 && _this.state === DrawerState.Top; })), tap((/**
         * @return {?}
         */
        function () { return _this.content.content.scrollByPoint(0, 1, 0); })), takeUntil(this.$onDestroy))
            .subscribe();
        /** @type {?} */
        var canStart = touchmove.pipe(filter((/**
         * @return {?}
         */
        function () { return _this.scrollTop === 0; })));
        /** @type {?} */
        var start = canStart.pipe(take(1), tap((/**
         * @param {?} s
         * @return {?}
         */
        function (s) { return _this._handlePanStart(s); })));
        /** @type {?} */
        var pan = start.pipe(filter((/**
         * @return {?}
         */
        function () { return _this.panEnabled; })), flatMap((/**
         * @return {?}
         */
        function () { return touchmove; })), map((/**
         * @param {?} tm
         * @return {?}
         */
        function (tm) { return _this.calculatePanEvent(tm); })));
        /** @type {?} */
        var handlePan = pan.pipe(filter((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return Math.abs(p.distance) > _this.panThreshold; })), map((/**
         * @param {?} tm
         * @return {?}
         */
        function (tm) { return _this._handlePan(tm); })), takeUntil(touchend), repeat(), takeUntil(this.$onDestroy));
        /** @type {?} */
        var handleBackPan = pan
            .pipe(filter((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return Math.abs(p.distance) <= _this.panThreshold && _this.content.panning; })), map((/**
         * @param {?} tm
         * @return {?}
         */
        function (tm) { return _this._handlePan(tm); })), takeUntil(touchend), repeat(), takeUntil(this.$onDestroy))
            .subscribe();
        handlePan
            .pipe(first(), tap((/**
         * @return {?}
         */
        function () { return (_this.content.panning = true); })), repeatWhen((/**
         * @return {?}
         */
        function () { return touchend; })), takeUntil(this.$onDestroy))
            .subscribe();
        handlePan
            .pipe(flatMap((/**
         * @return {?}
         */
        function () { return touchend; })), first(), withLatestFrom(pan), tap((/**
         * @return {?}
         */
        function () { return _this.content.content.scrollByPoint(0, 1, 0); })), tap((/**
         * @return {?}
         */
        function () { return (_this.content.panning = false); })), map((/**
         * @param {?} ev
         * @return {?}
         */
        function (ev) { return ev[1]; })), repeat(), takeUntil(this.$onDestroy))
            .subscribe((/**
         * @param {?} ev
         * @return {?}
         */
        function (ev) { return _this._handlePanEnd(ev); }));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FivBottomSheet.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!changes.state) {
            return;
        }
        this._setDrawerState(changes.state.currentValue);
        this.updateContent(changes.state.currentValue);
    };
    /**
     * @param {?} state
     * @return {?}
     */
    FivBottomSheet.prototype.updateContent = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        if (this.content) {
            this.content.updateState(state);
        }
    };
    /**
     * @private
     * @param {?} state
     * @return {?}
     */
    FivBottomSheet.prototype._setDrawerState = /**
     * @private
     * @param {?} state
     * @return {?}
     */
    function (state) {
        this._renderer.setStyle(this._element.nativeElement, 'transition', this.transition);
        switch (state) {
            case DrawerState.Bottom:
                this.content.content.scrollToTop(0);
                this._setTranslateY(this._platform.height());
                break;
            case DrawerState.Docked:
                this.content.content.scrollToTop(0);
                this._setTranslateY(this._platform.height() - this.dockedHeight);
                break;
            default:
                this._setTranslateY(this.distanceTop);
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    FivBottomSheet.prototype._handlePanStart = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._startPositionTop = this.getCurrentTop();
        this._startPositionOffset = event.touches[0].pageY;
    };
    /**
     * @return {?}
     */
    FivBottomSheet.prototype.getCurrentTop = /**
     * @return {?}
     */
    function () {
        return this._element.nativeElement.getBoundingClientRect().top;
    };
    /**
     * @private
     * @param {?} ev
     * @return {?}
     */
    FivBottomSheet.prototype._handlePanEnd = /**
     * @private
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        if (this.shouldBounce) {
            this._renderer.setStyle(this._element.nativeElement, 'transition', this.transition);
            switch (this.state) {
                case DrawerState.Docked:
                    this._handleDockedPanEnd(ev);
                    break;
                case DrawerState.Top:
                    this._handleTopPanEnd(ev);
                    break;
                default:
                    this._handleBottomPanEnd(ev);
            }
        }
        this.stateChange.emit(this.state);
    };
    /**
     * @private
     * @param {?} ev
     * @return {?}
     */
    FivBottomSheet.prototype._handleTopPanEnd = /**
     * @private
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        if (ev.distance > this.bounceThreshold) {
            if (this.state !== DrawerState.Docked) {
                this.state = DrawerState.Docked;
                this.fivDocked.emit(this);
            }
        }
        else {
            this._setTranslateY(this.distanceTop);
        }
    };
    /**
     * @private
     * @param {?} ev
     * @return {?}
     */
    FivBottomSheet.prototype._handleDockedPanEnd = /**
     * @private
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        /** @type {?} */
        var absDeltaY = Math.abs(ev.distance);
        if (absDeltaY > this.bounceThreshold && ev.distance < 0) {
            if (this.state !== DrawerState.Top) {
                this.state = DrawerState.Top;
                this.fivOpen.emit();
            }
        }
        else if (absDeltaY > this.bounceThreshold && ev.distance > 0) {
            if (this.state !== DrawerState.Bottom) {
                this.close();
            }
        }
        else {
            this._setTranslateY(this._platform.height() - this.dockedHeight);
        }
    };
    /**
     * @private
     * @param {?} ev
     * @return {?}
     */
    FivBottomSheet.prototype._handleBottomPanEnd = /**
     * @private
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        if (-ev.distance > this.bounceThreshold) {
            if (this.state !== DrawerState.Docked) {
                this.state = DrawerState.Docked;
                this.fivDocked.emit();
            }
        }
        else {
            this._setTranslateY('100vh');
        }
    };
    /**
     * @param {?} ev
     * @return {?}
     */
    FivBottomSheet.prototype.calculatePanEvent = /**
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        return {
            currentOffset: ev.touches[0].pageY,
            startOffset: this._startPositionOffset,
            startTop: this._startPositionTop,
            currentTop: this.getCurrentTop(),
            distance: ev.touches[0].pageY - this._startPositionOffset,
            touch: ev
        };
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    FivBottomSheet.prototype._handlePan = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._renderer.setStyle(this._element.nativeElement, 'transition', 'none');
        if (event.currentTop >= 0 && event.currentTop <= this._platform.height()) {
            /** @type {?} */
            var newTop = this._startPositionTop + event.distance;
            if (newTop >= this.distanceTop) {
                this._setTranslateY(newTop);
            }
            else if (newTop <= this.distanceTop && this.content.panning) {
                this._setTranslateY(this.distanceTop);
                this.content.content.scrollToPoint(0, 0 - newTop, 0);
            }
            return event;
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    FivBottomSheet.prototype._setTranslateY = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        this.fivProgress.emit(1 - value / (this._platform.height() - this.dockedHeight));
        this._domCtrl.write((/**
         * @return {?}
         */
        function () {
            _this._renderer.setStyle(_this._element.nativeElement, 'transform', 'translateY(' + value + 'px)');
        }));
    };
    /**
     * @return {?}
     */
    FivBottomSheet.prototype.open = /**
     * @return {?}
     */
    function () {
        this.state = DrawerState.Top;
        this._setDrawerState(this.state);
        this.updateContent(this.state);
    };
    /**
     * @return {?}
     */
    FivBottomSheet.prototype.close = /**
     * @return {?}
     */
    function () {
        this.state = DrawerState.Bottom;
        this._setDrawerState(this.state);
        this.updateContent(this.state);
        this.fivClose.emit();
    };
    /**
     * @return {?}
     */
    FivBottomSheet.prototype.dock = /**
     * @return {?}
     */
    function () {
        this.state = DrawerState.Docked;
        this._setDrawerState(this.state);
        this.updateContent(this.state);
    };
    FivBottomSheet.decorators = [
        { type: Component, args: [{
                    selector: 'fiv-bottom-sheet',
                    template: "<div class=\"fiv-bottom-drawer-scrollable-content\" no-bounce>\n  <ng-content></ng-content>\n</div>",
                    styles: [":host{width:100%;height:100%;position:absolute;left:0;z-index:11!important;background-color:rgba(0,0,0,0);transform:translateY(100vh)}.fiv-bottom-drawer-scrollable-content{width:100%;height:100%}"]
                }] }
    ];
    /** @nocollapse */
    FivBottomSheet.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: DomController },
        { type: Platform }
    ]; };
    FivBottomSheet.propDecorators = {
        dockedHeight: [{ type: Input }],
        shouldBounce: [{ type: Input }],
        distanceTop: [{ type: Input }],
        transition: [{ type: Input }],
        state: [{ type: Input }],
        bounceThreshold: [{ type: Input }],
        panThreshold: [{ type: Input }],
        panEnabled: [{ type: Input }],
        stateChange: [{ type: Output }],
        fivOpen: [{ type: Output }],
        fivDocked: [{ type: Output }],
        fivClose: [{ type: Output }],
        fivProgress: [{ type: Output }],
        content: [{ type: ContentChild, args: [FivBottomSheetContent, { static: true },] }]
    };
    return FivBottomSheet;
}());
export { FivBottomSheet };
if (false) {
    /** @type {?} */
    FivBottomSheet.prototype.dockedHeight;
    /** @type {?} */
    FivBottomSheet.prototype.shouldBounce;
    /** @type {?} */
    FivBottomSheet.prototype.distanceTop;
    /** @type {?} */
    FivBottomSheet.prototype.transition;
    /** @type {?} */
    FivBottomSheet.prototype.state;
    /** @type {?} */
    FivBottomSheet.prototype.bounceThreshold;
    /** @type {?} */
    FivBottomSheet.prototype.panThreshold;
    /** @type {?} */
    FivBottomSheet.prototype.panEnabled;
    /** @type {?} */
    FivBottomSheet.prototype.stateChange;
    /** @type {?} */
    FivBottomSheet.prototype.fivOpen;
    /** @type {?} */
    FivBottomSheet.prototype.fivDocked;
    /** @type {?} */
    FivBottomSheet.prototype.fivClose;
    /** @type {?} */
    FivBottomSheet.prototype.fivProgress;
    /** @type {?} */
    FivBottomSheet.prototype.content;
    /**
     * @type {?}
     * @private
     */
    FivBottomSheet.prototype._startPositionTop;
    /** @type {?} */
    FivBottomSheet.prototype._startPositionOffset;
    /** @type {?} */
    FivBottomSheet.prototype.scrollTop;
    /** @type {?} */
    FivBottomSheet.prototype.$onDestroy;
    /**
     * @type {?}
     * @private
     */
    FivBottomSheet.prototype._element;
    /**
     * @type {?}
     * @private
     */
    FivBottomSheet.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    FivBottomSheet.prototype._domCtrl;
    /**
     * @type {?}
     * @private
     */
    FivBottomSheet.prototype._platform;
}
//# sourceMappingURL=data:application/json;base64,