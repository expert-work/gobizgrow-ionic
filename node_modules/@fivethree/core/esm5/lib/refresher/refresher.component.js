/**
 * @fileoverview added by tsickle
 * Generated from: lib/refresher/refresher.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { takeUntil, tap, filter, map } from 'rxjs/operators';
import { FivPull } from './../pull/pull.directive';
import { FivRefresherContent } from './refresher-content/refresher-content.component';
import { Component, Output, EventEmitter, ViewChild, ElementRef, Input, Renderer2 } from '@angular/core';
import { animate, style, transition, trigger, AnimationBuilder } from '@angular/animations';
import { Platform } from '@ionic/angular';
import { Subject } from 'rxjs';
import { easeOutSine, tween, reverse } from '@fivethree/ngx-rxjs-animations';
var FivRefresher = /** @class */ (function () {
    function FivRefresher(builder, refresher, renderer, platform) {
        this.builder = builder;
        this.refresher = refresher;
        this.renderer = renderer;
        this.platform = platform;
        this.hintText = 'new posts';
        this.maxPullHeight = 168;
        this.minPullHeight = 112;
        this.fivProgressChanged = new EventEmitter();
        this.fivRefresh = new EventEmitter();
        this.hintVisible = false;
        this.currentProgress = 0;
        this.refreshing = false;
        this.$onDestroy = new Subject();
    }
    /**
     * @return {?}
     */
    FivRefresher.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.attachPullDirective()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    FivRefresher.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.$onDestroy.next();
    };
    /**
     * @private
     * @return {?}
     */
    FivRefresher.prototype.attachPullDirective = /**
     * @private
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var content, scroll, pull;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        content = this.refresher.nativeElement.closest('ion-content');
                        if (!content) {
                            throw new Error('The fiv-refresher component needs to be inside of an ion-content.');
                        }
                        content.scrollEvents = true;
                        return [4 /*yield*/, content.getScrollElement()];
                    case 1:
                        scroll = _a.sent();
                        pull = new FivPull(new ElementRef(content), this.platform, content);
                        pull.init();
                        pull.fivPull
                            .pipe(filter((/**
                         * @return {?}
                         */
                        function () { return !_this.refreshing && !_this.hintVisible; })), tap((/**
                         * @param {?} progress
                         * @return {?}
                         */
                        function (progress) { return _this.fivPull(progress); })), takeUntil(this.$onDestroy))
                            .subscribe();
                        pull.fivRefresh
                            .pipe(tap((/**
                         * @return {?}
                         */
                        function () { return _this.refresh(); })), takeUntil(this.$onDestroy))
                            .subscribe();
                        pull.fivCancel
                            .pipe(tap((/**
                         * @return {?}
                         */
                        function () { return _this.moveBack(); })), takeUntil(this.$onDestroy))
                            .subscribe();
                        this.spinner.fivComplete.pipe(takeUntil(this.$onDestroy)).subscribe();
                        this.fivRefresh
                            .pipe(tap((/**
                         * @return {?}
                         */
                        function () { return scroll.scrollTo({ top: 0, behavior: 'smooth' }); })), takeUntil(this.$onDestroy))
                            .subscribe();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    FivRefresher.prototype.refresh = /**
     * @return {?}
     */
    function () {
        if (this.refreshing) {
            return;
        }
        this.refreshing = true;
        this.spinner.load();
        this.setPullAnimationProgress(112 / 168);
        this.fivRefresh.emit(this);
    };
    /**
     * @return {?}
     */
    FivRefresher.prototype.complete = /**
     * @return {?}
     */
    function () {
        if (!this.refreshing) {
            return;
        }
        this.spinner.complete();
    };
    /**
     * @return {?}
     */
    FivRefresher.prototype.onDone = /**
     * @return {?}
     */
    function () {
        this.spinner.hide();
    };
    /**
     * @return {?}
     */
    FivRefresher.prototype.onHidden = /**
     * @return {?}
     */
    function () {
        this.refreshing = false;
        this.setPullAnimationProgress(0);
    };
    /**
     * @return {?}
     */
    FivRefresher.prototype.showHint = /**
     * @return {?}
     */
    function () {
        this.hintVisible = true;
    };
    /**
     * @return {?}
     */
    FivRefresher.prototype.onHintClicked = /**
     * @return {?}
     */
    function () {
        this.hintVisible = false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FivRefresher.prototype.postHint = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!event.fromState && event.toState === 'void') {
            this.refresh();
        }
    };
    /**
     * @param {?} progress
     * @return {?}
     */
    FivRefresher.prototype.setPullAnimationProgress = /**
     * @param {?} progress
     * @return {?}
     */
    function (progress) {
        this.currentProgress = progress;
        if (progress < 1) {
            this.renderer.setStyle(this.spinner.element.nativeElement, 'transform', "translateY(" + this.minPullHeight * progress + "px)");
        }
    };
    /**
     * @param {?} progress
     * @return {?}
     */
    FivRefresher.prototype.changeAnimationToProgress = /**
     * @param {?} progress
     * @return {?}
     */
    function (progress) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            /** @type {?} */
            var animation = _this.builder.build([
                style({
                    transform: "translateY(" + 100 *
                        _this.currentProgress + "px) rotateZ(" + 360 * _this.currentProgress + "deg)"
                }),
                animate('85ms ease-in', style({
                    transform: "translateY(" + 100 * progress + "px) rotateZ(" + 360 *
                        progress + "deg)"
                }))
            ]);
            /** @type {?} */
            var player = animation.create(_this.spinner.element.nativeElement);
            player.play();
            player.onDone((/**
             * @return {?}
             */
            function () {
                _this.setPullAnimationProgress(progress);
                player.destroy();
                resolve();
            }));
        }));
    };
    /**
     * @param {?} progress
     * @return {?}
     */
    FivRefresher.prototype.fivPull = /**
     * @param {?} progress
     * @return {?}
     */
    function (progress) {
        this.setPullAnimationProgress(progress);
        this.spinner.show();
        /** @type {?} */
        var value = Math.max(0, Math.min(100, (progress * 100 * this.maxPullHeight) / this.minPullHeight));
        this.spinner.setValue(value * 0.84);
    };
    /**
     * @return {?}
     */
    FivRefresher.prototype.moveBack = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var animation = this.builder.build([
            style({
                transform: "translateY(" + this.currentProgress *
                    this.minPullHeight + "px) rotateZ(" + 360 * this.currentProgress + "deg)"
            }),
            animate('205ms ease-in', style({ transform: 'translateY(0) rotateZ(0)' }))
        ]);
        /** @type {?} */
        var player = animation.create(this.spinner.element.nativeElement);
        tween(easeOutSine, 145)
            .pipe(reverse(), map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return Math.max(0, Math.min(100, (_this.currentProgress * n * 100 * _this.maxPullHeight) /
                _this.minPullHeight));
        })), tap((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return _this.spinner.setValue(value); })))
            .subscribe();
        player.play();
        player.onDone((/**
         * @return {?}
         */
        function () {
            _this.setPullAnimationProgress(0);
            _this.spinner.visible = false;
            player.destroy();
        }));
    };
    /**
     * @param {?} progress
     * @return {?}
     */
    FivRefresher.prototype.onSpinnerProgress = /**
     * @param {?} progress
     * @return {?}
     */
    function (progress) {
        this.fivProgressChanged.emit(progress);
        this.renderer
            // tslint:disable-next-line:max-line-length
            .setStyle(this.spinner.element.nativeElement, 'transform', "translateY(" + this.maxPullHeight *
            this.currentProgress + "px) rotateZ(" + (360 * progress) / 200 + "deg)");
    };
    FivRefresher.decorators = [
        { type: Component, args: [{
                    selector: 'fiv-refresher',
                    template: "<fiv-refresher-content [progress]=\"currentProgress\" (fivProgress)=\"onSpinnerProgress($event)\" (fivComplete)=\"onDone()\"\n  (fivHidden)=\"onHidden()\" #spinner>\n</fiv-refresher-content>\n\n<ion-chip class=\"gg-hint-wrapper\" *ngIf=\"hintVisible\" [@hintAnim] (@hintAnim.done)=\"postHint($event)\"\n  (click)=\"onHintClicked()\" #hint>\n  <ion-icon class=\"icon\" name=\"arrow-up\"></ion-icon>\n  <ion-label [ngClass]=\"{'hidden': !hintVisible}\" class=\"text\">{{hintText}}</ion-label>\n</ion-chip>",
                    animations: [
                        trigger('hintAnim', [
                            transition('void => *', [
                                style({ transform: 'translateY(0px) translateX(-50%)' }),
                                animate('150ms ease-in', style({
                                    opacity: 1,
                                    transform: 'translateY(72px) translateX(-50%)'
                                }))
                            ]),
                            transition('* => void', [
                                style({
                                    width: '*',
                                    opacity: 1,
                                    transform: 'translateY(72px) translateX(-50%)'
                                }),
                                animate('150ms 125ms ease-out', style({
                                    width: '40px',
                                    transform: 'translateY(72px) translateX(-50%)'
                                }))
                            ])
                        ])
                    ],
                    styles: [":host{--fiv-spin-color:var(--ion-color-primary);--fiv-hint-color:var(--fiv-spin-color, var(--ion-color-primary));--fiv-spin-background:var(--ion-color-light)}.icon{height:20px;width:20px;background:0 0;color:var(--fiv-hint-color)}.text{font-size:1em;color:var(--fiv-hint-color)}.text.hidden{opacity:0}.gg-hint-wrapper{position:absolute;z-index:8;opacity:1;left:50%;top:-40px;transform:translateY(72px) translateX(-50%);height:40px;padding-left:8px;padding-right:8px;background:var(--fiv-spin-background);border-radius:40px;box-shadow:0 4px 6px 0 rgba(0,0,0,.14),0 4px 5px rgba(0,0,0,.1);margin:0}"]
                }] }
    ];
    /** @nocollapse */
    FivRefresher.ctorParameters = function () { return [
        { type: AnimationBuilder },
        { type: ElementRef },
        { type: Renderer2 },
        { type: Platform }
    ]; };
    FivRefresher.propDecorators = {
        hintText: [{ type: Input }],
        maxPullHeight: [{ type: Input }],
        minPullHeight: [{ type: Input }],
        fivProgressChanged: [{ type: Output }],
        fivRefresh: [{ type: Output }],
        spinner: [{ type: ViewChild, args: ['spinner', { static: false },] }]
    };
    return FivRefresher;
}());
export { FivRefresher };
if (false) {
    /** @type {?} */
    FivRefresher.prototype.hintText;
    /** @type {?} */
    FivRefresher.prototype.maxPullHeight;
    /** @type {?} */
    FivRefresher.prototype.minPullHeight;
    /** @type {?} */
    FivRefresher.prototype.fivProgressChanged;
    /** @type {?} */
    FivRefresher.prototype.fivRefresh;
    /** @type {?} */
    FivRefresher.prototype.spinner;
    /** @type {?} */
    FivRefresher.prototype.hintVisible;
    /** @type {?} */
    FivRefresher.prototype.currentProgress;
    /** @type {?} */
    FivRefresher.prototype.refreshing;
    /**
     * @type {?}
     * @private
     */
    FivRefresher.prototype.$onDestroy;
    /**
     * @type {?}
     * @private
     */
    FivRefresher.prototype.builder;
    /**
     * @type {?}
     * @private
     */
    FivRefresher.prototype.refresher;
    /**
     * @type {?}
     * @private
     */
    FivRefresher.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FivRefresher.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,