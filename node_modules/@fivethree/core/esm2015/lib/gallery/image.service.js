/**
 * @fileoverview added by tsickle
 * Generated from: lib/gallery/image.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class ImageService {
    constructor() { }
    /**
     * @param {?} imgEl
     * @return {?}
     */
    getAverageRGB(imgEl) {
        /** @type {?} */
        const blockSize = 5;
        /** @type {?} */
        const // only visit every 5 pixels
        defaultRGB = { r: 0, g: 0, b: 0 };
        /** @type {?} */
        const // for non-supporting envs
        canvas = document.createElement('canvas');
        /** @type {?} */
        const context = canvas.getContext && canvas.getContext('2d');
        /** @type {?} */
        const rgb = { r: 0, g: 0, b: 0 };
        /** @type {?} */
        let data;
        /** @type {?} */
        let width;
        /** @type {?} */
        let height;
        /** @type {?} */
        let length;
        /** @type {?} */
        let i = -4;
        /** @type {?} */
        let count = 0;
        if (!context) {
            return `rgb(${defaultRGB.r},${defaultRGB.g},${defaultRGB.b})`;
        }
        height = canvas.height =
            imgEl.naturalHeight || imgEl.offsetHeight || imgEl.height;
        width = canvas.width =
            imgEl.naturalWidth || imgEl.offsetWidth || imgEl.width;
        context.drawImage(imgEl, 0, 0);
        try {
            data = context.getImageData(0, 0, width, height);
        }
        catch (e) {
            /* security error, img on diff domain */
            return `rgb(${defaultRGB.r},${defaultRGB.g},${defaultRGB.b})`;
        }
        length = data.data.length;
        while ((i += blockSize * 4) < length) {
            ++count;
            rgb.r += data.data[i];
            rgb.g += data.data[i + 1];
            rgb.b += data.data[i + 2];
        }
        // ~~ used to floor values
        rgb.r = Math.floor(rgb.r / count);
        rgb.g = Math.floor(rgb.g / count);
        rgb.b = Math.floor(rgb.b / count);
        return `rgb(${rgb.r},${rgb.g},${rgb.b})`;
    }
}
ImageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ImageService.ctorParameters = () => [];
/** @nocollapse */ ImageService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ImageService_Factory() { return new ImageService(); }, token: ImageService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmaXZldGhyZWUvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9nYWxsZXJ5L2ltYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUszQyxNQUFNLE9BQU8sWUFBWTtJQUN2QixnQkFBZSxDQUFDOzs7OztJQUVoQixhQUFhLENBQUMsS0FBSzs7Y0FDWCxTQUFTLEdBQUcsQ0FBQzs7Y0FBRSw0QkFBNEI7UUFDL0MsVUFBVSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7O2NBQUUsMEJBQTBCO1FBQzdELE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQzs7Y0FDekMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxVQUFVLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7O2NBQ3RELEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFOztZQUV4QixJQUFJOztZQUNOLEtBQUs7O1lBQ0wsTUFBTTs7WUFDTixNQUFNOztZQUNOLENBQUMsR0FBRyxDQUFDLENBQUM7O1lBQ04sS0FBSyxHQUFHLENBQUM7UUFFWCxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osT0FBTyxPQUFPLFVBQVUsQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUM7U0FDL0Q7UUFFRCxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU07WUFDcEIsS0FBSyxDQUFDLGFBQWEsSUFBSSxLQUFLLENBQUMsWUFBWSxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDNUQsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLO1lBQ2xCLEtBQUssQ0FBQyxZQUFZLElBQUksS0FBSyxDQUFDLFdBQVcsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDO1FBRXpELE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUUvQixJQUFJO1lBQ0YsSUFBSSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDbEQ7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLHdDQUF3QztZQUV4QyxPQUFPLE9BQU8sVUFBVSxDQUFDLENBQUMsSUFBSSxVQUFVLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQztTQUMvRDtRQUVELE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUUxQixPQUFPLENBQUMsQ0FBQyxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLEVBQUU7WUFDcEMsRUFBRSxLQUFLLENBQUM7WUFDUixHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMxQixHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzNCO1FBRUQsMEJBQTBCO1FBQzFCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBRWxDLE9BQU8sT0FBTyxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQzNDLENBQUM7OztZQXRERixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEltYWdlU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBnZXRBdmVyYWdlUkdCKGltZ0VsKSB7XG4gICAgY29uc3QgYmxvY2tTaXplID0gNSwgLy8gb25seSB2aXNpdCBldmVyeSA1IHBpeGVsc1xuICAgICAgZGVmYXVsdFJHQiA9IHsgcjogMCwgZzogMCwgYjogMCB9LCAvLyBmb3Igbm9uLXN1cHBvcnRpbmcgZW52c1xuICAgICAgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyksXG4gICAgICBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQgJiYgY2FudmFzLmdldENvbnRleHQoJzJkJyksXG4gICAgICByZ2IgPSB7IHI6IDAsIGc6IDAsIGI6IDAgfTtcblxuICAgIGxldCBkYXRhLFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgICBsZW5ndGgsXG4gICAgICBpID0gLTQsXG4gICAgICBjb3VudCA9IDA7XG5cbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgIHJldHVybiBgcmdiKCR7ZGVmYXVsdFJHQi5yfSwke2RlZmF1bHRSR0IuZ30sJHtkZWZhdWx0UkdCLmJ9KWA7XG4gICAgfVxuXG4gICAgaGVpZ2h0ID0gY2FudmFzLmhlaWdodCA9XG4gICAgICBpbWdFbC5uYXR1cmFsSGVpZ2h0IHx8IGltZ0VsLm9mZnNldEhlaWdodCB8fCBpbWdFbC5oZWlnaHQ7XG4gICAgd2lkdGggPSBjYW52YXMud2lkdGggPVxuICAgICAgaW1nRWwubmF0dXJhbFdpZHRoIHx8IGltZ0VsLm9mZnNldFdpZHRoIHx8IGltZ0VsLndpZHRoO1xuXG4gICAgY29udGV4dC5kcmF3SW1hZ2UoaW1nRWwsIDAsIDApO1xuXG4gICAgdHJ5IHtcbiAgICAgIGRhdGEgPSBjb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBzZWN1cml0eSBlcnJvciwgaW1nIG9uIGRpZmYgZG9tYWluICovXG5cbiAgICAgIHJldHVybiBgcmdiKCR7ZGVmYXVsdFJHQi5yfSwke2RlZmF1bHRSR0IuZ30sJHtkZWZhdWx0UkdCLmJ9KWA7XG4gICAgfVxuXG4gICAgbGVuZ3RoID0gZGF0YS5kYXRhLmxlbmd0aDtcblxuICAgIHdoaWxlICgoaSArPSBibG9ja1NpemUgKiA0KSA8IGxlbmd0aCkge1xuICAgICAgKytjb3VudDtcbiAgICAgIHJnYi5yICs9IGRhdGEuZGF0YVtpXTtcbiAgICAgIHJnYi5nICs9IGRhdGEuZGF0YVtpICsgMV07XG4gICAgICByZ2IuYiArPSBkYXRhLmRhdGFbaSArIDJdO1xuICAgIH1cblxuICAgIC8vIH5+IHVzZWQgdG8gZmxvb3IgdmFsdWVzXG4gICAgcmdiLnIgPSBNYXRoLmZsb29yKHJnYi5yIC8gY291bnQpO1xuICAgIHJnYi5nID0gTWF0aC5mbG9vcihyZ2IuZyAvIGNvdW50KTtcbiAgICByZ2IuYiA9IE1hdGguZmxvb3IocmdiLmIgLyBjb3VudCk7XG5cbiAgICByZXR1cm4gYHJnYigke3JnYi5yfSwke3JnYi5nfSwke3JnYi5ifSlgO1xuICB9XG59XG4iXX0=