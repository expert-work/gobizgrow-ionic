/**
 * @fileoverview added by tsickle
 * Generated from: lib/feature-discovery/feature.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FivIcon } from '../icon/icon.component';
import { Directive, Host, ElementRef, Input, Optional, TemplateRef, Output, EventEmitter, ViewContainerRef } from '@angular/core';
import { FivOverlayService } from '../overlay/overlay.service';
import { FivFeatureDiscovery } from './feature-discovery.component';
import { first, filter } from 'rxjs/operators';
import { Platform, IonIcon } from '@ionic/angular';
var FivFeature = /** @class */ (function () {
    function FivFeature(host, viewContainer, fivIcon, ionIcon, overlay, platform) {
        this.host = host;
        this.viewContainer = viewContainer;
        this.fivIcon = fivIcon;
        this.ionIcon = ionIcon;
        this.overlay = overlay;
        this.platform = platform;
        this.maxDiameter = 1080;
        this.diameter = Math.min(this.platform.width() * 2, this.maxDiameter);
        this.contentOffset = 20;
        this.featurePadding = 20;
        this.clickEnabled = true;
        this.classes = [];
        this.fivFeatureClick = new EventEmitter();
        this.fivOpen = new EventEmitter();
        this.fivWillOpen = new EventEmitter();
        this.fivClose = new EventEmitter();
        this.fivWillClose = new EventEmitter();
        this.isOpen = false;
    }
    /**
     * @private
     * @param {?} nativeElement
     * @return {?}
     */
    FivFeature.prototype.getBounds = /**
     * @private
     * @param {?} nativeElement
     * @return {?}
     */
    function (nativeElement) {
        /** @type {?} */
        var bounds = nativeElement.getBoundingClientRect();
        return {
            top: bounds.top,
            left: bounds.left,
            height: nativeElement.clientHeight,
            width: nativeElement.clientWidth
        };
    };
    /**
     * @return {?}
     */
    FivFeature.prototype.show = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var icon = this.ionIcon || this.fivIcon;
        /** @type {?} */
        var bounds = icon
            ? this.getBounds(this.host.nativeElement.parentElement)
            : this.getBounds(this.host.nativeElement);
        this.overlayRef = this.overlay.createOverlay(this.viewContainer, FivFeatureDiscovery, this.fivFeature);
        /** @type {?} */
        var featureOverlay = this.overlayRef.instance;
        featureOverlay.height = this.diameter;
        featureOverlay.width = this.diameter;
        featureOverlay.featurePadding = this.featurePadding;
        featureOverlay.contentOffset = this.contentOffset;
        featureOverlay.classes = this.classes;
        featureOverlay.setIcon(icon);
        featureOverlay.setBounds(bounds);
        featureOverlay.show();
        this.fivWillOpen.emit();
        featureOverlay.fivAnimation
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return event.toState === 'visible'; })), first())
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this.didOpen();
        }));
        featureOverlay.fivClick.pipe(first()).subscribe((/**
         * @param {?} ev
         * @return {?}
         */
        function (ev) {
            _this.featureClick(ev);
        }));
        featureOverlay.fivBackdropClick.pipe(first()).subscribe((/**
         * @return {?}
         */
        function () {
            _this.hide();
        }));
    };
    /**
     * @return {?}
     */
    FivFeature.prototype.hide = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.fivWillClose.emit();
        if (this.overlayRef) {
            this.overlayRef.instance.hide();
            this.overlayRef.instance.fivClose.pipe(first()).subscribe((/**
             * @return {?}
             */
            function () {
                _this.fivClose.emit();
                _this.isOpen = false;
                _this.overlayRef.destroy();
                _this.overlayRef = null;
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    FivFeature.prototype.didOpen = /**
     * @private
     * @return {?}
     */
    function () {
        this.fivOpen.emit();
        this.isOpen = true;
    };
    /**
     * @private
     * @param {?} ev
     * @return {?}
     */
    FivFeature.prototype.featureClick = /**
     * @private
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        var _this = this;
        if (this.overlayRef) {
            this.fivFeatureClick.emit(ev);
            this.fivWillClose.emit();
            this.overlayRef.instance.featureClick();
            this.overlayRef.instance.fivClose.pipe(first()).subscribe((/**
             * @return {?}
             */
            function () {
                _this.fivClose.emit();
                _this.overlayRef.destroy();
                _this.overlayRef = null;
                if (_this.clickEnabled) {
                    _this.host.nativeElement.click();
                }
            }));
        }
    };
    FivFeature.decorators = [
        { type: Directive, args: [{
                    selector: '[fivFeature]',
                    exportAs: 'fivFeature'
                },] }
    ];
    /** @nocollapse */
    FivFeature.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Host }] },
        { type: ViewContainerRef },
        { type: FivIcon, decorators: [{ type: Host }, { type: Optional }] },
        { type: IonIcon, decorators: [{ type: Host }, { type: Optional }] },
        { type: FivOverlayService },
        { type: Platform }
    ]; };
    FivFeature.propDecorators = {
        maxDiameter: [{ type: Input }],
        diameter: [{ type: Input }],
        contentOffset: [{ type: Input }],
        featurePadding: [{ type: Input }],
        clickEnabled: [{ type: Input }],
        classes: [{ type: Input }],
        fivFeature: [{ type: Input }],
        fivFeatureClick: [{ type: Output }],
        fivOpen: [{ type: Output }],
        fivWillOpen: [{ type: Output }],
        fivClose: [{ type: Output }],
        fivWillClose: [{ type: Output }]
    };
    return FivFeature;
}());
export { FivFeature };
if (false) {
    /** @type {?} */
    FivFeature.prototype.maxDiameter;
    /** @type {?} */
    FivFeature.prototype.diameter;
    /** @type {?} */
    FivFeature.prototype.contentOffset;
    /** @type {?} */
    FivFeature.prototype.featurePadding;
    /** @type {?} */
    FivFeature.prototype.clickEnabled;
    /** @type {?} */
    FivFeature.prototype.classes;
    /** @type {?} */
    FivFeature.prototype.fivFeature;
    /** @type {?} */
    FivFeature.prototype.overlayRef;
    /** @type {?} */
    FivFeature.prototype.fivFeatureClick;
    /** @type {?} */
    FivFeature.prototype.fivOpen;
    /** @type {?} */
    FivFeature.prototype.fivWillOpen;
    /** @type {?} */
    FivFeature.prototype.fivClose;
    /** @type {?} */
    FivFeature.prototype.fivWillClose;
    /** @type {?} */
    FivFeature.prototype.isOpen;
    /**
     * @type {?}
     * @private
     */
    FivFeature.prototype.host;
    /**
     * @type {?}
     * @private
     */
    FivFeature.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    FivFeature.prototype.fivIcon;
    /**
     * @type {?}
     * @private
     */
    FivFeature.prototype.ionIcon;
    /**
     * @type {?}
     * @private
     */
    FivFeature.prototype.overlay;
    /**
     * @type {?}
     * @private
     */
    FivFeature.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,