{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/framework-delegate-d1eb6504.js","webpack:///node_modules/@ionic/core/dist/esm/haptic-da73c8fd.js","webpack:///node_modules/@ionic/core/dist/esm/spinner-configs-c78e170e.js","webpack:///node_modules/@ionic/core/dist/esm/theme-c2dc54d9.js","webpack:///src/app/components/show-hide-password/show-hide-password.component.html","webpack:///src/app/components/show-hide-password/show-hide-password.component.ts","webpack:///src/app/fashion/details/fashion-details.model.ts","webpack:///src/app/fashion/fashion.service.ts","webpack:///src/app/fashion/listing/fashion-listing.model.ts","webpack:///src/app/food/details/food-details.model.ts","webpack:///src/app/food/food.service.ts","webpack:///src/app/food/listing/food-listing.model.ts","webpack:///src/app/guards/home.guard.ts","webpack:///src/app/real-estate/details/real-estate-details.model.ts","webpack:///src/app/real-estate/listing/real-estate-listing.model.ts","webpack:///src/app/real-estate/real-estate.service.ts","webpack:///src/app/travel/details/travel-details.model.ts","webpack:///src/app/travel/listing/travel-listing.model.ts","webpack:///src/app/travel/travel.service.ts","webpack:///src/app/user/friends/user-friends.model.ts","webpack:///src/app/user/profile/user-profile.model.ts","webpack:///src/app/user/user.service.ts"],"names":["attachComponent","delegate","container","component","cssClasses","componentProps","attachViewToDom","HTMLElement","Error","el","ownerDocument","createElement","forEach","c","classList","add","Object","assign","appendChild","componentOnReady","detachComponent","element","parentElement","removeViewFromDom","remove","Promise","resolve","HapticEngine","getEngine","win","window","TapticEngine","Capacitor","isPluginAvailable","Plugins","Haptics","available","isCordova","isCapacitor","impact","options","engine","style","toUpperCase","notification","selection","selectionStart","gestureSelectionStart","selectionChanged","gestureSelectionChanged","selectionEnd","hapticSelection","hapticSelectionStart","hapticSelectionChanged","hapticSelectionEnd","hapticImpact","spinners","dur","circles","fn","index","total","animationDelay","angle","Math","PI","r","sin","cos","step","elmDuration","cx","cy","fill","viewBox","transform","_","lines","y1","y2","SPINNERS","hostContext","selector","closest","createColorClasses","color","length","undefined","getClassList","classes","array","Array","isArray","split","filter","map","trim","getClassMap","SCHEME","openURL","url","ev","direction","test","router","document","querySelector","preventDefault","push","ShowHidePasswordComponent","show","input","type","FashionDetailsModel","showcaseImages","source","colorVariants","name","value","sizeVariants","relatedProducts","id","FashionService","http","get","pipe","data","listing","dataSource","listingDataStore","shellModel","load","details","detailsDataStore","FashionItemModel","FashionListingModel","items","FoodDetailsModel","ratings","concept","rate","openHours","day","open","hourFrom","hourTo","tags","usersPictures","popularDishes","votesCount","reviews","user","image","reviewsCount","points","avgRating","publishedAt","message","popularRecipes","showcaseImage","chef","difficulty","time","calories","chefExtract","FoodService","slug","item","FoodItemModel","pictures","FoodListingModel","HomeGuard","storageService","then","result","navigate","err","RealEstateDetailsModel","amenities","icon","RealEstateItemModel","RealEstateListingModel","RealEstateService","TravelDetailsModel","whereToStay","picture","rating","whereToEat","relatedActivities","category","TravelItemModel","TravelListingModel","TravelService","UserFriendsModel","friends","job","followers","followings","following","UserProfileModel","photos","UserService","profile","profileDataStore","friendsDataStore"],"mappings":"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","file":"common-es5.js","sourcesContent":["const attachComponent = async (delegate, container, component, cssClasses, componentProps) => {\n    if (delegate) {\n        return delegate.attachViewToDom(container, component, componentProps, cssClasses);\n    }\n    if (typeof component !== 'string' && !(component instanceof HTMLElement)) {\n        throw new Error('framework delegate is missing');\n    }\n    const el = (typeof component === 'string')\n        ? container.ownerDocument && container.ownerDocument.createElement(component)\n        : component;\n    if (cssClasses) {\n        cssClasses.forEach(c => el.classList.add(c));\n    }\n    if (componentProps) {\n        Object.assign(el, componentProps);\n    }\n    container.appendChild(el);\n    if (el.componentOnReady) {\n        await el.componentOnReady();\n    }\n    return el;\n};\nconst detachComponent = (delegate, element) => {\n    if (element) {\n        if (delegate) {\n            const container = element.parentElement;\n            return delegate.removeViewFromDom(container, element);\n        }\n        element.remove();\n    }\n    return Promise.resolve();\n};\n\nexport { attachComponent as a, detachComponent as d };\n","const HapticEngine = {\n    getEngine() {\n        const win = window;\n        return (win.TapticEngine) || (win.Capacitor && win.Capacitor.isPluginAvailable('Haptics') && win.Capacitor.Plugins.Haptics);\n    },\n    available() {\n        return !!this.getEngine();\n    },\n    isCordova() {\n        return !!window.TapticEngine;\n    },\n    isCapacitor() {\n        const win = window;\n        return !!win.Capacitor;\n    },\n    impact(options) {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n        engine.impact({ style });\n    },\n    notification(options) {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n        engine.notification({ style });\n    },\n    selection() {\n        this.impact({ style: 'light' });\n    },\n    selectionStart() {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionStart();\n        }\n        else {\n            engine.gestureSelectionStart();\n        }\n    },\n    selectionChanged() {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionChanged();\n        }\n        else {\n            engine.gestureSelectionChanged();\n        }\n    },\n    selectionEnd() {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionChanged();\n        }\n        else {\n            engine.gestureSelectionChanged();\n        }\n    }\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nconst hapticSelection = () => {\n    HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nconst hapticSelectionStart = () => {\n    HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nconst hapticSelectionChanged = () => {\n    HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nconst hapticSelectionEnd = () => {\n    HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\nconst hapticImpact = (options) => {\n    HapticEngine.impact(options);\n};\n\nexport { hapticImpact as a, hapticSelectionStart as b, hapticSelectionChanged as c, hapticSelectionEnd as d, hapticSelection as h };\n","const spinners = {\n    'bubbles': {\n        dur: 1000,\n        circles: 9,\n        fn: (dur, index, total) => {\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            const angle = 2 * Math.PI * index / total;\n            return {\n                r: 5,\n                style: {\n                    'top': `${9 * Math.sin(angle)}px`,\n                    'left': `${9 * Math.cos(angle)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'circles': {\n        dur: 1000,\n        circles: 8,\n        fn: (dur, index, total) => {\n            const step = index / total;\n            const animationDelay = `${(dur * step) - dur}ms`;\n            const angle = 2 * Math.PI * step;\n            return {\n                r: 5,\n                style: {\n                    'top': `${9 * Math.sin(angle)}px`,\n                    'left': `${9 * Math.cos(angle)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'circular': {\n        dur: 1400,\n        elmDuration: true,\n        circles: 1,\n        fn: () => {\n            return {\n                r: 20,\n                cx: 48,\n                cy: 48,\n                fill: 'none',\n                viewBox: '24 24 48 48',\n                transform: 'translate(0,0)',\n                style: {}\n            };\n        }\n    },\n    'crescent': {\n        dur: 750,\n        circles: 1,\n        fn: () => {\n            return {\n                r: 26,\n                style: {}\n            };\n        }\n    },\n    'dots': {\n        dur: 750,\n        circles: 3,\n        fn: (_, index) => {\n            const animationDelay = -(110 * index) + 'ms';\n            return {\n                r: 6,\n                style: {\n                    'left': `${9 - (9 * index)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'lines': {\n        dur: 1000,\n        lines: 12,\n        fn: (dur, index, total) => {\n            const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            return {\n                y1: 17,\n                y2: 29,\n                style: {\n                    'transform': transform,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'lines-small': {\n        dur: 1000,\n        lines: 12,\n        fn: (dur, index, total) => {\n            const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            return {\n                y1: 12,\n                y2: 20,\n                style: {\n                    'transform': transform,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    }\n};\nconst SPINNERS = spinners;\n\nexport { SPINNERS as S };\n","const hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color) => {\n    return (typeof color === 'string' && color.length > 0) ? {\n        'ion-color': true,\n        [`ion-color-${color}`]: true\n    } : undefined;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter(c => c != null)\n            .map(c => c.trim())\n            .filter(c => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach(c => map[c] = true);\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n","<ng-content></ng-content>\n<a class=\"type-toggle\" (click)=\"toggleShow()\">\n\t<ion-icon class=\"show-option\" [hidden]=\"show\" name=\"eye-off-outline\"></ion-icon>\n\t<ion-icon class=\"hide-option\" [hidden]=\"!show\" name=\"eye-outline\"></ion-icon>\n  <!-- In case you want to use text instead of icons -->\n\t<!--\n  <span class=\"show-option\" [hidden]=\"show\">show</span>\n\t<span class=\"hide-option\" [hidden]=\"!show\">hide</span>\n  -->\n</a>\n","import { Component, ContentChild } from '@angular/core';\n\nimport { IonInput } from '@ionic/angular';\n\n@Component({\n  selector: 'app-show-hide-password',\n  templateUrl: './show-hide-password.component.html',\n  styleUrls: [\n    './show-hide-password.component.scss'\n  ]\n})\nexport class ShowHidePasswordComponent {\n  show = false;\n\n  @ContentChild(IonInput) input: IonInput;\n\n  constructor() {}\n\n  toggleShow() {\n    this.show = !this.show;\n    if (this.show) {\n      this.input.type = 'text';\n    } else {\n      this.input.type = 'password';\n    }\n  }\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class FashionDetailsModel extends ShellModel {\n  showcaseImages: Array<{type: string, source: string}> = [\n    {\n      type: '',\n      source: ''\n    },\n    {\n      type: '',\n      source: ''\n    },\n    {\n      type: '',\n      source: ''\n    }\n  ];\n  name: string;\n  brand: string;\n  price: number;\n  salePrice: number;\n  colorVariants: Array<{name: string, value: string, default: boolean}> = [\n    {\n      name: '',\n      value: '',\n      default: false\n    },\n    {\n      name: '',\n      value: '',\n      default: false\n    },\n    {\n      name: '',\n      value: '',\n      default: false\n    }\n  ];\n  sizeVariants: Array<{name: string, value: string, default: boolean}> = [\n    {\n      name: '',\n      value: '',\n      default: false\n    },\n    {\n      name: '',\n      value: '',\n      default: false\n    },\n    {\n      name: '',\n      value: '',\n      default: false\n    }\n  ];\n  description: string;\n  careInstructions: string;\n  upc: string;\n  relatedProducts: Array<{id: number}> = [\n    {\n      id: null\n    },\n    {\n      id: null\n    }\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DataStore } from '../shell/data-store';\nimport { FashionListingModel } from './listing/fashion-listing.model';\nimport { FashionDetailsModel } from './details/fashion-details.model';\n\n@Injectable()\nexport class FashionService {\n  private listingDataStore: DataStore<FashionListingModel>;\n  private detailsDataStore: DataStore<FashionDetailsModel>;\n\n  constructor(private http: HttpClient) { }\n\n  public getListingDataSource(): Observable<FashionListingModel> {\n    return this.http.get<FashionListingModel>('./assets/sample-data/fashion/listing.json')\n    .pipe(\n      map(\n        (data: FashionListingModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const listing = new FashionListingModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(listing, data);\n\n          return listing;\n        }\n      )\n    );\n  }\n\n  public getListingStore(dataSource: Observable<FashionListingModel>): DataStore<FashionListingModel> {\n    // Use cache if available\n    if (!this.listingDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: FashionListingModel = new FashionListingModel();\n      this.listingDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.listingDataStore.load(dataSource);\n    }\n    return this.listingDataStore;\n  }\n\n  public getDetailsDataSource(): Observable<FashionDetailsModel> {\n    return this.http.get<FashionDetailsModel>('./assets/sample-data/fashion/details.json')\n    .pipe(\n      map(\n        (data: FashionDetailsModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const details = new FashionDetailsModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(details, data);\n\n          return details;\n        }\n      )\n    );\n  }\n\n  public getDetailsStore(dataSource: Observable<FashionDetailsModel>): DataStore<FashionDetailsModel> {\n    // Use cache if available\n    if (!this.detailsDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: FashionDetailsModel = new FashionDetailsModel();\n      this.detailsDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.detailsDataStore.load(dataSource);\n    }\n    return this.detailsDataStore;\n  }\n\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class FashionItemModel {\n  price: number;\n  salePrice: number;\n  image: string;\n  squareImage: string;\n  showcaseImages: Array<string>;\n  name: string;\n  style: string;\n  relatedProducts: Array<string>;\n}\n\nexport class FashionListingModel extends ShellModel {\n  items: Array<FashionItemModel> = [\n    new FashionItemModel(),\n    new FashionItemModel(),\n    new FashionItemModel(),\n    new FashionItemModel()\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class FoodDetailsModel extends ShellModel {\n  icon: string;\n  slug: string;\n  showcaseImage: string;\n  name: string;\n  shortName: string;\n  style: string;\n  priceRange: number;\n  avgRating: number;\n  ratings: Array<{concept: string, rate: number}> = [\n    {\n      concept: '',\n      rate: null\n    },\n    {\n      concept: '',\n      rate: null\n    },\n    {\n      concept: '',\n      rate: null\n    }\n  ];\n  reviewsCount: number;\n  openHours: Array<{day: string, open: boolean, hourFrom: string, hourTo: string}> = [\n    {\n      day: '',\n      open: true,\n      hourFrom: '',\n      hourTo: ''\n    },\n    {\n      day: '',\n      open: true,\n      hourFrom: '',\n      hourTo: ''\n    },\n    {\n      day: '',\n      open: false,\n      hourFrom: '',\n      hourTo: ''\n    }\n  ];\n  location: {\n    address: string,\n    city: string,\n    latlng: string,\n    mapImage: string\n  };\n  tags: Array<string> = [\n    '',\n    '',\n    ''\n  ];\n  usersPictures: Array<string> = [\n    '',\n    '',\n    '',\n    '',\n    '',\n    ''\n  ];\n  popularDishes: Array<{name: string, rate: number, votesCount: number}> = [\n    {\n      name: '',\n      rate: null,\n      votesCount: null\n    },\n    {\n      name: '',\n      rate: null,\n      votesCount: null\n    }\n  ];\n  reviews: Array<{\n    user: {image: string, name: string, reviewsCount: number, points: number},\n    avgRating: number,\n    ratings: Array<{concept: string, rate: number}>,\n    publishedAt: string,\n    message: string\n  }> = [\n    {\n      user: {\n        image: '',\n        name: '',\n        reviewsCount: null,\n        points: null\n      },\n      avgRating: null,\n      ratings: [\n        {\n          concept: '',\n          rate: null\n        },\n        {\n          concept: '',\n          rate: null\n        },\n        {\n          concept: '',\n          rate: null\n        }\n      ],\n      publishedAt: null,\n      message: ''\n    },\n    {\n      user: {\n        image: '',\n        name: '',\n        reviewsCount: null,\n        points: null\n      },\n      avgRating: null,\n      ratings: [\n        {\n          concept: '',\n          rate: null\n        },\n        {\n          concept: '',\n          rate: null\n        },\n        {\n          concept: '',\n          rate: null\n        }\n      ],\n      publishedAt: null,\n      message: ''\n    },\n    {\n      user: {\n        image: '',\n        name: '',\n        reviewsCount: null,\n        points: null\n      },\n      avgRating: null,\n      ratings: [\n        {\n          concept: '',\n          rate: null\n        },\n        {\n          concept: '',\n          rate: null\n        },\n        {\n          concept: '',\n          rate: null\n        }\n      ],\n      publishedAt: null,\n      message: ''\n    }\n  ];\n  popularRecipes: Array<{\n    showcaseImage: string,\n    name: string,\n    chef: {name: string, image: string},\n    difficulty: string,\n    time: string,\n    calories: string,\n    chefExtract: string\n  }> = [\n    {\n      showcaseImage: '',\n      name: '',\n      chef: {\n        name: '',\n        image: ''\n      },\n      difficulty: '',\n      time: '',\n      calories: '',\n      chefExtract: ''\n    }\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map, flatMap } from 'rxjs/operators';\n\nimport { DataStore } from '../shell/data-store';\nimport { FoodListingModel } from './listing/food-listing.model';\nimport { FoodDetailsModel } from './details/food-details.model';\n\n@Injectable()\nexport class FoodService {\n  private listingDataStore: DataStore<FoodListingModel>;\n  private detailsDataStore: DataStore<FoodDetailsModel>;\n\n  constructor(private http: HttpClient) { }\n\n  public getListingDataSource(): Observable<FoodListingModel> {\n    return this.http.get<FoodListingModel>('./assets/sample-data/food/listing.json')\n    .pipe(\n      map(\n        (data: FoodListingModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const listing = new FoodListingModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(listing, data);\n\n          return listing;\n        }\n      )\n    );\n  }\n\n  public getListingStore(dataSource: Observable<FoodListingModel>): DataStore<FoodListingModel> {\n    // Use cache if available\n    if (!this.listingDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: FoodListingModel = new FoodListingModel();\n      this.listingDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.listingDataStore.load(dataSource);\n    }\n    return this.listingDataStore;\n  }\n\n  public getDetailsDataSource(slug: string): Observable<FoodDetailsModel> {\n    return this.http.get<{items: Array<FoodDetailsModel>}>('./assets/sample-data/food/details.json')\n    .pipe(\n      flatMap(details => details.items.filter(item => item.slug === slug)),\n      map(\n        (data: FoodDetailsModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const details = new FoodDetailsModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(details, data);\n\n          return details;\n        }\n      )\n    );\n  }\n\n  public getDetailsStore(dataSource: Observable<FoodDetailsModel>): DataStore<FoodDetailsModel> {\n    // Initialize the model specifying that it is a shell model\n    const shellModel: FoodDetailsModel = new FoodDetailsModel();\n    this.detailsDataStore = new DataStore(shellModel);\n    // Trigger the loading mechanism (with shell) in the dataStore\n    this.detailsDataStore.load(dataSource);\n\n    return this.detailsDataStore;\n  }\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class FoodItemModel {\n  icon: string;\n  image: string;\n  name: string;\n  address: string;\n  priceRange: number;\n  rating: number;\n  tags: Array<string> = [\n    '',\n    '',\n    ''\n  ];\n  pictures: Array<string> = [\n    '',\n    '',\n    '',\n    '',\n    ''\n  ];\n}\n\nexport class FoodListingModel extends ShellModel {\n  items: Array<FoodItemModel> = [\n    new FoodItemModel(),\n    new FoodItemModel(),\n    new FoodItemModel(),\n    new FoodItemModel()\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, Router ,RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { resolve } from 'dns'\nimport { StorageService } from '../services/storage.service'\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HomeGuard implements CanActivate {\n   \n  constructor(private storageService: StorageService, private router: Router){}\n\n   canActivate(): Promise<boolean>{\n         return new Promise(resolve=>{\n                this.storageService.get('userData').then( result => {\n                  if(result){ \n                    resolve(true);\n                    } else {\n                      this.router.navigate(['']);\n                      resolve(false); \n                    }\n                }).catch(err => {\n                  resolve(false)\n            })\n        })\n   }\n  \n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class RealEstateDetailsModel extends ShellModel {\n  picture: string;\n  location: {\n    address: string,\n    city: string,\n    latlng: string,\n    mapImage: string\n  };\n  description: string;\n  price: string;\n  accommodations: {\n    guests: number,\n    bedrooms: number,\n    patios: number,\n    bathrooms: number\n  };\n  amenities: Array<{name: string, icon: string}> = [\n    {\n      name: '',\n      icon: ''\n    },\n    {\n      name: '',\n      icon: ''\n    },\n    {\n      name: '',\n      icon: ''\n    },\n    {\n      name: '',\n      icon: ''\n    },\n    {\n      name: '',\n      icon: ''\n    },\n    {\n      name: '',\n      icon: ''\n    }\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class RealEstateItemModel {\n  slug: string;\n  picture: string;\n  address: string;\n  price: string;\n  liked: boolean;\n  accommodations: {\n    guests: number,\n    bedrooms: number,\n    beds: number,\n    bathrooms: number\n  };\n  amenities: Array<{name: string, icon: string}> = [\n    {\n      name: '',\n      icon: ''\n    },\n    {\n      name: '',\n      icon: ''\n    }\n  ];\n}\n\nexport class RealEstateListingModel extends ShellModel {\n  items: Array<RealEstateItemModel> = [\n    new RealEstateItemModel(),\n    new RealEstateItemModel(),\n    new RealEstateItemModel(),\n    new RealEstateItemModel()\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DataStore } from '../shell/data-store';\nimport { RealEstateListingModel } from './listing/real-estate-listing.model';\nimport { RealEstateDetailsModel } from './details/real-estate-details.model';\n\n@Injectable()\nexport class RealEstateService {\n  private listingDataStore: DataStore<RealEstateListingModel>;\n  private detailsDataStore: DataStore<RealEstateDetailsModel>;\n\n  constructor(private http: HttpClient) { }\n\n  public getListingDataSource(): Observable<RealEstateListingModel> {\n    return this.http.get<RealEstateListingModel>('./assets/sample-data/real-estate/listing.json')\n    .pipe(\n      map(\n        (data: RealEstateListingModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const listing = new RealEstateListingModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(listing, data);\n\n          return listing;\n        }\n      )\n    );\n  }\n\n  public getListingStore(dataSource: Observable<RealEstateListingModel>): DataStore<RealEstateListingModel> {\n    // Use cache if available\n    if (!this.listingDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: RealEstateListingModel = new RealEstateListingModel();\n      this.listingDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.listingDataStore.load(dataSource);\n    }\n    return this.listingDataStore;\n  }\n\n  public getDetailsDataSource(): Observable<RealEstateDetailsModel> {\n    return this.http.get<RealEstateDetailsModel>('./assets/sample-data/real-estate/details.json')\n    .pipe(\n      map(\n        (data: RealEstateDetailsModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const details = new RealEstateDetailsModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(details, data);\n\n          return details;\n        }\n      )\n    );\n  }\n\n  public getDetailsStore(dataSource: Observable<RealEstateDetailsModel>): DataStore<RealEstateDetailsModel> {\n    // Use cache if available\n    if (!this.detailsDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: RealEstateDetailsModel = new RealEstateDetailsModel();\n      this.detailsDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.detailsDataStore.load(dataSource);\n    }\n    return this.detailsDataStore;\n  }\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class TravelDetailsModel extends ShellModel {\n  image: string;\n  icon: string;\n  name: string;\n  category: string;\n  shortDescription: string;\n  rating: number;\n  reviewsCount: number;\n  tags: Array<string> = new Array(3).fill('');\n  fullDescription: string;\n  openHours: Array<{day: string, open: boolean, hourFrom: string, hourTo: string}> = [\n    {\n      day: '',\n      open: true,\n      hourFrom: '',\n      hourTo: ''\n    },\n    {\n      day: '',\n      open: true,\n      hourFrom: '',\n      hourTo: ''\n    },\n    {\n      day: '',\n      open: false,\n      hourFrom: '',\n      hourTo: ''\n    }\n  ];\n  location: {\n    address: string,\n    city: string,\n    latlng: string,\n    mapImage: string\n  };\n  whereToStay: Array<{picture: string, name: string, rating: number}> = [\n    {\n      picture: '',\n      name: '',\n      rating: null\n    },\n    {\n      picture: '',\n      name: '',\n      rating: null\n    },\n    {\n      picture: '',\n      name: '',\n      rating: null\n    }\n  ];\n  whereToEat: Array<{picture: string, name: string, rating: number}> = [\n    {\n      picture: '',\n      name: '',\n      rating: null\n    },\n    {\n      picture: '',\n      name: '',\n      rating: null\n    },\n    {\n      picture: '',\n      name: '',\n      rating: null\n    }\n  ];\n  relatedActivities: Array<{picture: string, name: string, category: string, rating: number}> = [\n    {\n      picture: '',\n      name: '',\n      category: '',\n      rating: null\n    },\n    {\n      picture: '',\n      name: '',\n      category: '',\n      rating: null\n    }\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class TravelItemModel {\n  image: string;\n  icon: string;\n  name: string;\n  description: string;\n  category: string;\n  address: string;\n  rating: number;\n  reviewsCount: number;\n}\n\nexport class TravelListingModel extends ShellModel {\n  items: Array<TravelItemModel> = [\n    new TravelItemModel(),\n    new TravelItemModel(),\n    new TravelItemModel(),\n    new TravelItemModel()\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DataStore } from '../shell/data-store';\nimport { TravelListingModel } from './listing/travel-listing.model';\nimport { TravelDetailsModel } from './details/travel-details.model';\n\n@Injectable()\nexport class TravelService {\n  private listingDataStore: DataStore<TravelListingModel>;\n  private detailsDataStore: DataStore<TravelDetailsModel>;\n\n  constructor(private http: HttpClient) { }\n\n  public getListingDataSource(): Observable<TravelListingModel> {\n    return this.http.get<TravelListingModel>('./assets/sample-data/travel/listing.json')\n    .pipe(\n      map(\n        (data: TravelListingModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const listing = new TravelListingModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. listing = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(listing, data);\n\n          return listing;\n        }\n      )\n    );\n  }\n\n  public getListingStore(dataSource: Observable<TravelListingModel>): DataStore<TravelListingModel> {\n    // Use cache if available\n    if (!this.listingDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: TravelListingModel = new TravelListingModel();\n      this.listingDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.listingDataStore.load(dataSource);\n    }\n    return this.listingDataStore;\n  }\n\n  public getDetailsDataSource(): Observable<TravelDetailsModel> {\n    return this.http.get<TravelDetailsModel>('./assets/sample-data/travel/details.json')\n    .pipe(\n      map(\n        (data: TravelDetailsModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const details = new TravelDetailsModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. details = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(details, data);\n\n          return details;\n        }\n      )\n    );\n  }\n\n  public getDetailsStore(dataSource: Observable<TravelDetailsModel>): DataStore<TravelDetailsModel> {\n    // Use cache if available\n    if (!this.detailsDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: TravelDetailsModel = new TravelDetailsModel();\n      this.detailsDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.detailsDataStore.load(dataSource);\n    }\n    return this.detailsDataStore;\n  }\n}\n\n","import { ShellModel } from '../../shell/data-store';\n\nexport class UserFriendsModel extends ShellModel {\n  friends: Array<{\n    image: string,\n    name: string,\n    job: string,\n    followers: string,\n    followings: string,\n    following: boolean}> = [\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: true\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    }\n  ];\n  followers: Array<{\n    image: string,\n    name: string,\n    job: string,\n    followers: string,\n    followings: string,\n    following: boolean}> = [\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: true\n    }\n  ];\n  following: Array<{\n    image: string,\n    name: string,\n    job: string,\n    followers: string,\n    followings: string,\n    following: boolean}> = [\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    },\n    {\n      image: '',\n      name: '',\n      job: '',\n      followers: '',\n      followings: '',\n      following: false\n    }\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { ShellModel } from '../../shell/data-store';\n\nexport class UserProfileModel extends ShellModel {\n  userImage: string;\n  name: string;\n  membership: string;\n  job: string;\n  likes: string;\n  followers: string;\n  following: string;\n  about: string;\n  friends: Array<{image: string, name: string}> = [\n    {\n      image: '',\n      name: ''\n    },\n    {\n      image: '',\n      name: ''\n    },\n    {\n      image: '',\n      name: ''\n    },\n    {\n      image: '',\n      name: ''\n    }\n  ];\n  photos: Array<string> = [\n    '',\n    '',\n    '',\n    ''\n  ];\n\n  constructor() {\n    super();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DataStore } from '../shell/data-store';\nimport { UserProfileModel } from './profile/user-profile.model';\nimport { UserFriendsModel } from './friends/user-friends.model';\n\n@Injectable()\nexport class UserService {\n  private profileDataStore: DataStore<UserProfileModel>;\n  private friendsDataStore: DataStore<UserFriendsModel>;\n\n  constructor(private http: HttpClient) { }\n\n  public getProfileDataSource(): Observable<UserProfileModel> {\n    return this.http.get<UserProfileModel>('./assets/sample-data/user/user-profile.json')\n    .pipe(\n      map(\n        (data: UserProfileModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const profile = new UserProfileModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. profile = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(profile, data);\n\n          return profile;\n        }\n      )\n    );\n  }\n\n  public getProfileStore(dataSource: Observable<UserProfileModel>): DataStore<UserProfileModel> {\n    // Use cache if available\n    if (!this.profileDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: UserProfileModel = new UserProfileModel();\n      this.profileDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.profileDataStore.load(dataSource);\n    }\n    return this.profileDataStore;\n  }\n\n  public getFriendsDataSource(): Observable<UserFriendsModel> {\n    return this.http.get<UserFriendsModel>('./assets/sample-data/user/user-friends.json')\n    .pipe(\n      map(\n        (data: UserFriendsModel) => {\n          // Note: HttpClient cannot know how to instantiate a class for the returned data\n          // We need to properly cast types from json data\n          const friends = new UserFriendsModel();\n\n          // The Object.assign() method copies all enumerable own properties from one or more source objects to a target object.\n          // Note: If you have non-enummerable properties, you can try a spread operator instead. friends = {...data};\n          // (see: https://scotch.io/bar-talk/copying-objects-in-javascript#toc-using-spread-elements-)\n          Object.assign(friends, data);\n\n          return friends;\n        }\n      )\n    );\n  }\n\n  public getFriendsStore(dataSource: Observable<UserFriendsModel>): DataStore<UserFriendsModel> {\n    // Use cache if available\n    if (!this.friendsDataStore) {\n      // Initialize the model specifying that it is a shell model\n      const shellModel: UserFriendsModel = new UserFriendsModel();\n      this.friendsDataStore = new DataStore(shellModel);\n      // Trigger the loading mechanism (with shell) in the dataStore\n      this.friendsDataStore.load(dataSource);\n    }\n    return this.friendsDataStore;\n  }\n\n}\n"]}