/**
 * @fileoverview added by tsickle
 * Generated from: lib/bottom-sheet/bottom-sheet.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FivBottomSheetContent } from './bottom-sheet-content/bottom-sheet-content.component';
import { Component, Input, Output, EventEmitter, ElementRef, Renderer2, ContentChild } from '@angular/core';
import { DomController, Platform } from '@ionic/angular';
import { DrawerState } from './drawer-state';
import { merge, Subject, fromEvent, from } from 'rxjs';
import { takeUntil, map, tap, flatMap, repeat, withLatestFrom, filter, first, take, repeatWhen } from 'rxjs/operators';
/**
 * @record
 */
export function PanEvent() { }
if (false) {
    /** @type {?} */
    PanEvent.prototype.currentOffset;
    /** @type {?} */
    PanEvent.prototype.startOffset;
    /** @type {?} */
    PanEvent.prototype.currentTop;
    /** @type {?} */
    PanEvent.prototype.startTop;
    /** @type {?} */
    PanEvent.prototype.distance;
    /** @type {?} */
    PanEvent.prototype.touch;
}
export class FivBottomSheet {
    /**
     * @param {?} _element
     * @param {?} _renderer
     * @param {?} _domCtrl
     * @param {?} _platform
     */
    constructor(_element, _renderer, _domCtrl, _platform) {
        this._element = _element;
        this._renderer = _renderer;
        this._domCtrl = _domCtrl;
        this._platform = _platform;
        this.dockedHeight = 80;
        this.shouldBounce = true;
        this.distanceTop = 56;
        this.transition = '0.25s';
        this.state = DrawerState.Bottom;
        this.bounceThreshold = 40;
        this.panThreshold = 20;
        this.panEnabled = true;
        this.stateChange = new EventEmitter();
        this.fivOpen = new EventEmitter();
        this.fivDocked = new EventEmitter();
        this.fivClose = new EventEmitter();
        this.fivProgress = new EventEmitter();
        this.scrollTop = 0;
        this.$onDestroy = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.$onDestroy.next();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._setDrawerState(this.state);
        this.content.shouldBounce = this.shouldBounce;
        /** @type {?} */
        const touchmove = fromEvent(this._element.nativeElement, 'touchmove', {
            passive: true
        });
        /** @type {?} */
        const touchend = merge(fromEvent(this._element.nativeElement, 'touchend', {
            passive: true
        }), fromEvent(this._element.nativeElement, 'touchcancel', {
            passive: true
        }));
        /** @type {?} */
        const getScrollContent = from(this.content.content.getScrollElement());
        /** @type {?} */
        const scroll = this.content.content.ionScroll.pipe(tap((/**
         * @param {?} el
         * @return {?}
         */
        el => (this.scrollTop = el.detail.scrollTop))), takeUntil(this.$onDestroy));
        scroll.subscribe();
        this.content.content.ionScrollEnd
            .pipe(filter((/**
         * @param {?} el
         * @return {?}
         */
        el => this.scrollTop === 0 && this.state === DrawerState.Top)), tap((/**
         * @return {?}
         */
        () => this.content.content.scrollByPoint(0, 1, 0))), takeUntil(this.$onDestroy))
            .subscribe();
        /** @type {?} */
        const canStart = touchmove.pipe(filter((/**
         * @return {?}
         */
        () => this.scrollTop === 0)));
        /** @type {?} */
        const start = canStart.pipe(take(1), tap((/**
         * @param {?} s
         * @return {?}
         */
        (s) => this._handlePanStart(s))));
        /** @type {?} */
        const pan = start.pipe(filter((/**
         * @return {?}
         */
        () => this.panEnabled)), flatMap((/**
         * @return {?}
         */
        () => touchmove)), map((/**
         * @param {?} tm
         * @return {?}
         */
        (tm) => this.calculatePanEvent(tm))));
        /** @type {?} */
        const handlePan = pan.pipe(filter((/**
         * @param {?} p
         * @return {?}
         */
        p => Math.abs(p.distance) > this.panThreshold)), map((/**
         * @param {?} tm
         * @return {?}
         */
        tm => this._handlePan(tm))), takeUntil(touchend), repeat(), takeUntil(this.$onDestroy));
        /** @type {?} */
        const handleBackPan = pan
            .pipe(filter((/**
         * @param {?} p
         * @return {?}
         */
        p => Math.abs(p.distance) <= this.panThreshold && this.content.panning)), map((/**
         * @param {?} tm
         * @return {?}
         */
        tm => this._handlePan(tm))), takeUntil(touchend), repeat(), takeUntil(this.$onDestroy))
            .subscribe();
        handlePan
            .pipe(first(), tap((/**
         * @return {?}
         */
        () => (this.content.panning = true))), repeatWhen((/**
         * @return {?}
         */
        () => touchend)), takeUntil(this.$onDestroy))
            .subscribe();
        handlePan
            .pipe(flatMap((/**
         * @return {?}
         */
        () => touchend)), first(), withLatestFrom(pan), tap((/**
         * @return {?}
         */
        () => this.content.content.scrollByPoint(0, 1, 0))), tap((/**
         * @return {?}
         */
        () => (this.content.panning = false))), map((/**
         * @param {?} ev
         * @return {?}
         */
        ev => ev[1])), repeat(), takeUntil(this.$onDestroy))
            .subscribe((/**
         * @param {?} ev
         * @return {?}
         */
        ev => this._handlePanEnd(ev)));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!changes.state) {
            return;
        }
        this._setDrawerState(changes.state.currentValue);
        this.updateContent(changes.state.currentValue);
    }
    /**
     * @param {?} state
     * @return {?}
     */
    updateContent(state) {
        if (this.content) {
            this.content.updateState(state);
        }
    }
    /**
     * @private
     * @param {?} state
     * @return {?}
     */
    _setDrawerState(state) {
        this._renderer.setStyle(this._element.nativeElement, 'transition', this.transition);
        switch (state) {
            case DrawerState.Bottom:
                this.content.content.scrollToTop(0);
                this._setTranslateY(this._platform.height());
                break;
            case DrawerState.Docked:
                this.content.content.scrollToTop(0);
                this._setTranslateY(this._platform.height() - this.dockedHeight);
                break;
            default:
                this._setTranslateY(this.distanceTop);
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    _handlePanStart(event) {
        this._startPositionTop = this.getCurrentTop();
        this._startPositionOffset = event.touches[0].pageY;
    }
    /**
     * @return {?}
     */
    getCurrentTop() {
        return this._element.nativeElement.getBoundingClientRect().top;
    }
    /**
     * @private
     * @param {?} ev
     * @return {?}
     */
    _handlePanEnd(ev) {
        if (this.shouldBounce) {
            this._renderer.setStyle(this._element.nativeElement, 'transition', this.transition);
            switch (this.state) {
                case DrawerState.Docked:
                    this._handleDockedPanEnd(ev);
                    break;
                case DrawerState.Top:
                    this._handleTopPanEnd(ev);
                    break;
                default:
                    this._handleBottomPanEnd(ev);
            }
        }
        this.stateChange.emit(this.state);
    }
    /**
     * @private
     * @param {?} ev
     * @return {?}
     */
    _handleTopPanEnd(ev) {
        if (ev.distance > this.bounceThreshold) {
            if (this.state !== DrawerState.Docked) {
                this.state = DrawerState.Docked;
                this.fivDocked.emit(this);
            }
        }
        else {
            this._setTranslateY(this.distanceTop);
        }
    }
    /**
     * @private
     * @param {?} ev
     * @return {?}
     */
    _handleDockedPanEnd(ev) {
        /** @type {?} */
        const absDeltaY = Math.abs(ev.distance);
        if (absDeltaY > this.bounceThreshold && ev.distance < 0) {
            if (this.state !== DrawerState.Top) {
                this.state = DrawerState.Top;
                this.fivOpen.emit();
            }
        }
        else if (absDeltaY > this.bounceThreshold && ev.distance > 0) {
            if (this.state !== DrawerState.Bottom) {
                this.close();
            }
        }
        else {
            this._setTranslateY(this._platform.height() - this.dockedHeight);
        }
    }
    /**
     * @private
     * @param {?} ev
     * @return {?}
     */
    _handleBottomPanEnd(ev) {
        if (-ev.distance > this.bounceThreshold) {
            if (this.state !== DrawerState.Docked) {
                this.state = DrawerState.Docked;
                this.fivDocked.emit();
            }
        }
        else {
            this._setTranslateY('100vh');
        }
    }
    /**
     * @param {?} ev
     * @return {?}
     */
    calculatePanEvent(ev) {
        return {
            currentOffset: ev.touches[0].pageY,
            startOffset: this._startPositionOffset,
            startTop: this._startPositionTop,
            currentTop: this.getCurrentTop(),
            distance: ev.touches[0].pageY - this._startPositionOffset,
            touch: ev
        };
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    _handlePan(event) {
        this._renderer.setStyle(this._element.nativeElement, 'transition', 'none');
        if (event.currentTop >= 0 && event.currentTop <= this._platform.height()) {
            /** @type {?} */
            const newTop = this._startPositionTop + event.distance;
            if (newTop >= this.distanceTop) {
                this._setTranslateY(newTop);
            }
            else if (newTop <= this.distanceTop && this.content.panning) {
                this._setTranslateY(this.distanceTop);
                this.content.content.scrollToPoint(0, 0 - newTop, 0);
            }
            return event;
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _setTranslateY(value) {
        this.fivProgress.emit(1 - value / (this._platform.height() - this.dockedHeight));
        this._domCtrl.write((/**
         * @return {?}
         */
        () => {
            this._renderer.setStyle(this._element.nativeElement, 'transform', 'translateY(' + value + 'px)');
        }));
    }
    /**
     * @return {?}
     */
    open() {
        this.state = DrawerState.Top;
        this._setDrawerState(this.state);
        this.updateContent(this.state);
    }
    /**
     * @return {?}
     */
    close() {
        this.state = DrawerState.Bottom;
        this._setDrawerState(this.state);
        this.updateContent(this.state);
        this.fivClose.emit();
    }
    /**
     * @return {?}
     */
    dock() {
        this.state = DrawerState.Docked;
        this._setDrawerState(this.state);
        this.updateContent(this.state);
    }
}
FivBottomSheet.decorators = [
    { type: Component, args: [{
                selector: 'fiv-bottom-sheet',
                template: "<div class=\"fiv-bottom-drawer-scrollable-content\" no-bounce>\n  <ng-content></ng-content>\n</div>",
                styles: [":host{width:100%;height:100%;position:absolute;left:0;z-index:11!important;background-color:rgba(0,0,0,0);transform:translateY(100vh)}.fiv-bottom-drawer-scrollable-content{width:100%;height:100%}"]
            }] }
];
/** @nocollapse */
FivBottomSheet.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: DomController },
    { type: Platform }
];
FivBottomSheet.propDecorators = {
    dockedHeight: [{ type: Input }],
    shouldBounce: [{ type: Input }],
    distanceTop: [{ type: Input }],
    transition: [{ type: Input }],
    state: [{ type: Input }],
    bounceThreshold: [{ type: Input }],
    panThreshold: [{ type: Input }],
    panEnabled: [{ type: Input }],
    stateChange: [{ type: Output }],
    fivOpen: [{ type: Output }],
    fivDocked: [{ type: Output }],
    fivClose: [{ type: Output }],
    fivProgress: [{ type: Output }],
    content: [{ type: ContentChild, args: [FivBottomSheetContent, { static: true },] }]
};
if (false) {
    /** @type {?} */
    FivBottomSheet.prototype.dockedHeight;
    /** @type {?} */
    FivBottomSheet.prototype.shouldBounce;
    /** @type {?} */
    FivBottomSheet.prototype.distanceTop;
    /** @type {?} */
    FivBottomSheet.prototype.transition;
    /** @type {?} */
    FivBottomSheet.prototype.state;
    /** @type {?} */
    FivBottomSheet.prototype.bounceThreshold;
    /** @type {?} */
    FivBottomSheet.prototype.panThreshold;
    /** @type {?} */
    FivBottomSheet.prototype.panEnabled;
    /** @type {?} */
    FivBottomSheet.prototype.stateChange;
    /** @type {?} */
    FivBottomSheet.prototype.fivOpen;
    /** @type {?} */
    FivBottomSheet.prototype.fivDocked;
    /** @type {?} */
    FivBottomSheet.prototype.fivClose;
    /** @type {?} */
    FivBottomSheet.prototype.fivProgress;
    /** @type {?} */
    FivBottomSheet.prototype.content;
    /**
     * @type {?}
     * @private
     */
    FivBottomSheet.prototype._startPositionTop;
    /** @type {?} */
    FivBottomSheet.prototype._startPositionOffset;
    /** @type {?} */
    FivBottomSheet.prototype.scrollTop;
    /** @type {?} */
    FivBottomSheet.prototype.$onDestroy;
    /**
     * @type {?}
     * @private
     */
    FivBottomSheet.prototype._element;
    /**
     * @type {?}
     * @private
     */
    FivBottomSheet.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    FivBottomSheet.prototype._domCtrl;
    /**
     * @type {?}
     * @private
     */
    FivBottomSheet.prototype._platform;
}
//# sourceMappingURL=data:application/json;base64,