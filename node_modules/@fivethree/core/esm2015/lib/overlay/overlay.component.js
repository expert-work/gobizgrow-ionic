/**
 * @fileoverview added by tsickle
 * Generated from: lib/overlay/overlay.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, TemplateRef, Input, Output, EventEmitter, ViewContainerRef } from '@angular/core';
import { FivOverlayContent } from './overlay-content/overlay-content.component';
import { FivOverlayService } from './overlay.service';
export class FivOverlay {
    /**
     * @param {?} viewContainer
     * @param {?} overlay
     */
    constructor(viewContainer, overlay) {
        this.viewContainer = viewContainer;
        this.overlay = overlay;
        this.afterInit = new EventEmitter();
        this._open = false;
    }
    /**
     * @param {?=} priority
     * @param {?=} data
     * @return {?}
     */
    show(priority, data) {
        if (!this.componentRef) {
            this.componentRef = this.overlay.createOverlay(this.viewContainer, FivOverlayContent, this.ngContent);
            this._open = true;
            this.componentRef.instance.priority = priority;
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.afterInit.emit(data);
            }), 0);
            return this.componentRef.instance;
        }
    }
    /**
     * @return {?}
     */
    hide() {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.componentRef = null;
            this._open = false;
        }
    }
    /**
     * @return {?}
     */
    get open() {
        return this._open;
    }
}
FivOverlay.decorators = [
    { type: Component, args: [{
                selector: 'fiv-overlay',
                template: "<ng-template #content>\n  <ng-content></ng-content>\n</ng-template>",
                styles: [""]
            }] }
];
/** @nocollapse */
FivOverlay.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: FivOverlayService }
];
FivOverlay.propDecorators = {
    ngContent: [{ type: ViewChild, args: ['content', { static: true },] }],
    priority: [{ type: Input }],
    afterInit: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    FivOverlay.prototype.componentRef;
    /** @type {?} */
    FivOverlay.prototype.ngContent;
    /** @type {?} */
    FivOverlay.prototype.priority;
    /** @type {?} */
    FivOverlay.prototype.afterInit;
    /**
     * @type {?}
     * @private
     */
    FivOverlay.prototype._open;
    /**
     * @type {?}
     * @private
     */
    FivOverlay.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    FivOverlay.prototype.overlay;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZml2ZXRocmVlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvb3ZlcmxheS9vdmVybGF5LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsU0FBUyxFQUVULFdBQVcsRUFDWCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixnQkFBZ0IsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDaEYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFPdEQsTUFBTSxPQUFPLFVBQVU7Ozs7O0lBUXJCLFlBQ1UsYUFBK0IsRUFDL0IsT0FBMEI7UUFEMUIsa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBQy9CLFlBQU8sR0FBUCxPQUFPLENBQW1CO1FBTDFCLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2pDLFVBQUssR0FBRyxLQUFLLENBQUM7SUFLbkIsQ0FBQzs7Ozs7O0lBRUosSUFBSSxDQUFDLFFBQWlCLEVBQUUsSUFBVTtRQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUN0QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUM1QyxJQUFJLENBQUMsYUFBYSxFQUNsQixpQkFBaUIsRUFDakIsSUFBSSxDQUFDLFNBQVMsQ0FDZixDQUFDO1lBQ0YsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDbEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztZQUMvQyxVQUFVOzs7WUFBQyxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUIsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDO1lBRU4sT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztTQUNuQztJQUNILENBQUM7Ozs7SUFFRCxJQUFJO1FBQ0YsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDNUIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7WUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7U0FDcEI7SUFDSCxDQUFDOzs7O0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7OztZQTdDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLCtFQUF1Qzs7YUFFeEM7Ozs7WUFUQyxnQkFBZ0I7WUFHVCxpQkFBaUI7Ozt3QkFVdkIsU0FBUyxTQUFDLFNBQVMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7dUJBQ3JDLEtBQUs7d0JBQ0wsTUFBTTs7Ozs7OztJQUpQLGtDQUFzRDs7SUFFdEQsK0JBQW9FOztJQUNwRSw4QkFBa0I7O0lBQ2xCLCtCQUF5Qzs7Ozs7SUFDekMsMkJBQXNCOzs7OztJQUdwQixtQ0FBdUM7Ozs7O0lBQ3ZDLDZCQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgVmlld0NoaWxkLFxuICBDb21wb25lbnRSZWYsXG4gIFRlbXBsYXRlUmVmLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIFZpZXdDb250YWluZXJSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGaXZPdmVybGF5Q29udGVudCB9IGZyb20gJy4vb3ZlcmxheS1jb250ZW50L292ZXJsYXktY29udGVudC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRml2T3ZlcmxheVNlcnZpY2UgfSBmcm9tICcuL292ZXJsYXkuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Zpdi1vdmVybGF5JyxcbiAgdGVtcGxhdGVVcmw6ICcuL292ZXJsYXkuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9vdmVybGF5LmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgRml2T3ZlcmxheSB7XG4gIHByaXZhdGUgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8Rml2T3ZlcmxheUNvbnRlbnQ+O1xuXG4gIEBWaWV3Q2hpbGQoJ2NvbnRlbnQnLCB7IHN0YXRpYzogdHJ1ZSB9KSBuZ0NvbnRlbnQ6IFRlbXBsYXRlUmVmPGFueT47XG4gIEBJbnB1dCgpIHByaW9yaXR5O1xuICBAT3V0cHV0KCkgYWZ0ZXJJbml0ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBwcml2YXRlIF9vcGVuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByaXZhdGUgb3ZlcmxheTogRml2T3ZlcmxheVNlcnZpY2VcbiAgKSB7fVxuXG4gIHNob3cocHJpb3JpdHk/OiBudW1iZXIsIGRhdGE/OiBhbnkpIHtcbiAgICBpZiAoIXRoaXMuY29tcG9uZW50UmVmKSB7XG4gICAgICB0aGlzLmNvbXBvbmVudFJlZiA9IHRoaXMub3ZlcmxheS5jcmVhdGVPdmVybGF5KFxuICAgICAgICB0aGlzLnZpZXdDb250YWluZXIsXG4gICAgICAgIEZpdk92ZXJsYXlDb250ZW50LFxuICAgICAgICB0aGlzLm5nQ29udGVudFxuICAgICAgKTtcbiAgICAgIHRoaXMuX29wZW4gPSB0cnVlO1xuICAgICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmFmdGVySW5pdC5lbWl0KGRhdGEpO1xuICAgICAgfSwgMCk7XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZTtcbiAgICB9XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGlmICh0aGlzLmNvbXBvbmVudFJlZikge1xuICAgICAgdGhpcy5jb21wb25lbnRSZWYuZGVzdHJveSgpO1xuICAgICAgdGhpcy5jb21wb25lbnRSZWYgPSBudWxsO1xuICAgICAgdGhpcy5fb3BlbiA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGdldCBvcGVuKCkge1xuICAgIHJldHVybiB0aGlzLl9vcGVuO1xuICB9XG59XG4iXX0=