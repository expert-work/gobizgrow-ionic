/**
 * @fileoverview added by tsickle
 * Generated from: lib/gallery/gallery.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FivGalleryToolbar } from './gallery-toolbar/gallery-toolbar.component';
import { IonSlides, DomController, Platform } from '@ionic/angular';
import { FivOverlay } from './../overlay/overlay.component';
import { Component, ViewChild, ElementRef, Renderer2, ContentChildren, QueryList, forwardRef, HostListener, Inject, ChangeDetectorRef, Input, Output, EventEmitter, ViewChildren } from '@angular/core';
import { style, animate, AnimationBuilder, trigger, transition, useAnimation } from '@angular/animations';
import { DOCUMENT } from '@angular/common';
import { FivGalleryImage } from './gallery-image/gallery-image.component';
import { from, Subject, zip, of } from 'rxjs';
import { mergeMap, takeUntil, tap } from 'rxjs/operators';
import { tween, fromTo, getPosition, setPosition, fromToPixels, easeOutSine } from '@fivethree/ngx-rxjs-animations';
import { fade } from '../animations/animations';
import { ImageService } from './image.service';
export class FivGallery {
    /**
     * @param {?} domCtrl
     * @param {?} renderer
     * @param {?} animation
     * @param {?} change
     * @param {?} platform
     * @param {?} imageService
     * @param {?} document
     */
    constructor(domCtrl, renderer, animation, change, platform, imageService, document) {
        this.domCtrl = domCtrl;
        this.renderer = renderer;
        this.animation = animation;
        this.change = change;
        this.platform = platform;
        this.imageService = imageService;
        this.document = document;
        this.activeIndex = 0;
        this.inFullscreen = false;
        this.zoomedIn = false;
        this.controlsVisible = true;
        this.slidesLoaded = false;
        this.morphing = false;
        this.backdrop = false;
        this.backdropColor = '#000000ee';
        this.pagerVisible = true;
        this.ambient = false;
        this.willOpen = new EventEmitter();
        this.willClose = new EventEmitter();
        this.didOpen = new EventEmitter();
        this.didClose = new EventEmitter();
        this.backdropChange = new EventEmitter();
        this.$onDestroy = new Subject();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.updateImagesIndex();
        this.setupToolbars();
        this.subscribeToImageEvents();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.$onDestroy.next();
    }
    /**
     * @return {?}
     */
    subscribeToImageEvents() {
        from(this.images.map((/**
         * @param {?} image
         * @return {?}
         */
        image => image.click)))
            .pipe(mergeMap((/**
         * @param {?} value
         * @return {?}
         */
        (value) => value)), takeUntil(this.$onDestroy))
            .subscribe((/**
         * @param {?} image
         * @return {?}
         */
        image => {
            this.open(image);
        }));
    }
    /**
     * @return {?}
     */
    updateImagesIndex() {
        this.images.forEach((/**
         * @param {?} img
         * @param {?} i
         * @return {?}
         */
        (img, i) => {
            img.index = i;
        }));
    }
    /**
     * @return {?}
     */
    setupToolbars() {
        this.toolbars.forEach((/**
         * @param {?} toolbar
         * @return {?}
         */
        toolbar => {
            if (toolbar.position === 'top') {
                this.topToolbar = toolbar.content;
            }
            else {
                this.bottomToolbar = toolbar.content;
            }
        }));
    }
    /**
     * @param {?} initial
     * @return {?}
     */
    open(initial) {
        this.willOpen.emit(initial);
        this.activeIndex = initial.index;
        this.morphing = true;
        this.overlay.show(50000);
        this.initialImage = initial;
        this.updateBackdrop(this.activeIndex);
        this.initialImage.originalSrc = initial.src;
        setTimeout((/**
         * @return {?}
         */
        () => {
            //wait a little for ripple
            this.backdrop = true;
            this.showControls();
            this.morphIn();
        }), 300);
    }
    /**
     * @return {?}
     */
    morphIn() {
        this.morphOverlay.show(49999);
        /** @type {?} */
        const f = getPosition(this.initialImage.thumbnail);
        /** @type {?} */
        const t = this.calculateImagePosition();
        /** @type {?} */
        const tweenDone = new Subject();
        tween(easeOutSine, 320)
            .pipe(fromToPixels(this.morphImage, f.top, t.top, 'top'), fromToPixels(this.morphImage, f.left, t.left, 'left'), fromToPixels(this.morphImage, f.height, t.height, 'height'), fromToPixels(this.morphImage, f.width, t.width, 'width'))
            .subscribe({
            complete: (/**
             * @return {?}
             */
            () => {
                tweenDone.next();
            })
        });
        zip(tweenDone, !this.slidesLoaded ? this.slides.ionSlidesDidLoad : of(true))
            .pipe(tap((/**
         * @return {?}
         */
        () => {
            this.morphing = false;
            this.morphOverlay.hide();
            this.didOpen.emit(this.initialImage);
            this.swiper.nativeElement.swiper.on('click', (/**
             * @return {?}
             */
            () => {
                this.handleSingleTap();
            }));
        })), takeUntil(this.$onDestroy))
            .subscribe();
    }
    /**
     * @return {?}
     */
    dismiss() {
        this.close(false);
    }
    /**
     * @param {?=} emit
     * @return {?}
     */
    close(emit = true) {
        if (emit) {
            this.willClose.emit(this.initialImage);
        }
        this.backdrop = false;
        /** @type {?} */
        const sameAsInitial = this.images.toArray()[this.activeIndex].index === this.initialImage.index;
        if (sameAsInitial) {
            this.morphBack();
        }
        else {
            this.slideOut();
        }
        this.resetSlides(0);
        if (this.inFullscreen) {
            this.closeFullscreen();
        }
        this.slidesLoaded = false;
    }
    /**
     * @return {?}
     */
    morphBack() {
        /** @type {?} */
        const f = getPosition(this.getActiveImage());
        /** @type {?} */
        const t = getPosition(this.initialImage.thumbnail);
        this.overlay.hide();
        this.morphOverlay.show();
        tween(easeOutSine, 240)
            .pipe(fromToPixels(this.morphImage, f.top, t.top, 'top'), fromToPixels(this.morphImage, f.left, t.left, 'left'), fromToPixels(this.morphImage, f.height, t.height, 'height'), fromToPixels(this.morphImage, f.width, t.width, 'width'))
            .subscribe({
            complete: (/**
             * @return {?}
             */
            () => {
                this.morphOverlay.hide();
                this.didClose.emit(this.initialImage);
                this.initialImage = null;
            })
        });
    }
    /**
     * @return {?}
     */
    slideOut() {
        this.overlay.hide();
        this.morphOverlay.show();
        this.morphImage.nativeElement.src = this.getActiveImage().nativeElement.src;
        setPosition(this.morphImage, getPosition(this.getActiveImage()));
        tween(easeOutSine, 240)
            .pipe(fromTo(this.morphImage, 'transform', 0, 100, (/**
         * @param {?} t
         * @return {?}
         */
        (t) => `translateY(${t}%)`)))
            .subscribe({
            complete: (/**
             * @return {?}
             */
            () => {
                this.morphImage.nativeElement.style.transform = '';
                this.morphOverlay.hide();
                this.didClose.emit(this.initialImage);
                this.initialImage = null;
            })
        });
    }
    /**
     * @return {?}
     */
    getActiveImage() {
        return this.slideImages.toArray()[this.activeIndex];
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    transformSlides(progress) {
        if (this.controlsVisible) {
            this.hideControls();
        }
        this.domCtrl.write((/**
         * @return {?}
         */
        () => {
            this.renderer.setStyle(this.viewer.nativeElement, 'transform', `translateY(${progress * 120}px)`);
        }));
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    resetSlides(progress) {
        /** @type {?} */
        const reset = this.animation.build([
            style({ transform: `translateY(${progress * 120}px)` }),
            animate('150ms', style({ transform: `translateY(0px)` }))
        ]);
        /** @type {?} */
        const animation = reset.create(this.viewer.nativeElement);
        animation.play();
        animation.onDone((/**
         * @return {?}
         */
        () => {
            animation.destroy();
            this.transformSlides(0);
            this.showControls();
        }));
    }
    /**
     * @return {?}
     */
    slideDidChange() {
        this.activeIndex = this.swiper.nativeElement.swiper.activeIndex;
    }
    /**
     * @return {?}
     */
    ionSlideNextStart() {
        if (this.slidesLoaded) {
            this.updateBackdrop(this.activeIndex + 1);
        }
    }
    /**
     * @return {?}
     */
    ionSlidePrevStart() {
        if (this.slidesLoaded) {
            this.updateBackdrop(this.activeIndex - 1);
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    updateBackdrop(index) {
        this.backdropColor = this.ambient
            ? this.imageService.getAverageRGB(this.images.toArray()[index].thumbnail.nativeElement)
            : '#000000ee';
        this.backdropChange.emit();
    }
    /**
     * @return {?}
     */
    onSlidesLoad() {
        this.slidesLoaded = true;
    }
    /**
     * @return {?}
     */
    calculateImagePosition() {
        /** @type {?} */
        const nH = this.initialImage.thumbnail.nativeElement.naturalHeight;
        /** @type {?} */
        const nW = this.initialImage.thumbnail.nativeElement.naturalWidth;
        /** @type {?} */
        let height = Math.min(nH, this.platform.height());
        /** @type {?} */
        let width = Math.min(nW, this.platform.width());
        /** @type {?} */
        const ratio = nW / nH;
        if (ratio * height < width) {
            width = height * ratio;
        }
        else {
            height = width / ratio;
        }
        /** @type {?} */
        const top = this.platform.height() / 2 - height / 2;
        /** @type {?} */
        const left = this.platform.width() / 2 - width / 2;
        /** @type {?} */
        const p = {
            height: height,
            width: width,
            left: left,
            top: top
        };
        return p;
    }
    /**
     * @return {?}
     */
    fullscreen() {
        if (this.inFullscreen) {
            this.closeFullscreen();
        }
        else {
            this.openFullscreen();
        }
    }
    /**
     * @return {?}
     */
    openFullscreen() {
        /** @type {?} */
        const elem = document.documentElement;
        if (elem.requestFullscreen) {
            elem.requestFullscreen();
        }
        else if (elem['mozRequestFullScreen']) {
            /* Firefox */
            elem['mozRequestFullScreen']();
        }
        else if (elem['webkitRequestFullscreen']) {
            /* Chrome, Safari and Opera */
            elem['webkitRequestFullscreen']();
        }
        else if (elem['msRequestFullscreen']) {
            /* IE/Edge */
            elem['msRequestFullscreen']();
        }
        this.inFullscreen = true;
    }
    /**
     * @return {?}
     */
    closeFullscreen() {
        this.inFullscreen = false;
        if (this.document.exitFullscreen) {
            this.document.exitFullscreen();
        }
        else if (this.document.mozCancelFullScreen) {
            /* Firefox */
            this.document.mozCancelFullScreen();
        }
        else if (this.document.webkitExitFullscreen) {
            /* Chrome, Safari and Opera */
            this.document.webkitExitFullscreen();
        }
        else if (this.document.msExitFullscreen) {
            /* IE/Edge */
            this.document.msExitFullscreen();
        }
    }
    /**
     * @return {?}
     */
    zoom() {
        if (this.zoomedIn) {
            this.zoomOut();
        }
        else {
            this.zoomIn();
        }
    }
    /**
     * @return {?}
     */
    zoomIn() {
        this.swiper.nativeElement.swiper.zoom.in();
        this.zoomedIn = true;
    }
    /**
     * @return {?}
     */
    zoomOut() {
        this.swiper.nativeElement.swiper.zoom.out();
        this.zoomedIn = false;
    }
    /**
     * @return {?}
     */
    handleSingleTap() {
        this.controlsVisible = !this.controlsVisible;
        this.change.detectChanges();
    }
    /**
     * @return {?}
     */
    hideControls() {
        this.controlsVisible = false;
        this.change.detectChanges();
    }
    /**
     * @return {?}
     */
    showControls() {
        this.controlsVisible = true;
        this.change.detectChanges();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    keyEvent(event) {
        if (this.slidesLoaded && !this.morphing) {
            this.handleKeyboardEvents(event);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleKeyboardEvents(event) {
        if (event.key === 'ArrowRight') {
            this.next();
            return;
        }
        if (event.key === 'ArrowLeft') {
            this.prev();
            return;
        }
        if (event.key === 'ArrowDown' || event.key === 'Escape') {
            this.close();
            return;
        }
    }
    /**
     * @return {?}
     */
    next() {
        if (this.slides && this.slidesLoaded) {
            this.slides.slideNext();
        }
    }
    /**
     * @return {?}
     */
    prev() {
        if (this.slides && this.slidesLoaded) {
            this.slides.slidePrev();
        }
    }
}
FivGallery.decorators = [
    { type: Component, args: [{
                selector: 'fiv-gallery',
                template: "<ng-content></ng-content>\n<fiv-overlay #overlay>\n  <div [style.background]=\"backdropColor\" [@fade] class=\"backdrop\" *ngIf=\"overlay.open && backdrop\"></div>\n\n  <div [style.visibility]=\"!morphing ? 'visible' : 'hidden'\">\n    <div [@slideDown] *ngIf=\"controlsVisible && topToolbar\" class=\"gallery-toolbar header\" color=\"transparent\">\n      <ng-container [ngTemplateOutlet]=\"topToolbar\">\n      </ng-container>\n    </div>\n\n    <ng-container *fivIf=\"['desktop']\">\n      <ion-fab [@scale] *ngIf=\"controlsVisible && images?.length > 0 && pagerVisible\" vertical=\"center\"\n        horizontal=\"start\" slot=\"fixed\">\n        <ion-fab-button color=\"light\" (click)=\"prev()\" [disabled]=\"activeIndex === 0\">\n          <ion-icon name=\"arrow-back\"></ion-icon>\n        </ion-fab-button>\n      </ion-fab>\n    </ng-container>\n\n    <div #viewer class=\"viewer\" fivPull [maxPullHeight]=\"160\" [minPullHeight]=\"120\" (fivPull)=\"transformSlides($event)\"\n      (fivRefresh)=\"close()\" (fivCancel)=\"resetSlides($event)\" [enableScroll]=\"true\">\n      <ion-slides #slider *ngIf=\"overlay.open\" (ionSlideDidChange)=\"slideDidChange()\"\n        (ionSlideNextStart)=\"ionSlideNextStart()\" (ionSlidePrevStart)=\"ionSlidePrevStart()\"\n        (ionSlidesDidLoad)=\"onSlidesLoad()\" [options]=\"{ zoom: true, initialSlide: initialImage?.index}\">\n        <ion-slide *ngFor=\"let image of images; let i = index\">\n          <div class=\"swiper-zoom-container\">\n            <img #slideImage [ngClass]=\"{'instant': activeIndex !== i}\" [src]=\"image.src\">\n          </div>\n        </ion-slide>\n      </ion-slides>\n    </div>\n\n    <ng-container *fivIf=\"['desktop']\">\n      <ion-fab [@scale] *ngIf=\"controlsVisible && pagerVisible\" vertical=\"center\" horizontal=\"end\" slot=\"fixed\">\n        <ion-fab-button color=\"light\" (click)=\"next()\" [disabled]=\"activeIndex === images.length - 1\">\n          <ion-icon name=\"arrow-forward\"></ion-icon>\n        </ion-fab-button>\n      </ion-fab>\n    </ng-container>\n\n    <div [@slideUp] *ngIf=\"controlsVisible && bottomToolbar\" class=\"gallery-toolbar footer\" color=\"transparent\">\n      <ng-container [ngTemplateOutlet]=\"bottomToolbar\">\n      </ng-container>\n    </div>\n  </div>\n\n\n\n\n</fiv-overlay>\n<fiv-overlay #morphOverlay>\n  <img #morph class=\"morph\" *ngIf=\"initialImage\" [src]=\"initialImage.src\">\n</fiv-overlay>",
                animations: [
                    trigger('scale', [
                        transition('void => *', [
                            style({ opacity: 0, transform: 'scale(0)' }),
                            animate('125ms', style({ opacity: 1, transform: 'scale(1)' }))
                        ]),
                        transition('* => void', [
                            style({ opacity: 1, transform: 'scale(1)' }),
                            animate('125ms', style({ opacity: 0, transform: 'scale(0)' }))
                        ])
                    ]),
                    trigger('slideUp', [
                        transition('void => *', [
                            style({ opacity: 0, transform: 'translateY(100%)' }),
                            animate('75ms', style({ opacity: 1, transform: 'translateY(0%)' }))
                        ]),
                        transition('* => void', [
                            style({ opacity: 1, transform: 'translateY(0%)' }),
                            animate('75ms', style({ opacity: 0, transform: 'translateY(100%)' }))
                        ])
                    ]),
                    trigger('slideDown', [
                        transition('* => void', [
                            style({ opacity: 0, transform: 'translateY(0%)' }),
                            animate('75ms', style({ opacity: 1, transform: 'translateY(-100%)' }))
                        ]),
                        transition('void => *', [
                            style({ opacity: 1, transform: 'translateY(-100%)' }),
                            animate('75ms', style({ opacity: 0, transform: 'translateY(0%)' }))
                        ])
                    ]),
                    trigger('fade', [
                        transition('* => void', useAnimation(fade, {
                            params: {
                                fromOpacity: 1,
                                toOpacity: 0,
                                time: '240ms'
                            }
                        })),
                        transition('void => *', useAnimation(fade, {
                            params: {
                                fromOpacity: 0,
                                toOpacity: 1,
                                time: '240ms'
                            }
                        }))
                    ])
                ],
                styles: [".viewer{width:100vw;height:100vh}.viewer ion-slides{height:100%}.viewer img{height:auto;max-height:100%;width:auto;max-width:100%}.viewer img.instant{transition-duration:0s!important}.gallery-toolbar{width:100%;--fiv-gallery-toolbar-color:#fff;position:absolute;color:var(--fiv-gallery-toolbar-color)}.gallery-toolbar.header{top:env(safe-area-inset-top)}.gallery-toolbar.footer{bottom:env(safe-area-inset-bottom)}.morph{position:absolute;-o-object-position:center;object-position:center;-o-object-fit:cover;object-fit:cover;display:block}.backdrop{height:100vh;width:100vw;position:absolute;transition:background-color .2s}"]
            }] }
];
/** @nocollapse */
FivGallery.ctorParameters = () => [
    { type: DomController },
    { type: Renderer2 },
    { type: AnimationBuilder },
    { type: ChangeDetectorRef },
    { type: Platform },
    { type: ImageService },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
FivGallery.propDecorators = {
    overlay: [{ type: ViewChild, args: ['overlay', { static: false },] }],
    morphOverlay: [{ type: ViewChild, args: ['morphOverlay', { static: false },] }],
    viewer: [{ type: ViewChild, args: ['viewer', { static: false },] }],
    morphImage: [{ type: ViewChild, args: ['morph', { static: false },] }],
    swiper: [{ type: ViewChild, args: ['slider', { static: false, read: ElementRef },] }],
    slides: [{ type: ViewChild, args: ['slider', { static: false },] }],
    slideImages: [{ type: ViewChildren, args: ['slideImage',] }],
    images: [{ type: ContentChildren, args: [forwardRef((/**
                 * @return {?}
                 */
                () => FivGalleryImage)),
                { descendants: true },] }],
    toolbars: [{ type: ContentChildren, args: [FivGalleryToolbar,] }],
    pagerVisible: [{ type: Input }],
    ambient: [{ type: Input }],
    willOpen: [{ type: Output }],
    willClose: [{ type: Output }],
    didOpen: [{ type: Output }],
    didClose: [{ type: Output }],
    backdropChange: [{ type: Output }],
    keyEvent: [{ type: HostListener, args: ['window:keyup', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    FivGallery.prototype.overlay;
    /** @type {?} */
    FivGallery.prototype.morphOverlay;
    /** @type {?} */
    FivGallery.prototype.viewer;
    /** @type {?} */
    FivGallery.prototype.morphImage;
    /** @type {?} */
    FivGallery.prototype.swiper;
    /** @type {?} */
    FivGallery.prototype.slides;
    /** @type {?} */
    FivGallery.prototype.slideImages;
    /** @type {?} */
    FivGallery.prototype.images;
    /** @type {?} */
    FivGallery.prototype.toolbars;
    /** @type {?} */
    FivGallery.prototype.topToolbar;
    /** @type {?} */
    FivGallery.prototype.bottomToolbar;
    /** @type {?} */
    FivGallery.prototype.initialImage;
    /** @type {?} */
    FivGallery.prototype.activeIndex;
    /** @type {?} */
    FivGallery.prototype.inFullscreen;
    /** @type {?} */
    FivGallery.prototype.zoomedIn;
    /** @type {?} */
    FivGallery.prototype.controlsVisible;
    /** @type {?} */
    FivGallery.prototype.slidesLoaded;
    /** @type {?} */
    FivGallery.prototype.morphing;
    /** @type {?} */
    FivGallery.prototype.backdrop;
    /** @type {?} */
    FivGallery.prototype.backdropColor;
    /** @type {?} */
    FivGallery.prototype.pagerVisible;
    /** @type {?} */
    FivGallery.prototype.ambient;
    /** @type {?} */
    FivGallery.prototype.willOpen;
    /** @type {?} */
    FivGallery.prototype.willClose;
    /** @type {?} */
    FivGallery.prototype.didOpen;
    /** @type {?} */
    FivGallery.prototype.didClose;
    /** @type {?} */
    FivGallery.prototype.backdropChange;
    /** @type {?} */
    FivGallery.prototype.$onDestroy;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.domCtrl;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.animation;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.change;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.platform;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.imageService;
    /**
     * @type {?}
     * @private
     */
    FivGallery.prototype.document;
}
export class Position {
}
if (false) {
    /** @type {?} */
    Position.prototype.top;
    /** @type {?} */
    Position.prototype.left;
    /** @type {?} */
    Position.prototype.height;
    /** @type {?} */
    Position.prototype.width;
    /** @type {?} */
    Position.prototype.translate;
}
//# sourceMappingURL=data:application/json;base64,