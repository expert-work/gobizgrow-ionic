/**
 * @fileoverview added by tsickle
 * Generated from: lib/center/center.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, HostBinding } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
export class FivCenter {
    /**
     * @param {?} sanitizer
     */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.vertical = true;
        this.horizontal = true;
    }
    /**
     * @return {?}
     */
    get myStyle() {
        // tslint:disable-next-line:max-line-length
        /** @type {?} */
        const style = `position: absolute; ${this.vertical && this.horizontal
            ? 'top: 50%; left: 50%; transform: translateY(-50%) translateX(-50%);'
            : this.vertical
                ? 'top: 50%; transform: translateY(-50%);'
                : 'left: 50%; transform: translateX(-50%);'}`;
        return this.sanitizer.bypassSecurityTrustStyle(style);
    }
    /**
     * @param {?} center
     * @return {?}
     */
    set fivCenter(center) {
        if (center) {
            this.vertical = center.vertical;
            this.horizontal = center.horizontal;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
}
FivCenter.decorators = [
    { type: Directive, args: [{
                selector: '[fivCenter]'
            },] }
];
/** @nocollapse */
FivCenter.ctorParameters = () => [
    { type: DomSanitizer }
];
FivCenter.propDecorators = {
    myStyle: [{ type: HostBinding, args: ['style',] }],
    fivCenter: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FivCenter.prototype.vertical;
    /** @type {?} */
    FivCenter.prototype.horizontal;
    /**
     * @type {?}
     * @private
     */
    FivCenter.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VudGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmaXZldGhyZWUvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9jZW50ZXIvY2VudGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUN0RSxPQUFPLEVBQWEsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFLcEUsTUFBTSxPQUFPLFNBQVM7Ozs7SUFJcEIsWUFBb0IsU0FBdUI7UUFBdkIsY0FBUyxHQUFULFNBQVMsQ0FBYztRQUgzQyxhQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLGVBQVUsR0FBRyxJQUFJLENBQUM7SUFFNEIsQ0FBQzs7OztJQUUvQyxJQUNJLE9BQU87OztjQUVILEtBQUssR0FBRyx1QkFDWixJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxVQUFVO1lBQzlCLENBQUMsQ0FBQyxvRUFBb0U7WUFDdEUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRO2dCQUNmLENBQUMsQ0FBQyx3Q0FBd0M7Z0JBQzFDLENBQUMsQ0FBQyx5Q0FDTixFQUFFO1FBQ0YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hELENBQUM7Ozs7O0lBRUQsSUFBYSxTQUFTLENBQUMsTUFBa0Q7UUFDdkUsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7WUFDaEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO1NBQ3JDO0lBQ0gsQ0FBQzs7OztJQUVELFFBQVEsS0FBVSxDQUFDOzs7WUE3QnBCLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsYUFBYTthQUN4Qjs7OztZQUptQixZQUFZOzs7c0JBVzdCLFdBQVcsU0FBQyxPQUFPO3dCQWFuQixLQUFLOzs7O0lBbEJOLDZCQUFnQjs7SUFDaEIsK0JBQWtCOzs7OztJQUVOLDhCQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIEhvc3RCaW5kaW5nLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNhZmVTdHlsZSwgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tmaXZDZW50ZXJdJ1xufSlcbmV4cG9ydCBjbGFzcyBGaXZDZW50ZXIgaW1wbGVtZW50cyBPbkluaXQge1xuICB2ZXJ0aWNhbCA9IHRydWU7XG4gIGhvcml6b250YWwgPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHt9XG5cbiAgQEhvc3RCaW5kaW5nKCdzdHlsZScpXG4gIGdldCBteVN0eWxlKCk6IFNhZmVTdHlsZSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxuICAgIGNvbnN0IHN0eWxlID0gYHBvc2l0aW9uOiBhYnNvbHV0ZTsgJHtcbiAgICAgIHRoaXMudmVydGljYWwgJiYgdGhpcy5ob3Jpem9udGFsXG4gICAgICAgID8gJ3RvcDogNTAlOyBsZWZ0OiA1MCU7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKSB0cmFuc2xhdGVYKC01MCUpOydcbiAgICAgICAgOiB0aGlzLnZlcnRpY2FsXG4gICAgICAgID8gJ3RvcDogNTAlOyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7J1xuICAgICAgICA6ICdsZWZ0OiA1MCU7IHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTsnXG4gICAgfWA7XG4gICAgcmV0dXJuIHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RTdHlsZShzdHlsZSk7XG4gIH1cblxuICBASW5wdXQoKSBzZXQgZml2Q2VudGVyKGNlbnRlcjogeyB2ZXJ0aWNhbDogYm9vbGVhbjsgaG9yaXpvbnRhbDogYm9vbGVhbiB9KSB7XG4gICAgaWYgKGNlbnRlcikge1xuICAgICAgdGhpcy52ZXJ0aWNhbCA9IGNlbnRlci52ZXJ0aWNhbDtcbiAgICAgIHRoaXMuaG9yaXpvbnRhbCA9IGNlbnRlci5ob3Jpem9udGFsO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge31cbn1cbiJdfQ==