/**
 * @fileoverview added by tsickle
 * Generated from: lib/pull/pull.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, Output, EventEmitter } from '@angular/core';
import { IonContent, Platform } from '@ionic/angular';
import { fromEvent, merge } from 'rxjs';
import { filter, map, skipWhile, takeUntil, takeLast } from 'rxjs/operators';
var FivPull = /** @class */ (function () {
    function FivPull(element, platform, content) {
        this.element = element;
        this.platform = platform;
        this.content = content;
        this.minPullHeight = 112;
        this.maxPullHeight = 168;
        this.enabled = true;
        this.enableScroll = false;
        this.direction = 'down';
        this.fivRefresh = new EventEmitter();
        this.fivCancel = new EventEmitter();
        this.fivPull = new EventEmitter();
    }
    /**
     * @return {?}
     */
    FivPull.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.init();
    };
    /**
     * @param {?=} minPullHeight
     * @param {?=} maxPullHeight
     * @param {?=} direction
     * @return {?}
     */
    FivPull.prototype.init = /**
     * @param {?=} minPullHeight
     * @param {?=} maxPullHeight
     * @param {?=} direction
     * @return {?}
     */
    function (minPullHeight, maxPullHeight, direction) {
        var _this = this;
        if (minPullHeight === void 0) { minPullHeight = 112; }
        if (maxPullHeight === void 0) { maxPullHeight = 168; }
        if (direction === void 0) { direction = 'down'; }
        this.minPullHeight = minPullHeight;
        this.maxPullHeight = maxPullHeight;
        this.direction = direction;
        this.content.scrollEvents = true;
        this.content.getScrollElement().then((/**
         * @param {?} s
         * @return {?}
         */
        function (s) {
            _this.scrollY = s; // needed for scrollTop
            _this.setupPanListener();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    FivPull.prototype.setupPanListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var touchstart$ = fromEvent(this.element.nativeElement, 'touchstart', {
            passive: true
        });
        /** @type {?} */
        var touchmove$ = fromEvent(this.element.nativeElement, 'touchmove', {
            passive: true
        });
        /** @type {?} */
        var touchend$ = fromEvent(this.element.nativeElement, 'touchend', {
            passive: true
        });
        /** @type {?} */
        var touchcancel$ = fromEvent(this.element.nativeElement, 'touchcancel', {
            passive: true
        });
        /** @type {?} */
        var end$ = merge(touchend$, touchcancel$);
        /** @type {?} */
        var dragAtTop = touchstart$.pipe(filter((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            return (_this.scrollY.scrollTop === 0 || _this.enableScroll) &&
                _this.direction === 'down' &&
                _this.enabled;
        })));
        /** @type {?} */
        var dragAtBottom = touchstart$.pipe(filter((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            return (_this.scrollY.scrollTop ===
                _this.scrollY.clientHeight - _this.platform.height() ||
                _this.enableScroll) &&
                _this.direction === 'up' &&
                _this.enabled;
        })));
        /** @type {?} */
        var dragTopDown = dragAtTop.pipe(map((/**
         * @param {?} start
         * @return {?}
         */
        function (start) {
            /** @type {?} */
            var startY = start.touches[0].pageY;
            return touchmove$.pipe(map((/**
             * @param {?} move
             * @return {?}
             */
            function (move) {
                /** @type {?} */
                var currentY = move.touches[0].pageY;
                return {
                    startEvent: start,
                    moveEvent: move,
                    startY: startY,
                    currentY: currentY,
                    offset: currentY - startY
                };
            })), skipWhile((/**
             * @param {?} drag
             * @return {?}
             */
            function (drag) { return drag.offset < 0; })), takeUntil(end$));
        })));
        dragTopDown.forEach((/**
         * @param {?} drags
         * @return {?}
         */
        function (drags) {
            drags.forEach((/**
             * @param {?} drag
             * @return {?}
             */
            function (drag) {
                /** @type {?} */
                var offset = drag.offset / 2;
                if (offset < 0 || offset > _this.maxPullHeight) {
                    return;
                }
                if (offset <= _this.maxPullHeight) {
                }
                _this.fivPull.emit(offset / _this.maxPullHeight);
            }));
            drags.pipe(takeLast(1)).subscribe((/**
             * @param {?} drag
             * @return {?}
             */
            function (drag) {
                /** @type {?} */
                var offset = drag.offset / 2;
                /** @type {?} */
                var refresh = offset >= _this.minPullHeight;
                if (refresh) {
                    _this.fivRefresh.emit(offset / _this.maxPullHeight);
                }
                else {
                    _this.fivCancel.emit(offset / _this.maxPullHeight);
                }
            }));
        }));
        /** @type {?} */
        var dragBottomUp = dragAtBottom.pipe(map((/**
         * @param {?} start
         * @return {?}
         */
        function (start) {
            /** @type {?} */
            var startY = start.touches[0].pageY;
            return touchmove$.pipe(map((/**
             * @param {?} move
             * @return {?}
             */
            function (move) {
                /** @type {?} */
                var currentY = move.touches[0].pageY;
                return {
                    startEvent: start,
                    moveEvent: move,
                    startY: startY,
                    currentY: currentY,
                    offset: startY - currentY
                };
            })), skipWhile((/**
             * @param {?} drag
             * @return {?}
             */
            function (drag) { return drag.offset < 0; })), takeUntil(end$));
        })));
        dragBottomUp.forEach((/**
         * @param {?} drags
         * @return {?}
         */
        function (drags) {
            drags.forEach((/**
             * @param {?} drag
             * @return {?}
             */
            function (drag) {
                /** @type {?} */
                var offset = drag.offset / 2;
                if (offset < 0 || offset > _this.maxPullHeight) {
                    return;
                }
                _this.fivPull.emit(offset / _this.maxPullHeight);
            }));
            drags.pipe(takeLast(1)).subscribe((/**
             * @param {?} drag
             * @return {?}
             */
            function (drag) {
                /** @type {?} */
                var offset = drag.offset / 2;
                /** @type {?} */
                var refresh = offset >= _this.minPullHeight;
                if (refresh) {
                    _this.fivRefresh.emit(offset / _this.maxPullHeight);
                }
                else {
                    _this.fivCancel.emit(offset / _this.maxPullHeight);
                }
            }));
        }));
    };
    FivPull.decorators = [
        { type: Directive, args: [{
                    selector: '[fivPull]'
                },] }
    ];
    /** @nocollapse */
    FivPull.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Platform },
        { type: IonContent }
    ]; };
    FivPull.propDecorators = {
        minPullHeight: [{ type: Input }],
        maxPullHeight: [{ type: Input }],
        enabled: [{ type: Input }],
        enableScroll: [{ type: Input }],
        direction: [{ type: Input }],
        fivRefresh: [{ type: Output }],
        fivCancel: [{ type: Output }],
        fivPull: [{ type: Output }]
    };
    return FivPull;
}());
export { FivPull };
if (false) {
    /** @type {?} */
    FivPull.prototype.minPullHeight;
    /** @type {?} */
    FivPull.prototype.maxPullHeight;
    /** @type {?} */
    FivPull.prototype.enabled;
    /** @type {?} */
    FivPull.prototype.enableScroll;
    /** @type {?} */
    FivPull.prototype.direction;
    /** @type {?} */
    FivPull.prototype.fivRefresh;
    /** @type {?} */
    FivPull.prototype.fivCancel;
    /** @type {?} */
    FivPull.prototype.fivPull;
    /** @type {?} */
    FivPull.prototype.scrollY;
    /**
     * @type {?}
     * @private
     */
    FivPull.prototype.element;
    /**
     * @type {?}
     * @private
     */
    FivPull.prototype.platform;
    /**
     * @type {?}
     * @private
     */
    FivPull.prototype.content;
}
//# sourceMappingURL=data:application/json;base64,